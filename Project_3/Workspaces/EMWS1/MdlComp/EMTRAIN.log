MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 04, 
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "07:51:32" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 04, 2015
Time:                07:51:32
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2CYT6U4 "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2CYT6U4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 04, 
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "07:51:32" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 04, 
2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "07:51:32" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
69653      data work.MdlComp;
MPRINT(EM_DIAGRAM):    data work.MdlComp;
69654      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69655      where
69656      (NODEID="Neural" and LABEL ne 'Neural Network')
69657      OR (NODEID="Neural3" and LABEL ne 'Neural Network (3)')
69658      OR (NODEID="Neural4" and LABEL ne 'Neural Network (4)')
69659      OR (NODEID="Neural2" and LABEL ne 'Neural Network (2)')
69660      OR (NODEID="Neural5" and LABEL ne 'Neural Network (5)')
69661      OR (NODEID="Neural6" and LABEL ne 'Neural Network (6)')
69662      ;
MPRINT(EM_DIAGRAM):   where (NODEID="Neural" and LABEL ne 'Neural Network') OR 
(NODEID="Neural3" and LABEL ne 'Neural Network (3)') OR (NODEID="Neural4" and LABEL ne 'Neural 
Network (4)') OR (NODEID="Neural2" and LABEL ne 'Neural Network (2)') OR (NODEID="Neural5" and 
LABEL ne 'Neural Network (5)') OR (NODEID="Neural6" and LABEL ne 'Neural Network (6)') ;
69663      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.EM_NODEID.
      WHERE ((NODEID='Neural') and (LABEL not = 'Neural Network')) or ((NODEID='Neural3') and 
      (LABEL not = 'Neural Network (3)')) or ((NODEID='Neural4') and (LABEL not = 'Neural 
      Network (4)')) or ((NODEID='Neural2') and (LABEL not = 'Neural Network (2)')) or 
      ((NODEID='Neural5') and (LABEL not = 'Neural Network (5)')) or ((NODEID='Neural6') and 
      (LABEL not = 'Neural Network (6)'));
NOTE: The data set WORK.MDLCOMP has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ 
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
69665      proc freq data=EMWS1.MdlComp_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.MdlComp_VariableSet noprint;
69666      table ROLE*LEVEL/out=WORK.MdlCompMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MdlCompMETA;
69667      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_VARIABLESET.
NOTE: The data set WORK.MDLCOMPMETA has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69668      proc print data=WORK.MdlCompMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MdlCompMETA label noobs;
69669      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
69670      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
69670    ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
69670    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency 
Count";
69671      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
69672      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
69673      run;

NOTE: There were 1 observations read from the data set WORK.MDLCOMPMETA.
NOTE: The PROCEDURE PRINT printed page 37.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69674      title10;
MPRINT(EM_DIAGRAM):   title10;
69675      %let _hpflow = 0;
69676      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69677      set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
69678      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69679      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69680      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69681      %let _hpflow = 0;
69682      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69683      set EMWS1.Neural6_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMINFO;
69684      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69685      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69686      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69687      %let _hpflow = 0;
69688      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69689      set EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO;
69690      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69691      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69692      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69693      %let _hpflow = 0;
69694      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69695      set EMWS1.Neural3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMINFO;
69696      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69697      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69698      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69699      %let _hpflow = 0;
69700      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69701      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
69702      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69703      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69704      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69705      %let _hpflow = 0;
69706      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69707      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
69708      where key="HPDMSAMPLE";
MPRINT(EM_DIAGRAM):   where key="HPDMSAMPLE";
69709      call symput('_hpflow', '1');
MPRINT(EM_DIAGRAM):   call symput('_hpflow', '1');
69710      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE key='HPDMSAMPLE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69711      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69712      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69713      where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
69714      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69715      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69716      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMRANK;
69717      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69717    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69718      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69718    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69718    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69718    ! TARGETLABEL =
69719         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGETLABEL = "Target Label";
69720      retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network (4)"
69720    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGETLABEL "";
69721      set EMWS1.Neural4_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMRANK;
69722      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69723      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL4_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69724      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69725      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69726      where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
69727      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69728      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69729      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMSCOREDIST;
69730      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69730    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69731      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69731    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69731    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69731    ! TARGETLABEL =
69732         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGETLABEL = "Target Label";
69733      retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network (4)"
69733    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGETLABEL "";
69734      set EMWS1.Neural4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMSCOREDIST;
69735      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69736      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.NEURAL4_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 30 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO40JIX1XO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO40JIX1XO has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
69737      data WORK.Neural4_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural4_OUTFIT;
69738      set EMWS1.Neural4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMOUTFIT;
69739      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL4_EMOUTFIT.
NOTE: The data set WORK.NEURAL4_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69740      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69741      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69742      where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
69743      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69744      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69745      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMOUTFIT;
69746      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
69747      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69747    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69747    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69747    ! TARGETLABEL =
69748         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGETLABEL = "Target Label";
69749      retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network (4)"
69749    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGETLABEL "";
69750      set WORK.Neural4_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural4_OUTFIT;
69751      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69752      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL4_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69753      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69754      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69755      where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
69756      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69757      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69758      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMCLASSIFICATION;
69759      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69759    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69760      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69760    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69760    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69760    ! TARGETLABEL =
69761         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGETLABEL = "Target Label";
69762      retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network (4)"
69762    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGETLABEL "";
69763      set EMWS1.Neural4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMCLASSIFICATION;
69764      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69765      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL4_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69766      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69767      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69768      where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
69769      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69770      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69771      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMEVENTREPORT;
69772      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69772    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69773      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69773    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69773    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69773    ! TARGETLABEL =
69774         "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGETLABEL = "Target Label";
69775      retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network (4)"
69775    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGETLABEL "";
69776      set EMWS1.Neural4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMEVENTREPORT;
69777      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69778      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69779      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69780      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69781      where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
69782      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69783      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69784      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69785      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69785    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69786      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69786    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69786    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69786    ! TARGET =
69787         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69787    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69788      retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network (6)"
69788    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGETLABEL "";
69789      set EMWS1.Neural6_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMRANK;
69790      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69791      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL6_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69792      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMRANK;
69793      set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
69794      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 80 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69795      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69796      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69797      where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
69798      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69799      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69800      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69801      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69801    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69802      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69802    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69802    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69802    ! TARGET =
69803         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69803    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69804      retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network (6)"
69804    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGETLABEL "";
69805      set EMWS1.Neural6_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMSCOREDIST;
69806      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69807      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 18 observations read from the data set EMWS1.NEURAL6_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 18 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

69808      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMSCOREDIST;
69809      set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
69810      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 30 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: There were 18 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 48 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO405WA2W5 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL6_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO405WA2W5 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
69811      data WORK.Neural6_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural6_OUTFIT;
69812      set EMWS1.Neural6_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMOUTFIT;
69813      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL6_EMOUTFIT.
NOTE: The data set WORK.NEURAL6_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69814      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69815      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69816      where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
69817      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69818      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69819      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69820      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
69821      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69821    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69821    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69821    ! TARGET =
69822         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69822    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69823      retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network (6)"
69823    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGETLABEL "";
69824      set WORK.Neural6_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural6_OUTFIT;
69825      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69826      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL6_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69827      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
69828      set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
69829      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 2 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69830      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69831      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69832      where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
69833      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69834      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69835      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69836      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69836    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69837      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69837    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69837    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69837    ! TARGET =
69838         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69838    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69839      retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network (6)"
69839    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGETLABEL "";
69840      set EMWS1.Neural6_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMCLASSIFICATION;
69841      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69842      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL6_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69843      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMCLASSIFICATION;
69844      set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
69845      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
NOTE: There were 8 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 16 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69846      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69847      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69848      where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
69849      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69850      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69851      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69852      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69852    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69853      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69853    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69853    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69853    ! TARGET =
69854         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69854    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69855      retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network (6)"
69855    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGETLABEL "";
69856      set EMWS1.Neural6_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_EMEVENTREPORT;
69857      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69858      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL6_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69859      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMEVENTREPORT;
69860      set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
69861      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: There were 2 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 4 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69862      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69863      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69864      where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
69865      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69866      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69867      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69868      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69868    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69869      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69869    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69869    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69869    ! TARGET =
69870         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69870    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69871      retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network (5)"
69871    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGETLABEL "";
69872      set EMWS1.Neural5_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMRANK;
69873      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69874      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL5_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69875      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMRANK;
69876      set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
69877      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 80 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 120 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69878      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69879      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69880      where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
69881      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69882      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69883      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69884      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69884    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69885      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69885    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69885    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69885    ! TARGET =
69886         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69886    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69887      retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network (5)"
69887    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGETLABEL "";
69888      set EMWS1.Neural5_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMSCOREDIST;
69889      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69890      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 36 observations read from the data set EMWS1.NEURAL5_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 36 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69891      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMSCOREDIST;
69892      set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
69893      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 48 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: There were 36 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 84 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41O5SY90 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO41O5SY90 has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
69894      data WORK.Neural5_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural5_OUTFIT;
69895      set EMWS1.Neural5_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMOUTFIT;
69896      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL5_EMOUTFIT.
NOTE: The data set WORK.NEURAL5_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69897      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69898      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69899      where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
69900      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69901      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69902      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69903      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
69904      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69904    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69904    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69904    ! TARGET =
69905         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69905    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69906      retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network (5)"
69906    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGETLABEL "";
69907      set WORK.Neural5_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural5_OUTFIT;
69908      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69909      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL5_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69910      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
69911      set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
69912      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 3 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69913      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69914      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69915      where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
69916      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69917      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69918      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69919      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69919    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69920      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69920    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69920    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69920    ! TARGET =
69921         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69921    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69922      retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network (5)"
69922    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGETLABEL "";
69923      set EMWS1.Neural5_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMCLASSIFICATION;
69924      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69925      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL5_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

69926      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMCLASSIFICATION;
69927      set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
69928      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 16 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
NOTE: There were 8 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 24 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69929      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69930      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69931      where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
69932      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69933      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69934      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69935      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69935    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69936      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69936    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69936    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69936    ! TARGET =
69937         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69937    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69938      retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network (5)"
69938    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGETLABEL "";
69939      set EMWS1.Neural5_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMEVENTREPORT;
69940      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69941      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL5_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69942      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMEVENTREPORT;
69943      set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
69944      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: There were 2 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 6 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69945      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69946      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69947      where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
69948      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69949      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69950      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69951      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69951    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69952      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69952    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69952    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69952    ! TARGET =
69953         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69953    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69954      retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network (3)"
69954    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGETLABEL "";
69955      set EMWS1.Neural3_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMRANK;
69956      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69957      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

69958      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMRANK;
69959      set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
69960      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 120 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 160 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69961      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69962      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69963      where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
69964      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69965      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69966      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69967      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
69967    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
69968      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69968    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69968    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69968    ! TARGET =
69969         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69969    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69970      retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network (3)"
69970    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGETLABEL "";
69971      set EMWS1.Neural3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMSCOREDIST;
69972      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69973      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

69974      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMSCOREDIST;
69975      set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
69976      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 84 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 124 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO406PDEUD has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO406PDEUD has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
69977      data WORK.Neural3_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural3_OUTFIT;
69978      set EMWS1.Neural3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMOUTFIT;
69979      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL3_EMOUTFIT.
NOTE: The data set WORK.NEURAL3_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69980      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69981      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69982      where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
69983      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
69984      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

69985      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
69986      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
69987      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
69987    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
69987    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
69987    ! TARGET =
69988         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
69988    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
69989      retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network (3)"
69989    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGETLABEL "";
69990      set WORK.Neural3_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural3_OUTFIT;
69991      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
69992      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL3_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

69993      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
69994      set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
69995      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 4 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

69996      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
69997      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
69998      where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
69999      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70000      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70001      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70002      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70002    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70003      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70003    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70003    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70003    ! TARGET =
70004         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70004    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70005      retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network (3)"
70005    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGETLABEL "";
70006      set EMWS1.Neural3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMCLASSIFICATION;
70007      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70008      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL3_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70009      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMCLASSIFICATION;
70010      set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
70011      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 24 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
NOTE: There were 8 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 32 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70012      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70013      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70014      where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
70015      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70016      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70017      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70018      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70018    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70019      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70019    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70019    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70019    ! TARGET =
70020         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70020    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70021      retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network (3)"
70021    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGETLABEL "";
70022      set EMWS1.Neural3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_EMEVENTREPORT;
70023      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70024      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL3_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70025      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMEVENTREPORT;
70026      set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
70027      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: There were 2 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 8 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70028      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70029      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70030      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
70031      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70032      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70033      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70034      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70034    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70035      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70035    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70035    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70035    ! TARGET =
70036         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70036    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70037      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network (2)"
70037    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGETLABEL "";
70038      set EMWS1.Neural2_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMRANK;
70039      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70040      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70041      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMRANK;
70042      set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
70043      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 160 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 200 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

70044      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70045      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70046      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
70047      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70048      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70049      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70050      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70050    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70051      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70051    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70051    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70051    ! TARGET =
70052         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70052    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70053      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network (2)"
70053    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGETLABEL "";
70054      set EMWS1.Neural2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMSCOREDIST;
70055      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70056      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70057      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMSCOREDIST;
70058      set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
70059      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 124 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 164 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41_SUW7X has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO41_SUW7X has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
70060      data WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural2_OUTFIT;
70061      set EMWS1.Neural2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMOUTFIT;
70062      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL2_EMOUTFIT.
NOTE: The data set WORK.NEURAL2_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70063      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70064      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70065      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
70066      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70067      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70068      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70069      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
70070      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70070    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70070    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70070    ! TARGET =
70071         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70071    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70072      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network (2)"
70072    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGETLABEL "";
70073      set WORK.Neural2_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural2_OUTFIT;
70074      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70075      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL2_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70076      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
70077      set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
70078      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 5 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

70079      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70080      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70081      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
70082      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70083      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70084      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70085      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70085    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70086      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70086    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70086    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70086    ! TARGET =
70087         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70087    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70088      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network (2)"
70088    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGETLABEL "";
70089      set EMWS1.Neural2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMCLASSIFICATION;
70090      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70091      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL2_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70092      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMCLASSIFICATION;
70093      set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
70094      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 32 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
NOTE: There were 8 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 40 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70095      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70096      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70097      where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
70098      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70099      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70100      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70101      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70101    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70102      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70102    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70102    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70102    ! TARGET =
70103         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70103    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70104      retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network (2)"
70104    ! TARGETLABEL "";
MPRINT(EM_DIAGRAM):   retain parent "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGETLABEL "";
70105      set EMWS1.Neural2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMEVENTREPORT;
70106      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70107      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70108      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMEVENTREPORT;
70109      set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
70110      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: There were 2 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 10 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70111      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70112      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70113      where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
70114      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70115      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70116      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70117      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70117    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70118      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70118    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70118    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70118    ! TARGET =
70119         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70119    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70120      retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" TARGETLABEL
70120    ! "";
MPRINT(EM_DIAGRAM):   retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGETLABEL "";
70121      set EMWS1.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMRANK;
70122      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70123      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70124      data EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMRANK;
70125      set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK work.MdlComp_TEMP;
70126      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 200 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 240 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

70127      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70128      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70129      where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
70130      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70131      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70132      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70133      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70133    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70134      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70134    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70134    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70134    ! TARGET =
70135         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70135    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70136      retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" TARGETLABEL
70136    ! "";
MPRINT(EM_DIAGRAM):   retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGETLABEL "";
70137      set EMWS1.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMSCOREDIST;
70138      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70139      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 40 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70140      data EMWS1.MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMSCOREDIST;
70141      set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMSCOREDIST work.MdlComp_TEMP;
70142      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 164 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: There were 40 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 204 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECMETA');
NOTE: The data set WORK.EMINFO41KGCR0O has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (TARGET='BAD') and (KEY='DECDATA');
NOTE: The data set WORK.EMINFO41KGCR0O has 1 observations and 3 variables.
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
70143      data WORK.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):    data WORK.Neural_OUTFIT;
70144      set EMWS1.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMOUTFIT;
70145      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.NEURAL_EMOUTFIT.
NOTE: The data set WORK.NEURAL_OUTFIT has 1 observations and 36 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70146      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70147      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70148      where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
70149      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70150      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70151      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70152      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
70153      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70153    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70153    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70153    ! TARGET =
70154         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70154    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70155      retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" TARGETLABEL
70155    ! "";
MPRINT(EM_DIAGRAM):   retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGETLABEL "";
70156      set WORK.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_OUTFIT;
70157      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70158      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.NEURAL_OUTFIT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 1 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70159      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
70160      set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT work.MdlComp_TEMP;
70161      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 1 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70162      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70163      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70164      where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
70165      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70166      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70167      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70168      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70168    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70169      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70169    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70169    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70169    ! TARGET =
70170         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70170    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70171      retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" TARGETLABEL
70171    ! "";
MPRINT(EM_DIAGRAM):   retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGETLABEL "";
70172      set EMWS1.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMCLASSIFICATION;
70173      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70174      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set EMWS1.NEURAL_EMCLASSIFICATION.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 8 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70175      data EMWS1.MdlComp_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMCLASSIFICATION;
70176      set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMCLASSIFICATION work.MdlComp_TEMP;
70177      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 40 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
NOTE: There were 8 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMCLASSIFICATION has 48 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70178      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
70179      set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
70180      where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
70181      call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
70182      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(NODEID)='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

70183      data work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):    data work.MdlComp_TEMP;
70184      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 TARGETLABEL
70184    !  $200;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $20 TARGET $32 
TARGETLABEL $200;
70185      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
70185    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))"
70185    ! MODELDESCRIPTION = "%sysfunc(sasmsg(sashelp.dmine, rpt_modeldesc_vlabel, NOQUOTE))"
70185    ! TARGET =
70186         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
70186    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
70187      retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" TARGETLABEL
70187    ! "";
MPRINT(EM_DIAGRAM):   retain parent "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGETLABEL "";
70188      set EMWS1.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMEVENTREPORT;
70189      where upcase(TARGET) = upcase("BAD");
MPRINT(EM_DIAGRAM):   where upcase(TARGET) = upcase("BAD");
70190      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.NEURAL_EMEVENTREPORT.
      WHERE UPCASE(TARGET)='BAD';
NOTE: The data set WORK.MDLCOMP_TEMP has 2 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

70191      data EMWS1.MdlComp_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMEVENTREPORT;
70192      set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMEVENTREPORT work.MdlComp_TEMP;
70193      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: There were 2 observations read from the data set WORK.MDLCOMP_TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMEVENTREPORT has 12 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

*------------------------------------------------------------* 
* "Compute assessment statistics" 
*------------------------------------------------------------* 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural4_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=100 BAD=1 LOAN=4100 MORTDUE=. VALUE=19132 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=100.77465221 NINQ=0 CLNO=19 DEBTINC=33.840919904 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=100.77465221 IMP_CLNO=19 IMP_DEBTINC=33.840919904 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=19132 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=49
_dataobs_=119 BAD=0 LOAN=4500 MORTDUE=. VALUE=49044 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=11.652738796 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=11.652738796 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49044 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=60
_dataobs_=206 BAD=0 LOAN=5100 MORTDUE=66834 VALUE=87361 REASON=HomeImp JOB=Other YOJ=0 DEROG=2
DELINQ=0 CLAGE=290.03410799 NINQ=0 CLNO=6 DEBTINC=38.766985071 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=290.03410799 IMP_CLNO=6 IMP_DEBTINC=38.766985071 IMP_DELINQ=0 IMP_DEROG=2
IMP_MORTDUE=66834 IMP_NINQ=0 IMP_VALUE=87361 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=97
_dataobs_=207 BAD=0 LOAN=5100 MORTDUE=73882 VALUE=96031 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=125.78740011 NINQ=1 CLNO=10 DEBTINC=34.446079222 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=125.78740011 IMP_CLNO=10 IMP_DEBTINC=34.446079222 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73882 IMP_NINQ=1 IMP_VALUE=96031 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=98
_dataobs_=213 BAD=0 LOAN=5200 MORTDUE=19000 VALUE=26000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=17.2 NINQ=10 CLNO=7 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon IMP_CLAGE=17.2
IMP_CLNO=7 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=1 IMP_MORTDUE=19000 IMP_NINQ=10
IMP_VALUE=26000 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=102
_dataobs_=221 BAD=0 LOAN=5300 MORTDUE=. VALUE=49396 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.043670576 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.043670576 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49396 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=109
_dataobs_=273 BAD=0 LOAN=5700 MORTDUE=. VALUE=68591 REASON=HomeImp JOB=Office YOJ=0 DEROG=0
DELINQ=0 CLAGE=69.645660473 NINQ=0 CLNO=4 DEBTINC=41.185039558 IMP_JOB=Office
IMP_REASON=HomeImp IMP_CLAGE=69.645660473 IMP_CLNO=4 IMP_DEBTINC=41.185039558 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=68591 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=128
_dataobs_=279 BAD=1 LOAN=5700 MORTDUE=77213 VALUE=92661 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=97.133170952 NINQ=1 CLNO=16 DEBTINC=41.777888631 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=97.133170952 IMP_CLNO=16 IMP_DEBTINC=41.777888631 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=77213 IMP_NINQ=1 IMP_VALUE=92661 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=131
_dataobs_=284 BAD=0 LOAN=5700 MORTDUE=28116 VALUE=33450 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=15.396587392 NINQ=9 CLNO=7 DEBTINC=30.017013296 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=15.396587392 IMP_CLNO=7 IMP_DEBTINC=30.017013296 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=28116 IMP_NINQ=9 IMP_VALUE=33450 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=133
_dataobs_=320 BAD=0 LOAN=6000 MORTDUE=69876 VALUE=94394.07 REASON=HomeImp JOB=Other YOJ=0
DEROG=0 DELINQ=1 CLAGE=179.56666667 NINQ=0 CLNO=32 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=179.56666667 IMP_CLNO=32 IMP_DEBTINC=33.786945547 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=69876 IMP_NINQ=0 IMP_VALUE=94394.07 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=153
_dataobs_=329 BAD=0 LOAN=6000 MORTDUE=79046 VALUE=103048 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=181.69653802 NINQ=0 CLNO=32 DEBTINC=37.289989924 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=181.69653802 IMP_CLNO=32 IMP_DEBTINC=37.289989924 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=79046 IMP_NINQ=0 IMP_VALUE=103048 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=160
_dataobs_=342 BAD=0 LOAN=6100 MORTDUE=. VALUE=46830 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=1
CLAGE=. NINQ=0 CLNO=0 DEBTINC=13.306013076 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=13.306013076 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46830 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=166
_dataobs_=356 BAD=0 LOAN=6200 MORTDUE=73881 VALUE=98550 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=182.8787798 NINQ=0 CLNO=31 DEBTINC=37.19944569 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=182.8787798 IMP_CLNO=31 IMP_DEBTINC=37.19944569 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73881 IMP_NINQ=0 IMP_VALUE=98550 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=172
_dataobs_=392 BAD=0 LOAN=6400 MORTDUE=44968 VALUE=62747 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=101.39144532 NINQ=. CLNO=12 DEBTINC=36.602947343 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=101.39144532 IMP_CLNO=12 IMP_DEBTINC=36.602947343
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=44968 IMP_NINQ=1.1569852941 IMP_VALUE=62747
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=188
_dataobs_=419 BAD=0 LOAN=6600 MORTDUE=. VALUE=48800 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.219436152 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.219436152 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=48800 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=197
_dataobs_=423 BAD=0 LOAN=6600 MORTDUE=. VALUE=46516 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=14.845990728 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=14.845990728 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46516 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=198
_dataobs_=454 BAD=0 LOAN=6800 MORTDUE=71666 VALUE=99913 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=196.46499893 NINQ=0 CLNO=31 DEBTINC=35.761604731 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=196.46499893 IMP_CLNO=31 IMP_DEBTINC=35.761604731 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=71666 IMP_NINQ=0 IMP_VALUE=99913 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=214
_dataobs_=471 BAD=0 LOAN=7000 MORTDUE=73873 VALUE=111781 REASON=DebtCon JOB=Office YOJ=0
DEROG=0 DELINQ=0 CLAGE=231.79991346 NINQ=0 CLNO=38 DEBTINC=19.273579455 IMP_JOB=Office
IMP_REASON=DebtCon IMP_CLAGE=231.79991346 IMP_CLNO=38 IMP_DEBTINC=19.273579455 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73873 IMP_NINQ=0 IMP_VALUE=111781 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=220
_dataobs_=474 BAD=0 LOAN=7000 MORTDUE=78284 VALUE=98214 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=171.83838617 NINQ=0 CLNO=31 DEBTINC=36.247963031 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=171.83838617 IMP_CLNO=31 IMP_DEBTINC=36.247963031 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=78284 IMP_NINQ=0 IMP_VALUE=98214 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=223
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=516 BAD=0 LOAN=7100 MORTDUE=57863 VALUE=70969 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=65.872044812 NINQ=7 CLNO=21 DEBTINC=26.829490191 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=65.872044812 IMP_CLNO=21 IMP_DEBTINC=26.829490191 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=57863 IMP_NINQ=7 IMP_VALUE=70969 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=239
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0115993465 OVLMAX 0.8029620811 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.83756361659925, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.6751272331985, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5160282066, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.210, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.5129892406, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.1885669506, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural4" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural4" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural4_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=93 BAD=0 LOAN=4000 MORTDUE=. VALUE=45760 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp IMP_CLAGE=181.15305208
IMP_CLNO=0 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0
IMP_VALUE=45760 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=48
_dataobs_=204 BAD=1 LOAN=5100 MORTDUE=15500 VALUE=34000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=2 CLAGE=86.233333333 NINQ=2 CLNO=13 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=86.233333333 IMP_CLNO=13 IMP_DEBTINC=33.786945547 IMP_DELINQ=2 IMP_DEROG=1
IMP_MORTDUE=15500 IMP_NINQ=2 IMP_VALUE=34000 IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=108
_dataobs_=208 BAD=0 LOAN=5100 MORTDUE=74071 VALUE=97064 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=121.0759726 NINQ=2 CLNO=9 DEBTINC=36.401729548 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=121.0759726 IMP_CLNO=9 IMP_DEBTINC=36.401729548 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=74071 IMP_NINQ=2 IMP_VALUE=97064 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=110
_dataobs_=217 BAD=1 LOAN=5200 MORTDUE=40564 VALUE=39527 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=157.77103572 NINQ=1 CLNO=13 DEBTINC=72.670433313 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=157.77103572 IMP_CLNO=13 IMP_DEBTINC=72.670433313 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=40564 IMP_NINQ=1 IMP_VALUE=39527 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=112
_dataobs_=224 BAD=0 LOAN=5300 MORTDUE=75958 VALUE=91703 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=124.1821788 NINQ=1 CLNO=10 DEBTINC=34.599060194 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=124.1821788 IMP_CLNO=10 IMP_DEBTINC=34.599060194 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=75958 IMP_NINQ=1 IMP_VALUE=91703 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=114
_dataobs_=227 BAD=0 LOAN=5300 MORTDUE=83552 VALUE=96809 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.423961906 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.423961906 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=83552 IMP_NINQ=1.1569852941 IMP_VALUE=96809 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=116
_dataobs_=274 BAD=0 LOAN=5700 MORTDUE=26927 VALUE=35461 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=21.799352154 NINQ=10 CLNO=6 DEBTINC=29.439664242 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=21.799352154 IMP_CLNO=6 IMP_DEBTINC=29.439664242 IMP_DELINQ=0
IMP_DEROG=1 IMP_MORTDUE=26927 IMP_NINQ=10 IMP_VALUE=35461 IMP_YOJ=0 INDELINQ=0 INDEROG=1
LOG_yoj=. _ERROR_=1 _N_=146
_dataobs_=283 BAD=1 LOAN=5700 MORTDUE=74172 VALUE=79846 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=0 DELINQ=0 CLAGE=157.00977472 NINQ=0 CLNO=28 DEBTINC=47.415228659 IMP_JOB=ProfExe
IMP_REASON=DebtCon IMP_CLAGE=157.00977472 IMP_CLNO=28 IMP_DEBTINC=47.415228659 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=74172 IMP_NINQ=0 IMP_VALUE=79846 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=151
_dataobs_=330 BAD=0 LOAN=6000 MORTDUE=. VALUE=53190 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=15.174415003 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=15.174415003 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=53190 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=170
_dataobs_=343 BAD=0 LOAN=6100 MORTDUE=78753 VALUE=95433 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.925117417 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.925117417 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78753 IMP_NINQ=1.1569852941 IMP_VALUE=95433 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=177
_dataobs_=344 BAD=0 LOAN=6100 MORTDUE=77265 VALUE=97944 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.876463055 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.876463055 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=77265 IMP_NINQ=1.1569852941 IMP_VALUE=97944 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=178
_dataobs_=358 BAD=0 LOAN=6200 MORTDUE=75121 VALUE=96462 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=27.167655962 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=27.167655962 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=75121 IMP_NINQ=1.1569852941 IMP_VALUE=96462 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=186
_dataobs_=382 BAD=0 LOAN=6400 MORTDUE=47251 VALUE=58157 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=. CLAGE=104.79246836 NINQ=. CLNO=13 DEBTINC=36.416886965 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=104.79246836 IMP_CLNO=13 IMP_DEBTINC=36.416886965
IMP_DELINQ=0.4622255303 IMP_DEROG=0 IMP_MORTDUE=47251 IMP_NINQ=1.1569852941 IMP_VALUE=58157
IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=202
_dataobs_=402 BAD=0 LOAN=6500 MORTDUE=78741 VALUE=90599 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=29.198860669 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=29.198860669 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78741 IMP_NINQ=1.1569852941 IMP_VALUE=90599 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=211
_dataobs_=416 BAD=0 LOAN=6500 MORTDUE=58689 VALUE=72557 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=94.00805286 NINQ=2 CLNO=18 DEBTINC=34.898413066 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=94.00805286 IMP_CLNO=18 IMP_DEBTINC=34.898413066 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=58689 IMP_NINQ=2 IMP_VALUE=72557 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=220
_dataobs_=433 BAD=0 LOAN=6700 MORTDUE=69773 VALUE=83014 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=263.17343429 NINQ=0 CLNO=5 DEBTINC=37.70699649 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=263.17343429 IMP_CLNO=5 IMP_DEBTINC=37.70699649 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=69773 IMP_NINQ=0 IMP_VALUE=83014 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=228
_dataobs_=435 BAD=0 LOAN=6700 MORTDUE=48430 VALUE=64358 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=108.35174747 NINQ=. CLNO=13 DEBTINC=38.894194746 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=108.35174747 IMP_CLNO=13 IMP_DEBTINC=38.894194746
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=48430 IMP_NINQ=1.1569852941 IMP_VALUE=64358
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=229
_dataobs_=517 BAD=0 LOAN=7100 MORTDUE=64850 VALUE=76985 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=108.21718977 NINQ=0 CLNO=7 DEBTINC=36.337557557 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=108.21718977 IMP_CLNO=7 IMP_DEBTINC=36.337557557 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=64850 IMP_NINQ=0 IMP_VALUE=76985 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=278
_dataobs_=533 BAD=0 LOAN=7200 MORTDUE=22832 VALUE=31666 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=38.003266851 NINQ=9 CLNO=7 DEBTINC=28.295681117 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=38.003266851 IMP_CLNO=7 IMP_DEBTINC=28.295681117 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=22832 IMP_NINQ=9 IMP_VALUE=31666 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=286
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=556 BAD=1 LOAN=7400 MORTDUE=71576 VALUE=89068 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=94.782230694 NINQ=0 CLNO=17 DEBTINC=42.803421995 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=94.782230694 IMP_CLNO=17 IMP_DEBTINC=42.803421995 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=71576 IMP_NINQ=0 IMP_VALUE=89068 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=297
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0115993465 OVLMAX 0.8029620811 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.81446744666013, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.62893489332026, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5035909754, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.210, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.4937017053, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2282107435, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural4");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural4" MODEL "Neural4" MODELDESCRIPTION "Neural Network 
(4)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural6" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural6_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=100 BAD=1 LOAN=4100 MORTDUE=. VALUE=19132 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=100.77465221 NINQ=0 CLNO=19 DEBTINC=33.840919904 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=100.77465221 IMP_CLNO=19 IMP_DEBTINC=33.840919904 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=19132 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=49
_dataobs_=119 BAD=0 LOAN=4500 MORTDUE=. VALUE=49044 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=11.652738796 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=11.652738796 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49044 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=60
_dataobs_=206 BAD=0 LOAN=5100 MORTDUE=66834 VALUE=87361 REASON=HomeImp JOB=Other YOJ=0 DEROG=2
DELINQ=0 CLAGE=290.03410799 NINQ=0 CLNO=6 DEBTINC=38.766985071 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=290.03410799 IMP_CLNO=6 IMP_DEBTINC=38.766985071 IMP_DELINQ=0 IMP_DEROG=2
IMP_MORTDUE=66834 IMP_NINQ=0 IMP_VALUE=87361 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=97
_dataobs_=207 BAD=0 LOAN=5100 MORTDUE=73882 VALUE=96031 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=125.78740011 NINQ=1 CLNO=10 DEBTINC=34.446079222 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=125.78740011 IMP_CLNO=10 IMP_DEBTINC=34.446079222 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73882 IMP_NINQ=1 IMP_VALUE=96031 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=98
_dataobs_=213 BAD=0 LOAN=5200 MORTDUE=19000 VALUE=26000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=17.2 NINQ=10 CLNO=7 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon IMP_CLAGE=17.2
IMP_CLNO=7 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=1 IMP_MORTDUE=19000 IMP_NINQ=10
IMP_VALUE=26000 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=102
_dataobs_=221 BAD=0 LOAN=5300 MORTDUE=. VALUE=49396 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.043670576 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.043670576 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49396 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=109
_dataobs_=273 BAD=0 LOAN=5700 MORTDUE=. VALUE=68591 REASON=HomeImp JOB=Office YOJ=0 DEROG=0
DELINQ=0 CLAGE=69.645660473 NINQ=0 CLNO=4 DEBTINC=41.185039558 IMP_JOB=Office
IMP_REASON=HomeImp IMP_CLAGE=69.645660473 IMP_CLNO=4 IMP_DEBTINC=41.185039558 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=68591 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=128
_dataobs_=279 BAD=1 LOAN=5700 MORTDUE=77213 VALUE=92661 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=97.133170952 NINQ=1 CLNO=16 DEBTINC=41.777888631 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=97.133170952 IMP_CLNO=16 IMP_DEBTINC=41.777888631 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=77213 IMP_NINQ=1 IMP_VALUE=92661 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=131
_dataobs_=284 BAD=0 LOAN=5700 MORTDUE=28116 VALUE=33450 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=15.396587392 NINQ=9 CLNO=7 DEBTINC=30.017013296 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=15.396587392 IMP_CLNO=7 IMP_DEBTINC=30.017013296 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=28116 IMP_NINQ=9 IMP_VALUE=33450 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=133
_dataobs_=320 BAD=0 LOAN=6000 MORTDUE=69876 VALUE=94394.07 REASON=HomeImp JOB=Other YOJ=0
DEROG=0 DELINQ=1 CLAGE=179.56666667 NINQ=0 CLNO=32 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=179.56666667 IMP_CLNO=32 IMP_DEBTINC=33.786945547 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=69876 IMP_NINQ=0 IMP_VALUE=94394.07 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=153
_dataobs_=329 BAD=0 LOAN=6000 MORTDUE=79046 VALUE=103048 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=181.69653802 NINQ=0 CLNO=32 DEBTINC=37.289989924 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=181.69653802 IMP_CLNO=32 IMP_DEBTINC=37.289989924 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=79046 IMP_NINQ=0 IMP_VALUE=103048 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=160
_dataobs_=342 BAD=0 LOAN=6100 MORTDUE=. VALUE=46830 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=1
CLAGE=. NINQ=0 CLNO=0 DEBTINC=13.306013076 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=13.306013076 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46830 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=166
_dataobs_=356 BAD=0 LOAN=6200 MORTDUE=73881 VALUE=98550 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=182.8787798 NINQ=0 CLNO=31 DEBTINC=37.19944569 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=182.8787798 IMP_CLNO=31 IMP_DEBTINC=37.19944569 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73881 IMP_NINQ=0 IMP_VALUE=98550 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=172
_dataobs_=392 BAD=0 LOAN=6400 MORTDUE=44968 VALUE=62747 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=101.39144532 NINQ=. CLNO=12 DEBTINC=36.602947343 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=101.39144532 IMP_CLNO=12 IMP_DEBTINC=36.602947343
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=44968 IMP_NINQ=1.1569852941 IMP_VALUE=62747
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=188
_dataobs_=419 BAD=0 LOAN=6600 MORTDUE=. VALUE=48800 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.219436152 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.219436152 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=48800 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=197
_dataobs_=423 BAD=0 LOAN=6600 MORTDUE=. VALUE=46516 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=14.845990728 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=14.845990728 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46516 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=198
_dataobs_=454 BAD=0 LOAN=6800 MORTDUE=71666 VALUE=99913 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=196.46499893 NINQ=0 CLNO=31 DEBTINC=35.761604731 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=196.46499893 IMP_CLNO=31 IMP_DEBTINC=35.761604731 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=71666 IMP_NINQ=0 IMP_VALUE=99913 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=214
_dataobs_=471 BAD=0 LOAN=7000 MORTDUE=73873 VALUE=111781 REASON=DebtCon JOB=Office YOJ=0
DEROG=0 DELINQ=0 CLAGE=231.79991346 NINQ=0 CLNO=38 DEBTINC=19.273579455 IMP_JOB=Office
IMP_REASON=DebtCon IMP_CLAGE=231.79991346 IMP_CLNO=38 IMP_DEBTINC=19.273579455 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73873 IMP_NINQ=0 IMP_VALUE=111781 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=220
_dataobs_=474 BAD=0 LOAN=7000 MORTDUE=78284 VALUE=98214 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=171.83838617 NINQ=0 CLNO=31 DEBTINC=36.247963031 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=171.83838617 IMP_CLNO=31 IMP_DEBTINC=36.247963031 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=78284 IMP_NINQ=0 IMP_VALUE=98214 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=223
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=516 BAD=0 LOAN=7100 MORTDUE=57863 VALUE=70969 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=65.872044812 NINQ=7 CLNO=21 DEBTINC=26.829490191 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=65.872044812 IMP_CLNO=21 IMP_DEBTINC=26.829490191 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=57863 IMP_NINQ=7 IMP_VALUE=70969 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=239
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
The SAS System

MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0203559988 OVLMAX 0.5300910914 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.71246779464808, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.42493558929616, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.3661012642, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.170, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.3569646941, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.1816833134, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural6" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural6" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural6_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural6_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=93 BAD=0 LOAN=4000 MORTDUE=. VALUE=45760 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp IMP_CLAGE=181.15305208
IMP_CLNO=0 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0
IMP_VALUE=45760 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=48
_dataobs_=204 BAD=1 LOAN=5100 MORTDUE=15500 VALUE=34000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=2 CLAGE=86.233333333 NINQ=2 CLNO=13 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=86.233333333 IMP_CLNO=13 IMP_DEBTINC=33.786945547 IMP_DELINQ=2 IMP_DEROG=1
IMP_MORTDUE=15500 IMP_NINQ=2 IMP_VALUE=34000 IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=108
_dataobs_=208 BAD=0 LOAN=5100 MORTDUE=74071 VALUE=97064 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=121.0759726 NINQ=2 CLNO=9 DEBTINC=36.401729548 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=121.0759726 IMP_CLNO=9 IMP_DEBTINC=36.401729548 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=74071 IMP_NINQ=2 IMP_VALUE=97064 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=110
_dataobs_=217 BAD=1 LOAN=5200 MORTDUE=40564 VALUE=39527 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=157.77103572 NINQ=1 CLNO=13 DEBTINC=72.670433313 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=157.77103572 IMP_CLNO=13 IMP_DEBTINC=72.670433313 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=40564 IMP_NINQ=1 IMP_VALUE=39527 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=112
_dataobs_=224 BAD=0 LOAN=5300 MORTDUE=75958 VALUE=91703 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=124.1821788 NINQ=1 CLNO=10 DEBTINC=34.599060194 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=124.1821788 IMP_CLNO=10 IMP_DEBTINC=34.599060194 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=75958 IMP_NINQ=1 IMP_VALUE=91703 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=114
_dataobs_=227 BAD=0 LOAN=5300 MORTDUE=83552 VALUE=96809 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.423961906 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.423961906 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=83552 IMP_NINQ=1.1569852941 IMP_VALUE=96809 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=116
_dataobs_=274 BAD=0 LOAN=5700 MORTDUE=26927 VALUE=35461 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=21.799352154 NINQ=10 CLNO=6 DEBTINC=29.439664242 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=21.799352154 IMP_CLNO=6 IMP_DEBTINC=29.439664242 IMP_DELINQ=0
IMP_DEROG=1 IMP_MORTDUE=26927 IMP_NINQ=10 IMP_VALUE=35461 IMP_YOJ=0 INDELINQ=0 INDEROG=1
LOG_yoj=. _ERROR_=1 _N_=146
_dataobs_=283 BAD=1 LOAN=5700 MORTDUE=74172 VALUE=79846 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=0 DELINQ=0 CLAGE=157.00977472 NINQ=0 CLNO=28 DEBTINC=47.415228659 IMP_JOB=ProfExe
IMP_REASON=DebtCon IMP_CLAGE=157.00977472 IMP_CLNO=28 IMP_DEBTINC=47.415228659 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=74172 IMP_NINQ=0 IMP_VALUE=79846 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=151
_dataobs_=330 BAD=0 LOAN=6000 MORTDUE=. VALUE=53190 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=15.174415003 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=15.174415003 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=53190 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=170
_dataobs_=343 BAD=0 LOAN=6100 MORTDUE=78753 VALUE=95433 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.925117417 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.925117417 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78753 IMP_NINQ=1.1569852941 IMP_VALUE=95433 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=177
_dataobs_=344 BAD=0 LOAN=6100 MORTDUE=77265 VALUE=97944 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.876463055 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.876463055 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=77265 IMP_NINQ=1.1569852941 IMP_VALUE=97944 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=178
_dataobs_=358 BAD=0 LOAN=6200 MORTDUE=75121 VALUE=96462 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=27.167655962 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=27.167655962 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=75121 IMP_NINQ=1.1569852941 IMP_VALUE=96462 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=186
_dataobs_=382 BAD=0 LOAN=6400 MORTDUE=47251 VALUE=58157 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=. CLAGE=104.79246836 NINQ=. CLNO=13 DEBTINC=36.416886965 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=104.79246836 IMP_CLNO=13 IMP_DEBTINC=36.416886965
IMP_DELINQ=0.4622255303 IMP_DEROG=0 IMP_MORTDUE=47251 IMP_NINQ=1.1569852941 IMP_VALUE=58157
IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=202
_dataobs_=402 BAD=0 LOAN=6500 MORTDUE=78741 VALUE=90599 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=29.198860669 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=29.198860669 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78741 IMP_NINQ=1.1569852941 IMP_VALUE=90599 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=211
_dataobs_=416 BAD=0 LOAN=6500 MORTDUE=58689 VALUE=72557 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=94.00805286 NINQ=2 CLNO=18 DEBTINC=34.898413066 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=94.00805286 IMP_CLNO=18 IMP_DEBTINC=34.898413066 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=58689 IMP_NINQ=2 IMP_VALUE=72557 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=220
_dataobs_=433 BAD=0 LOAN=6700 MORTDUE=69773 VALUE=83014 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=263.17343429 NINQ=0 CLNO=5 DEBTINC=37.70699649 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=263.17343429 IMP_CLNO=5 IMP_DEBTINC=37.70699649 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=69773 IMP_NINQ=0 IMP_VALUE=83014 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=228
_dataobs_=435 BAD=0 LOAN=6700 MORTDUE=48430 VALUE=64358 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=108.35174747 NINQ=. CLNO=13 DEBTINC=38.894194746 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=108.35174747 IMP_CLNO=13 IMP_DEBTINC=38.894194746
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=48430 IMP_NINQ=1.1569852941 IMP_VALUE=64358
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=229
_dataobs_=517 BAD=0 LOAN=7100 MORTDUE=64850 VALUE=76985 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=108.21718977 NINQ=0 CLNO=7 DEBTINC=36.337557557 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=108.21718977 IMP_CLNO=7 IMP_DEBTINC=36.337557557 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=64850 IMP_NINQ=0 IMP_VALUE=76985 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=278
_dataobs_=533 BAD=0 LOAN=7200 MORTDUE=22832 VALUE=31666 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=38.003266851 NINQ=9 CLNO=7 DEBTINC=28.295681117 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=38.003266851 IMP_CLNO=7 IMP_DEBTINC=28.295681117 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=22832 IMP_NINQ=9 IMP_VALUE=31666 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=286
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=556 BAD=1 LOAN=7400 MORTDUE=71576 VALUE=89068 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=94.782230694 NINQ=0 CLNO=17 DEBTINC=42.803421995 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=94.782230694 IMP_CLNO=17 IMP_DEBTINC=42.803421995 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=71576 IMP_NINQ=0 IMP_VALUE=89068 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=297
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0203559988 OVLMAX 0.5300910914 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.67917015926236, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.35834031852472, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.3161854515, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.230, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.2912599751, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2209356044, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural6");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural6" MODEL "Neural6" MODELDESCRIPTION "Neural Network 
(6)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMINDEX WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural5" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural5_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=100 BAD=1 LOAN=4100 MORTDUE=. VALUE=19132 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=100.77465221 NINQ=0 CLNO=19 DEBTINC=33.840919904 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=100.77465221 IMP_CLNO=19 IMP_DEBTINC=33.840919904 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=19132 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=49
_dataobs_=119 BAD=0 LOAN=4500 MORTDUE=. VALUE=49044 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=11.652738796 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=11.652738796 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49044 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=60
_dataobs_=206 BAD=0 LOAN=5100 MORTDUE=66834 VALUE=87361 REASON=HomeImp JOB=Other YOJ=0 DEROG=2
DELINQ=0 CLAGE=290.03410799 NINQ=0 CLNO=6 DEBTINC=38.766985071 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=290.03410799 IMP_CLNO=6 IMP_DEBTINC=38.766985071 IMP_DELINQ=0 IMP_DEROG=2
IMP_MORTDUE=66834 IMP_NINQ=0 IMP_VALUE=87361 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=97
_dataobs_=207 BAD=0 LOAN=5100 MORTDUE=73882 VALUE=96031 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=125.78740011 NINQ=1 CLNO=10 DEBTINC=34.446079222 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=125.78740011 IMP_CLNO=10 IMP_DEBTINC=34.446079222 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73882 IMP_NINQ=1 IMP_VALUE=96031 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=98
_dataobs_=213 BAD=0 LOAN=5200 MORTDUE=19000 VALUE=26000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=17.2 NINQ=10 CLNO=7 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon IMP_CLAGE=17.2
IMP_CLNO=7 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=1 IMP_MORTDUE=19000 IMP_NINQ=10
IMP_VALUE=26000 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=102
_dataobs_=221 BAD=0 LOAN=5300 MORTDUE=. VALUE=49396 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.043670576 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.043670576 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=49396 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=109
_dataobs_=273 BAD=0 LOAN=5700 MORTDUE=. VALUE=68591 REASON=HomeImp JOB=Office YOJ=0 DEROG=0
DELINQ=0 CLAGE=69.645660473 NINQ=0 CLNO=4 DEBTINC=41.185039558 IMP_JOB=Office
IMP_REASON=HomeImp IMP_CLAGE=69.645660473 IMP_CLNO=4 IMP_DEBTINC=41.185039558 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=68591 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=128
_dataobs_=279 BAD=1 LOAN=5700 MORTDUE=77213 VALUE=92661 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=97.133170952 NINQ=1 CLNO=16 DEBTINC=41.777888631 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=97.133170952 IMP_CLNO=16 IMP_DEBTINC=41.777888631 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=77213 IMP_NINQ=1 IMP_VALUE=92661 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=131
_dataobs_=284 BAD=0 LOAN=5700 MORTDUE=28116 VALUE=33450 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=15.396587392 NINQ=9 CLNO=7 DEBTINC=30.017013296 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=15.396587392 IMP_CLNO=7 IMP_DEBTINC=30.017013296 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=28116 IMP_NINQ=9 IMP_VALUE=33450 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=133
_dataobs_=320 BAD=0 LOAN=6000 MORTDUE=69876 VALUE=94394.07 REASON=HomeImp JOB=Other YOJ=0
DEROG=0 DELINQ=1 CLAGE=179.56666667 NINQ=0 CLNO=32 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=179.56666667 IMP_CLNO=32 IMP_DEBTINC=33.786945547 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=69876 IMP_NINQ=0 IMP_VALUE=94394.07 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=153
_dataobs_=329 BAD=0 LOAN=6000 MORTDUE=79046 VALUE=103048 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=181.69653802 NINQ=0 CLNO=32 DEBTINC=37.289989924 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=181.69653802 IMP_CLNO=32 IMP_DEBTINC=37.289989924 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=79046 IMP_NINQ=0 IMP_VALUE=103048 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=160
_dataobs_=342 BAD=0 LOAN=6100 MORTDUE=. VALUE=46830 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=1
CLAGE=. NINQ=0 CLNO=0 DEBTINC=13.306013076 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=13.306013076 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46830 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=166
_dataobs_=356 BAD=0 LOAN=6200 MORTDUE=73881 VALUE=98550 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=182.8787798 NINQ=0 CLNO=31 DEBTINC=37.19944569 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=182.8787798 IMP_CLNO=31 IMP_DEBTINC=37.19944569 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=73881 IMP_NINQ=0 IMP_VALUE=98550 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=172
_dataobs_=392 BAD=0 LOAN=6400 MORTDUE=44968 VALUE=62747 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=101.39144532 NINQ=. CLNO=12 DEBTINC=36.602947343 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=101.39144532 IMP_CLNO=12 IMP_DEBTINC=36.602947343
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=44968 IMP_NINQ=1.1569852941 IMP_VALUE=62747
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=188
_dataobs_=419 BAD=0 LOAN=6600 MORTDUE=. VALUE=48800 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=12.219436152 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=12.219436152 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=48800 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=197
_dataobs_=423 BAD=0 LOAN=6600 MORTDUE=. VALUE=46516 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=14.845990728 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=14.845990728 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=46516 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=198
_dataobs_=454 BAD=0 LOAN=6800 MORTDUE=71666 VALUE=99913 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=196.46499893 NINQ=0 CLNO=31 DEBTINC=35.761604731 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=196.46499893 IMP_CLNO=31 IMP_DEBTINC=35.761604731 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=71666 IMP_NINQ=0 IMP_VALUE=99913 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=214
_dataobs_=471 BAD=0 LOAN=7000 MORTDUE=73873 VALUE=111781 REASON=DebtCon JOB=Office YOJ=0
DEROG=0 DELINQ=0 CLAGE=231.79991346 NINQ=0 CLNO=38 DEBTINC=19.273579455 IMP_JOB=Office
IMP_REASON=DebtCon IMP_CLAGE=231.79991346 IMP_CLNO=38 IMP_DEBTINC=19.273579455 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=73873 IMP_NINQ=0 IMP_VALUE=111781 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=220
_dataobs_=474 BAD=0 LOAN=7000 MORTDUE=78284 VALUE=98214 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=171.83838617 NINQ=0 CLNO=31 DEBTINC=36.247963031 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=171.83838617 IMP_CLNO=31 IMP_DEBTINC=36.247963031 IMP_DELINQ=1
IMP_DEROG=0 IMP_MORTDUE=78284 IMP_NINQ=0 IMP_VALUE=98214 IMP_YOJ=0 INDELINQ=1 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=223
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=516 BAD=0 LOAN=7100 MORTDUE=57863 VALUE=70969 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=65.872044812 NINQ=7 CLNO=21 DEBTINC=26.829490191 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=65.872044812 IMP_CLNO=21 IMP_DEBTINC=26.829490191 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=57863 IMP_NINQ=7 IMP_VALUE=70969 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=239
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0040863817 OVLMAX 0.8593571327 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.84039556995531, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.68079113991062, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5261609809, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.210, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.5225109875, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.216558116, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural5" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural5" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural5_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
_dataobs_=93 BAD=0 LOAN=4000 MORTDUE=. VALUE=45760 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=. IMP_JOB=Other IMP_REASON=HomeImp IMP_CLAGE=181.15305208
IMP_CLNO=0 IMP_DEBTINC=33.786945547 IMP_DELINQ=0 IMP_DEROG=0 IMP_MORTDUE=73574.90271 IMP_NINQ=0
IMP_VALUE=45760 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=48
_dataobs_=204 BAD=1 LOAN=5100 MORTDUE=15500 VALUE=34000 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=2 CLAGE=86.233333333 NINQ=2 CLNO=13 DEBTINC=. IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=86.233333333 IMP_CLNO=13 IMP_DEBTINC=33.786945547 IMP_DELINQ=2 IMP_DEROG=1
IMP_MORTDUE=15500 IMP_NINQ=2 IMP_VALUE=34000 IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=108
_dataobs_=208 BAD=0 LOAN=5100 MORTDUE=74071 VALUE=97064 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=121.0759726 NINQ=2 CLNO=9 DEBTINC=36.401729548 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=121.0759726 IMP_CLNO=9 IMP_DEBTINC=36.401729548 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=74071 IMP_NINQ=2 IMP_VALUE=97064 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=110
_dataobs_=217 BAD=1 LOAN=5200 MORTDUE=40564 VALUE=39527 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=157.77103572 NINQ=1 CLNO=13 DEBTINC=72.670433313 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=157.77103572 IMP_CLNO=13 IMP_DEBTINC=72.670433313 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=40564 IMP_NINQ=1 IMP_VALUE=39527 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=112
_dataobs_=224 BAD=0 LOAN=5300 MORTDUE=75958 VALUE=91703 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=124.1821788 NINQ=1 CLNO=10 DEBTINC=34.599060194 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=124.1821788 IMP_CLNO=10 IMP_DEBTINC=34.599060194 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=75958 IMP_NINQ=1 IMP_VALUE=91703 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=114
_dataobs_=227 BAD=0 LOAN=5300 MORTDUE=83552 VALUE=96809 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.423961906 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.423961906 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=83552 IMP_NINQ=1.1569852941 IMP_VALUE=96809 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=116
_dataobs_=274 BAD=0 LOAN=5700 MORTDUE=26927 VALUE=35461 REASON=DebtCon JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=21.799352154 NINQ=10 CLNO=6 DEBTINC=29.439664242 IMP_JOB=Other
IMP_REASON=DebtCon IMP_CLAGE=21.799352154 IMP_CLNO=6 IMP_DEBTINC=29.439664242 IMP_DELINQ=0
IMP_DEROG=1 IMP_MORTDUE=26927 IMP_NINQ=10 IMP_VALUE=35461 IMP_YOJ=0 INDELINQ=0 INDEROG=1
LOG_yoj=. _ERROR_=1 _N_=146
_dataobs_=283 BAD=1 LOAN=5700 MORTDUE=74172 VALUE=79846 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=0 DELINQ=0 CLAGE=157.00977472 NINQ=0 CLNO=28 DEBTINC=47.415228659 IMP_JOB=ProfExe
IMP_REASON=DebtCon IMP_CLAGE=157.00977472 IMP_CLNO=28 IMP_DEBTINC=47.415228659 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=74172 IMP_NINQ=0 IMP_VALUE=79846 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=151
_dataobs_=330 BAD=0 LOAN=6000 MORTDUE=. VALUE=53190 REASON=HomeImp JOB=  YOJ=0 DEROG=0 DELINQ=0
CLAGE=. NINQ=0 CLNO=0 DEBTINC=15.174415003 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=181.15305208 IMP_CLNO=0 IMP_DEBTINC=15.174415003 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=73574.90271 IMP_NINQ=0 IMP_VALUE=53190 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=.
_ERROR_=1 _N_=170
_dataobs_=343 BAD=0 LOAN=6100 MORTDUE=78753 VALUE=95433 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.925117417 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.925117417 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78753 IMP_NINQ=1.1569852941 IMP_VALUE=95433 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=177
_dataobs_=344 BAD=0 LOAN=6100 MORTDUE=77265 VALUE=97944 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=28.876463055 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=28.876463055 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=77265 IMP_NINQ=1.1569852941 IMP_VALUE=97944 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=178
_dataobs_=358 BAD=0 LOAN=6200 MORTDUE=75121 VALUE=96462 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=27.167655962 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=27.167655962 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=75121 IMP_NINQ=1.1569852941 IMP_VALUE=96462 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=186
_dataobs_=382 BAD=0 LOAN=6400 MORTDUE=47251 VALUE=58157 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=. CLAGE=104.79246836 NINQ=. CLNO=13 DEBTINC=36.416886965 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=104.79246836 IMP_CLNO=13 IMP_DEBTINC=36.416886965
IMP_DELINQ=0.4622255303 IMP_DEROG=0 IMP_MORTDUE=47251 IMP_NINQ=1.1569852941 IMP_VALUE=58157
IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1 _N_=202
_dataobs_=402 BAD=0 LOAN=6500 MORTDUE=78741 VALUE=90599 REASON=DebtCon JOB=ProfExe YOJ=0
DEROG=. DELINQ=. CLAGE=. NINQ=. CLNO=. DEBTINC=29.198860669 IMP_JOB=ProfExe IMP_REASON=DebtCon
IMP_CLAGE=181.15305208 IMP_CLNO=21.277078966 IMP_DEBTINC=29.198860669 IMP_DELINQ=0.4622255303
IMP_DEROG=0.2409592691 IMP_MORTDUE=78741 IMP_NINQ=1.1569852941 IMP_VALUE=90599 IMP_YOJ=0
INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=211
_dataobs_=416 BAD=0 LOAN=6500 MORTDUE=58689 VALUE=72557 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=1 CLAGE=94.00805286 NINQ=2 CLNO=18 DEBTINC=34.898413066 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=94.00805286 IMP_CLNO=18 IMP_DEBTINC=34.898413066 IMP_DELINQ=1 IMP_DEROG=0
IMP_MORTDUE=58689 IMP_NINQ=2 IMP_VALUE=72557 IMP_YOJ=0 INDELINQ=1 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=220
_dataobs_=433 BAD=0 LOAN=6700 MORTDUE=69773 VALUE=83014 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=0 CLAGE=263.17343429 NINQ=0 CLNO=5 DEBTINC=37.70699649 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=263.17343429 IMP_CLNO=5 IMP_DEBTINC=37.70699649 IMP_DELINQ=0 IMP_DEROG=1
IMP_MORTDUE=69773 IMP_NINQ=0 IMP_VALUE=83014 IMP_YOJ=0 INDELINQ=0 INDEROG=1 LOG_yoj=. _ERROR_=1
_N_=228
_dataobs_=435 BAD=0 LOAN=6700 MORTDUE=48430 VALUE=64358 REASON=HomeImp JOB=Other YOJ=0 DEROG=1
DELINQ=. CLAGE=108.35174747 NINQ=. CLNO=13 DEBTINC=38.894194746 IMP_JOB=Other
IMP_REASON=HomeImp IMP_CLAGE=108.35174747 IMP_CLNO=13 IMP_DEBTINC=38.894194746
IMP_DELINQ=0.4622255303 IMP_DEROG=1 IMP_MORTDUE=48430 IMP_NINQ=1.1569852941 IMP_VALUE=64358
IMP_YOJ=0 INDELINQ=1 INDEROG=1 LOG_yoj=. _ERROR_=1 _N_=229
_dataobs_=517 BAD=0 LOAN=7100 MORTDUE=64850 VALUE=76985 REASON=HomeImp JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=108.21718977 NINQ=0 CLNO=7 DEBTINC=36.337557557 IMP_JOB=Other IMP_REASON=HomeImp
IMP_CLAGE=108.21718977 IMP_CLNO=7 IMP_DEBTINC=36.337557557 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=64850 IMP_NINQ=0 IMP_VALUE=76985 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=278
_dataobs_=533 BAD=0 LOAN=7200 MORTDUE=22832 VALUE=31666 REASON=DebtCon JOB=Other YOJ=0 DEROG=0
DELINQ=0 CLAGE=38.003266851 NINQ=9 CLNO=7 DEBTINC=28.295681117 IMP_JOB=Other IMP_REASON=DebtCon
IMP_CLAGE=38.003266851 IMP_CLNO=7 IMP_DEBTINC=28.295681117 IMP_DELINQ=0 IMP_DEROG=0
IMP_MORTDUE=22832 IMP_NINQ=9 IMP_VALUE=31666 IMP_YOJ=0 INDELINQ=0 INDEROG=0 LOG_yoj=. _ERROR_=1
_N_=286
WARNING: Limit set by ERRORS= option reached.  Further errors of this type will not be printed.
_dataobs_=556 BAD=1 LOAN=7400 MORTDUE=71576 VALUE=89068 REASON=DebtCon JOB=Sales YOJ=0 DEROG=0
DELINQ=0 CLAGE=94.782230694 NINQ=0 CLNO=17 DEBTINC=42.803421995 IMP_JOB=Sales
IMP_REASON=DebtCon IMP_CLAGE=94.782230694 IMP_CLNO=17 IMP_DEBTINC=42.803421995 IMP_DELINQ=0
IMP_DEROG=0 IMP_MORTDUE=71576 IMP_NINQ=0 IMP_VALUE=89068 IMP_YOJ=0 INDELINQ=0 INDEROG=0
LOG_yoj=. _ERROR_=1 _N_=297
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0040863817 OVLMAX 0.8593571327 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.81751040734818, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.63502081469636, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5073376207, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.220, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.5057754619, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2253523974, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural5");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural5" MODEL "Neural5" MODELDESCRIPTION "Neural Network 
(5)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMINDEX WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural3" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural3_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0006848512 OVLMAX 0.9990014549 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.86795629248459, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.73591258496918, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5908074455, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.210, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.5861317578, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2399223558, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural3" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural3" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural3_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural3_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0023076394 OVLMAX 0.9972669086 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.84846020554072, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.69692041108144, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.5538378637, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.230, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.5529996408, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.2541192072, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural3");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural3" MODEL "Neural3" MODELDESCRIPTION "Neural Network 
(3)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMINDEX WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural2_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0109596739 OVLMAX 0.9823745644 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.79484432021119, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.58968864042238, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.4298773903, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.240, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.4272028461, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.3077878596, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural2" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural2_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0138124994 OVLMAX 0.9772355958 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.773665358851, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.547330717702, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.376783337, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.290, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.3755260025, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.331463852, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural2");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural2" MODEL "Neural2" MODELDESCRIPTION "Neural Network 
(2)" TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMINDEX WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL SETMETADATA >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural_TRAIN;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1993957704 _NEVENTS 
594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0017177214 OVLMAX 0.9999956972 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2979;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2979;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2979;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2979;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2979;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2979 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.91130734317317, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.82261468634634, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.687719967, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.240, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.6849628359, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.1981114088, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGET "BAD" TARGETLABEL "" DATAROLE "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _KS_=KS;
MPRINT(EM_DIAGRAM):   label _AUR_ = "Train: Roc Index" _Gini_ = "Train: Gini Coefficient" KS = 
"Train: Kolmogorov-Smirnov Statistic" _KS_BIN_ = "Train: Bin-Based Two-Way Kolmogorov-Smirnov 
Statistic" _KS_PROB_CUTOFF = "Train: Kolmogorov-Smirnov Probability Cutoff" 
BINNED_KS_PROB_CUTOFF= "Train: Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural" and DATAROLE="TRAIN";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSTRAIN', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK end=eof;
MPRINT(EM_DIAGRAM):   where MODEL="Neural" and DATAROLE="VALIDATE";
MPRINT(EM_DIAGRAM):   if eof then call symput('ASSESSVALID', '0');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', event);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EMWS1.Neural_VALIDATE;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN 
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = 
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;

MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;

MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;

MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1                               ") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;

MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1                               " NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing 
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = 
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;

MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP (KEEP = SENSITIVITY SPECIFICITY EVENTVALUE 
ONEMINUSSPECIFICITY _FALPOS_ _FALNEG_ _POS_ _NEG_ FIRSTINGROUP LASTINGROUP LOWPOSTERIOR 
UPPOSTERIOR ) ;

MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;

MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;

MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0 
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 - 
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.1995974505 _NEVENTS 
595 _NNONEVENTS 2386 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;

MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2981));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_BAD1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1                               " ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0018839421 OVLMAX 0.9999936795 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;

MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2981 * 
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / 
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2981)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS)) 
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2981 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF CEIL (OVLMIN * 100) <= _K <= FLOOR (OVLMAX * 100) THEN DO;
MPRINT(EM_ASSESS):   PROBABILITY = _K / 100;
MPRINT(EM_ASSESS):   _POS_ = TRUEPOSX ( _K);
MPRINT(EM_ASSESS):   SENSITIVITY = _POS_ / _NEVENTS;
MPRINT(EM_ASSESS):   _NEG_ = TRUENEGX ( _K);
MPRINT(EM_ASSESS):   _FALPOS_ = FALSEPOSX ( _K);
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = _FALPOS_ / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   SPECIFICITY = 1 - ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   _FALNEG_ = FALSENEGX ( _K);
MPRINT(EM_ASSESS):   FALSENEG = _FALNEG_ / _NEVENTS;
MPRINT(EM_ASSESS):   OVL_ACCURACY = (_NEG_ + _POS_) / 2981;
MPRINT(EM_ASSESS):   Y0P0 = _NEG_ / 2981;
MPRINT(EM_ASSESS):   Y1P1 = _POS_ / 2981;
MPRINT(EM_ASSESS):   Y0P1 = _FALPOS_ / 2981;
MPRINT(EM_ASSESS):   Y1P0 = _FALNEG_ / 2981;
MPRINT(EM_ASSESS):   PROB = _K / 100;
MPRINT(EM_ASSESS):   IF _POS_ > 0 THEN POSPREC = _POS_ / (_POS_ + ONEMINUSSPECIFICITY * 
_NNONEVENTS);
MPRINT(EM_ASSESS):   ELSE POSPREC = .;
MPRINT(EM_ASSESS):   IF _NEG_ > 0 THEN NEGPREC = _NEG_ / (_NEG_ + FALSENEG * _NEVENTS);
MPRINT(EM_ASSESS):   ELSE NEGPREC = .;
MPRINT(EM_ASSESS):   _DIFFERENCE = ABS (SUM ( FALSENEG, - SPECIFICITY ));
MPRINT(EM_ASSESS):   IF FALSENEG > . AND SPECIFICITY > . AND KS_ABSDIFF < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   KSPROB = PROB;
MPRINT(EM_ASSESS):   KS_ABSDIFF = _DIFFERENCE;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   PERCENT1 = _EVENTS (_K) / _NEVENTS;
MPRINT(EM_ASSESS):   PERCENT0 = NONEVENTS (_K) / (2981 - _NEVENTS);
MPRINT(EM_ASSESS):   IF POSPREC > . AND SENSITIVITY > . AND MINPRECTPR > ABS (POSPREC - 
SENSITIVITY) THEN DO;
MPRINT(EM_ASSESS):   PRECTPR = PROB;
MPRINT(EM_ASSESS):   MINPRECTPR = ABS (POSPREC - SENSITIVITY);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   DO KK = 20 TO 1 BY -1;
MPRINT(EM_ASSESS):   IF MINPROBS ( KK) <= PROB <= MAXPROBS ( KK) THEN DO;
MPRINT(EM_ASSESS):   DECILE = KK;
MPRINT(EM_ASSESS):   KK = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   FIRSTINGROUP = FIRSTIN (_K);
MPRINT(EM_ASSESS):   LASTINGROUP = LASTIN (_K);
MPRINT(EM_ASSESS):   IF FIRSTINGROUP > . THEN DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = ROUND (FIRSTINGROUP, .001);
MPRINT(EM_ASSESS):   UPPOSTERIOR = LOWPOSTERIOR + .0099;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = . ;
MPRINT(EM_ASSESS):   UPPOSTERIOR = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;

MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Just adding extremes;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   IF 0 THEN SET WORK.MdlComp_ROCTEMP NOBS = NOBS;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NOBS", NOBS);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   SET WORK.MdlComp_ROCTEMP END = EOF;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   _POS_ = .;
MPRINT(EM_ASSESS):   _FALPOS_ = .;
MPRINT(EM_ASSESS):   _NEG_ = .;
MPRINT(EM_ASSESS):   _FALNEG_ = .;
MPRINT(EM_ASSESS):   EVENTVALUE = "1                               " ;
MPRINT(EM_ASSESS):   FIRSTINGROUP = .;
MPRINT(EM_ASSESS):   LASTINGROUP = 1;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 1;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 1;
MPRINT(EM_ASSESS):   SENSITIVITY = 0;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 0;
MPRINT(EM_ASSESS):   SPECIFICITY = 1;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LOWPOSTERIOR = 0;
MPRINT(EM_ASSESS):   UPPOSTERIOR = 0;
MPRINT(EM_ASSESS):   LASTINGROUP = 0;
MPRINT(EM_ASSESS):   SENSITIVITY = 1;
MPRINT(EM_ASSESS):   ONEMINUSSPECIFICITY = 1;
MPRINT(EM_ASSESS):   SPECIFICITY = 0;
MPRINT(EM_ASSESS):   OUTPUT WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RENAME LASTINGROUP = CUTOFF EVENTVALUE = EVENT ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Run for data outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY SENSITIVITY ONEMINUSSPECIFICITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..................................... OUTROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   LABEL EVENT = "Event" ONEMINUSSPECIFICITY = "1 - Specificity" SENSITIVITY 
= "Sensitivity" _POS_ = "True Positive Count" _NEG_ = "True Negative Count" _FALPOS_ = "False 
Positive Count" _FALNEG_ = "False Negative Count" CUTOFF = "Last in Group" LOWPOSTERIOR = 
"Lower Bound Probability" UPPOSTERIOR = "Upper Bound Probability" SPECIFICITY = "Specificity" 
FIRSTINGROUP = "First in Group" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = WORK.MdlComp_ROCTEMP;
MPRINT(EM_ASSESS):   BY ONEMINUSSPECIFICITY SENSITIVITY;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....................... Analyzing outfit data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK.MdlComp_STATTEMP;
MPRINT(EM_ASSESS):   _AUR_ = INPUT ( PUT (0.87292152401614, 5.3), 5.3);
MPRINT(EM_ASSESS):   _GINI_ = INPUT ( PUT (0.74584304803228, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_ = INPUT ( PUT (0.6545640888, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_PROB_CUTOFF = INPUT ( PUT (0.220, 5.3), 5.3);
MPRINT(EM_ASSESS):   _KS_BIN_ = INPUT ( PUT (0.6495896934, 5.3), 5.3);
MPRINT(EM_ASSESS):   BINNED_KS_PROB_CUTOFF = INPUT ( PUT (0.228139385, 5.3), 5.3);
MPRINT(EM_ASSESS):   LABEL _AUR_ = "Area Under ROC" ;
MPRINT(EM_ASSESS):   LABEL _GINI_ = "Gini Coefficient" ;
MPRINT(EM_ASSESS):   LABEL _KS_ = _KS_ = "Two-Sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL _KS_PROB_CUTOFF = " Kolmogorov-Smirnov Stat Prob Cut-off";
MPRINT(EM_ASSESS):   LABEL _KS_BIN_ = "Bin-Based Two-sample Kolmogorov-Smirnov Statistic" ;
MPRINT(EM_ASSESS):   LABEL BINNED_KS_PROB_CUTOFF = " Binned Kolmogorov-Smirnov Stat Prob 
Cut-off";
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 DATAROLE $8 TARGET $32 
TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" DATAROLE = "Data Role" TARGET = "Target Variable" TARGETLABEL = "Target 
Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGET "BAD" TARGETLABEL "" DATAROLE "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC WORK.MdlComp_ROCTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   retain TARGET "BAD" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   modify MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   rename _AUR_=_VAUR_ _GINI_=_VGINI_ _KS_=VKS _KS_BIN_=_VKS_BIN_ 
_KS_PROB_CUTOFF=_VKS_PROB_CUTOFF_ BINNED_KS_PROB_CUTOFF=_VBINNED_KS_PROB_CUTOFF_;
MPRINT(EM_DIAGRAM):   label _VAUR_ = "Valid: Roc Index" _VGini_ = "Valid: Gini Coefficient" 
VKS = "Valid: Kolmogorov-Smirnov Statistic" _VKS_BIN_ = "Valid: Bin-Based Two-Way 
Kolmogorov-Smirnov Statistic" _VKS_PROB_CUTOFF_ = "Valid: Kolmogorov-Smirnov Probability 
Cutoff" _VBINNED_KS_PROB_CUTOFF_= "Valid: Bin-Based Two-Way Kolmogorov-Smirnov Probability 
Cutoff";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   if _N_ =1 then set WORK.MdlComp_STATTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.em_nodeid;
MPRINT(EM_DIAGRAM):   where upcase(NODEID) = upcase("Neural");
MPRINT(EM_DIAGRAM):   call symput('_MODELDESC', strip(tranwrd(LABEL, '"', '""')));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200;
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" MODELDESCRIPTION 
= "Model Description" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   retain PARENT "Neural" MODEL "Neural" MODELDESCRIPTION "Neural Network" 
TARGET "" TARGETLABEL "";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMINDEX WORK.MdlCompINDEXTEMP;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMROC;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMROC end=lastobs;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if lastobs then do;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="Baseline";
MPRINT(EM_DIAGRAM):   DATAROLE ='TRAIN';
MPRINT(EM_DIAGRAM):   sensitivity = 0;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 0;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="Baseline";
MPRINT(EM_DIAGRAM):   DATAROLE ='TRAIN';
MPRINT(EM_DIAGRAM):   sensitivity = 1;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="Baseline";
MPRINT(EM_DIAGRAM):   DATAROLE='VALIDATE';
MPRINT(EM_DIAGRAM):   sensitivity = 0;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 0;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   MODEL=' _Baseline_ ';
MPRINT(EM_DIAGRAM):   MODELDESCRIPTION="Baseline";
MPRINT(EM_DIAGRAM):   DATAROLE='VALIDATE';
MPRINT(EM_DIAGRAM):   sensitivity = 1;
MPRINT(EM_DIAGRAM):   oneminusspecificity = 1;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
70974      proc sort data=EMWS1.MdlComp_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp_EMOUTFIT NOTHREADS;
70975      by model target;
MPRINT(EM_DIAGRAM):   by model target;
70976      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70977      proc sort data=EMWS1.MdlComp_EMINDEX NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp_EMINDEX NOTHREADS;
70978      by model target;
MPRINT(EM_DIAGRAM):   by model target;
70979      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMINDEX.
NOTE: The data set EMWS1.MDLCOMP_EMINDEX has 6 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70980      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMOUTFIT;
70981      merge EMWS1.MdlComp_EMOUTFIT EMWS1.MdlComp_EMINDEX;
MPRINT(EM_DIAGRAM):   merge EMWS1.MdlComp_EMOUTFIT EMWS1.MdlComp_EMINDEX;
70982      label TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
70983      by model target;
MPRINT(EM_DIAGRAM):   by model target;
70984      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMINDEX.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 51 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

70985      proc sort data=EMWS1.MdlComp_EMRANK(keep=DATAROLE DECILE MODEL GAIN LIFT LIFTC RESP
70985    ! RESPC CAP CAPC) out=_temp;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp_EMRANK(keep=DATAROLE DECILE MODEL GAIN 
LIFT LIFTC RESP RESPC CAP CAPC) out=_temp;
70986      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
70987      where DECILE=10;
MPRINT(EM_DIAGRAM):   where DECILE=10;
70988      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE DECILE=10;
NOTE: The data set WORK._TEMP has 12 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

70989      data _temp;
MPRINT(EM_DIAGRAM):   data _temp;
70990      retain _GAIN_ _VGAIN_ _LIFT_ _LIFTC_ _VLIFT_ _VLIFTC_ _RESP_ _RESPC_ _VRESP_
70990    ! _VRESPC_ _CAP_ _CAPC_ _VCAP_ _VCAPC_ .;
MPRINT(EM_DIAGRAM):   retain _GAIN_ _VGAIN_ _LIFT_ _LIFTC_ _VLIFT_ _VLIFTC_ _RESP_ _RESPC_ 
_VRESP_ _VRESPC_ _CAP_ _CAPC_ _VCAP_ _VCAPC_ .;
70991      label _GAIN_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_traingain_vlabel, NOQUOTE))"
70991    ! _VGAIN_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_validgain_vlabel, NOQUOTE))" _LIFT_ =
70991    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainlift_vlabel, NOQUOTE))" _VLIFT_ =
70992         "%sysfunc(sasmsg(sashelp.dmine, rpt_validlift_vlabel, NOQUOTE))" _RESP_ =
70992    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainresp_vlabel, NOQUOTE))" _VRESP_ =
70992    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validresp_vlabel, NOQUOTE))" _CAP_ =
70993         "%sysfunc(sasmsg(sashelp.dmine, rpt_traincap_vlabel,  NOQUOTE))" _VCAP_ =
70993    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validcap_vlabel,  NOQUOTE))" _LIFTC_ =
70993    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainliftc_vlabel, NOQUOTE))" _VLIFTC_ =
70994         "%sysfunc(sasmsg(sashelp.dmine, rpt_validliftc_vlabel, NOQUOTE))" _RESPC_ =
70994    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trainrespc_vlabel, NOQUOTE))" _VRESPC_ =
70994    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validrespc_vlabel, NOQUOTE))" _CAPC_ =
70995         "%sysfunc(sasmsg(sashelp.dmine, rpt_traincapc_vlabel,  NOQUOTE))" _VCAPC_ =
70995    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_validcapc_vlabel,  NOQUOTE))" _TGAIN_ =
70995    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testgain_vlabel,  NOQUOTE))" _TLIFT_ =
70996         "%sysfunc(sasmsg(sashelp.dmine, rpt_testlift_vlabel,   NOQUOTE))" _TRESP_ =
70996    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testresp_vlabel,  NOQUOTE))" _TCAP_ =
70996    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testcap_vlabel,   NOQUOTE))" _TLIFTC_ =
70997         "%sysfunc(sasmsg(sashelp.dmine, rpt_testliftc_vlabel,   NOQUOTE))" _TRESPC_ =
70997    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testrespc_vlabel,  NOQUOTE))" _TCAPC_ =
70997    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_testcapc_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _GAIN_ = "Train: Gain" _VGAIN_ = "Valid: Gain" _LIFT_ = "Train: 
Lift" _VLIFT_ = "Valid: Lift" _RESP_ = "Train: Percent Response" _VRESP_ = "Valid: Percent 
Response" _CAP_ = "Train: Percent Captured Response" _VCAP_ = "Valid: Percent Captured 
Response" _LIFTC_ = "Train: Cumulative Lift" _VLIFTC_ = "Valid: Cumulative Lift" _RESPC_ = 
"Train: Cumulative Percent Response" _VRESPC_ = "Valid: Cumulative Percent Response" _CAPC_ = 
"Train: Cumulative Percent Captured Response" _VCAPC_ = "Valid: Cumulative Percent Captured 
Response" _TGAIN_ = "Test: Gain" _TLIFT_ = "Test: Lift" _TRESP_ = "Test: Percent Response" 
_TCAP_ = "Test: Percent Captured Response" _TLIFTC_ = "Test: Cumulative Lift" _TRESPC_ = 
"Test: Cumulative Percent Response" _TCAPC_ = "Test: Cumulative Percent Captured Response";
70998      set _temp;
MPRINT(EM_DIAGRAM):   set _temp;
70999      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
71000      if first.MODEL then do;
MPRINT(EM_DIAGRAM):   if first.MODEL then do;
71001      _GAIN_=.;
MPRINT(EM_DIAGRAM):   _GAIN_=.;
71002      _VGAIN_=.;
MPRINT(EM_DIAGRAM):   _VGAIN_=.;
71003      _TGAIN_=.;
MPRINT(EM_DIAGRAM):   _TGAIN_=.;
71004      _LIFT_=.;
MPRINT(EM_DIAGRAM):   _LIFT_=.;
71005      _VLIFT_=.;
MPRINT(EM_DIAGRAM):   _VLIFT_=.;
71006      _TLIFT_=.;
MPRINT(EM_DIAGRAM):   _TLIFT_=.;
71007      _LIFTC_=.;
MPRINT(EM_DIAGRAM):   _LIFTC_=.;
71008      _VLIFTC_=.;
MPRINT(EM_DIAGRAM):   _VLIFTC_=.;
71009      _TLIFTC_=.;
MPRINT(EM_DIAGRAM):   _TLIFTC_=.;
71010      _RESP_=.;
MPRINT(EM_DIAGRAM):   _RESP_=.;
71011      _VRESP_=.;
MPRINT(EM_DIAGRAM):   _VRESP_=.;
71012      _TRESP_=.;
MPRINT(EM_DIAGRAM):   _TRESP_=.;
71013      _RESPC_=.;
MPRINT(EM_DIAGRAM):   _RESPC_=.;
71014      _VRESPC_=.;
MPRINT(EM_DIAGRAM):   _VRESPC_=.;
71015      _TRESPC_=.;
MPRINT(EM_DIAGRAM):   _TRESPC_=.;
71016      _CAP_=.;
MPRINT(EM_DIAGRAM):   _CAP_=.;
71017      _VCAP_=.;
MPRINT(EM_DIAGRAM):   _VCAP_=.;
71018      _TCAP_=.;
MPRINT(EM_DIAGRAM):   _TCAP_=.;
71019      _CAPC_=.;
MPRINT(EM_DIAGRAM):   _CAPC_=.;
71020      _VCAPC_=.;
MPRINT(EM_DIAGRAM):   _VCAPC_=.;
71021      _VCAPC_=.;
MPRINT(EM_DIAGRAM):   _VCAPC_=.;
71022      end;
MPRINT(EM_DIAGRAM):   end;
71023      select(DATAROLE);
MPRINT(EM_DIAGRAM):   select(DATAROLE);
71024      when('TRAIN') do;
MPRINT(EM_DIAGRAM):   when('TRAIN') do;
71025      _GAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _GAIN_=GAIN;
71026      _LIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _LIFT_=LIFT;
71027      _LIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _LIFTC_=LIFTC;
71028      _RESP_=RESP;
MPRINT(EM_DIAGRAM):   _RESP_=RESP;
71029      _RESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _RESPC_=RESPC;
71030      _CAP_=CAP;
MPRINT(EM_DIAGRAM):   _CAP_=CAP;
71031      _CAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _CAPC_=CAPC;
71032      end;
MPRINT(EM_DIAGRAM):   end;
71033      when('VALIDATE') do;
MPRINT(EM_DIAGRAM):   when('VALIDATE') do;
71034      _VGAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _VGAIN_=GAIN;
71035      _VLIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _VLIFT_=LIFT;
71036      _VLIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _VLIFTC_=LIFTC;
71037      _VRESP_=RESP;
MPRINT(EM_DIAGRAM):   _VRESP_=RESP;
71038      _VRESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _VRESPC_=RESPC;
71039      _VCAP_=CAP;
MPRINT(EM_DIAGRAM):   _VCAP_=CAP;
71040      _VCAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _VCAPC_=CAPC;
71041      end;
MPRINT(EM_DIAGRAM):   end;
71042      when('TEST') do;
MPRINT(EM_DIAGRAM):   when('TEST') do;
71043      _TGAIN_=GAIN;
MPRINT(EM_DIAGRAM):   _TGAIN_=GAIN;
71044      _TLIFT_=LIFT;
MPRINT(EM_DIAGRAM):   _TLIFT_=LIFT;
71045      _TLIFTC_=LIFTC;
MPRINT(EM_DIAGRAM):   _TLIFTC_=LIFTC;
71046      _TRESP_=RESP;
MPRINT(EM_DIAGRAM):   _TRESP_=RESP;
71047      _TRESPC_=RESPC;
MPRINT(EM_DIAGRAM):   _TRESPC_=RESPC;
71048      _TCAP_=CAP;
MPRINT(EM_DIAGRAM):   _TCAP_=CAP;
71049      _TCAPC_=CAPC;
MPRINT(EM_DIAGRAM):   _TCAPC_=CAPC;
71050      end;
MPRINT(EM_DIAGRAM):   end;
71051      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
71052      end;
MPRINT(EM_DIAGRAM):   end;
71053      keep MODEL _GAIN_ _LIFT_ _LIFTC_ _RESP_ _RESPC_ _CAP_ _CAPC_
71054      _VGAIN_ _VLIFT_ _VLIFTC_ _VRESP_ _VRESPC_ _VCAP_ _VCAPC_
71055      ;
MPRINT(EM_DIAGRAM):   keep MODEL _GAIN_ _LIFT_ _LIFTC_ _RESP_ _RESPC_ _CAP_ _CAPC_ _VGAIN_ 
_VLIFT_ _VLIFTC_ _VRESP_ _VRESPC_ _VCAP_ _VCAPC_ ;
71056      if last.model then output;
MPRINT(EM_DIAGRAM):   if last.model then output;
71057      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 12 observations read from the data set WORK._TEMP.
NOTE: The data set WORK._TEMP has 6 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.14 seconds
      

71058      proc sort data=EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_EMOUTFIT;
71059      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
71060      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 51 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71061      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
71062      merge EMWS1.MdlComp_EMOUTFIT _temp;
MPRINT(EM_DIAGRAM):   merge EMWS1.MdlComp_EMOUTFIT _temp;
71063      by MODEL;
MPRINT(EM_DIAGRAM):   by MODEL;
71064      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: There were 6 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 65 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

71065      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMOUTFIT;
71066      length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL $200
71066    ! _CRITERION_ 8;
MPRINT(EM_DIAGRAM):   length PARENT $16 MODEL $16 MODELDESCRIPTION $81 TARGET $32 TARGETLABEL 
$200 _CRITERION_ 8;
71067      set EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT;
71068      label _CRITERION_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_selectioncriterion_vlabel ,
71068    !  NOQUOTE, %nrbquote(Valid: Misclassification Rate)))";
MPRINT(EM_DIAGRAM):   label _CRITERION_ = "Selection Criterion: Valid: Misclassification Rate";
71069      _CRITERION_ = _VMISC_;
MPRINT(EM_DIAGRAM):   _CRITERION_ = _VMISC_;
71070      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 66 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71071      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MdlComp_EMOUTFIT;
71072      length USE $1;
MPRINT(EM_DIAGRAM):   length USE $1;
71073      label USE= "%sysfunc(sasmsg(sashelp.dmine, rpt_selmodel_vlabel,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label USE= "Selected Model";
71074      set EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT;
71075      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable USE is uninitialized.
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

71076      proc sort data = EMWS1.MdlComp_EMOUTFIT NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.MdlComp_EMOUTFIT NOTHREADS;
71077      by
71078      _VMISC_
71079      _VASE_ _ASE_ _MISC_;
MPRINT(EM_DIAGRAM):   by _VMISC_ _VASE_ _ASE_ _MISC_;
71080      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 67 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

71081      %let EM_AUTOMODEL = %str();
71082      data EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_EMOUTFIT;
71083      set EMWS1.MdlComp_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMOUTFIT;
71084      drop found;
MPRINT(EM_DIAGRAM):   drop found;
71085      retain found 0;
MPRINT(EM_DIAGRAM):   retain found 0;
71086      if found = 0 and _VMISC_ ne . then do;
MPRINT(EM_DIAGRAM):   if found = 0 and _VMISC_ ne . then do;
71087      use = 'Y';
MPRINT(EM_DIAGRAM):   use = 'Y';
71088      found = 1;
MPRINT(EM_DIAGRAM):   found = 1;
71089      call symput('EM_AUTOMODEL', model);
MPRINT(EM_DIAGRAM):   call symput('EM_AUTOMODEL', model);
71090      end;
MPRINT(EM_DIAGRAM):   end;
71091      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMOUTFIT has 6 observations and 67 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71092      title ' ';
MPRINT(EM_DIAGRAM):    title ' ';
71093      proc print data=EMWS1.MdlComp_EMOUTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.MdlComp_EMOUTFIT noobs label;
71094      var
71095      USE
71096      MODEL
71097      MODELDESCRIPTION
71098      _VMISC_
71099      _ASE_
71100      _MISC_
71101      _VASE_
71102      ;
MPRINT(EM_DIAGRAM):   var USE MODEL MODELDESCRIPTION _VMISC_ _ASE_ _MISC_ _VASE_ ;
71103      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title,        NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics";
71104      title10 "Model Selection based on Valid: Misclassification Rate (_VMISC_)";
MPRINT(EM_DIAGRAM):   title10 "Model Selection based on Valid: Misclassification Rate 
(_VMISC_)";
MPRINT(EM_DIAGRAM):   run;
71105      run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The PROCEDURE PRINT printed page 38.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71106      title9;
MPRINT(EM_DIAGRAM):   title9;
71107      title10;
MPRINT(EM_DIAGRAM):   title10;
71108      proc transpose data=EMWS1.MdlComp_EMOUTFIT out=
71108    ! work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.MdlComp_EMOUTFIT out= 
work.modelstats(rename=(_LABEL_=Label _NAME_=STAT));
71109      ID model;
MPRINT(EM_DIAGRAM):   ID model;
71110      by target targetLabel;
MPRINT(EM_DIAGRAM):   by target targetLabel;
71111      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set WORK.MODELSTATS has 61 observations and 10 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

71112      data work.modelstats;
MPRINT(EM_DIAGRAM):   data work.modelstats;
71113      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
71114      if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
MPRINT(EM_DIAGRAM):   if substr(STAT, 1, 2) = '_V' or STAT='VKS' then do;
71115      NumRole=2;
MPRINT(EM_DIAGRAM):   NumRole=2;
71116      end;
MPRINT(EM_DIAGRAM):   end;
71117      else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 2) = '_T' or STAT='TKS' then do;
71118      NumRole=3;
MPRINT(EM_DIAGRAM):   NumRole=3;
71119      end;
MPRINT(EM_DIAGRAM):   end;
71120      else if substr(STAT, 1, 1) = '_' or STAT in('KS', 'BINNED_KS_PROB_CUTOFF') then do;
MPRINT(EM_DIAGRAM):   else if substr(STAT, 1, 1) = '_' or STAT in('KS', 
'BINNED_KS_PROB_CUTOFF') then do;
71121      NumRole=1;
MPRINT(EM_DIAGRAM):   NumRole=1;
71122      end;
MPRINT(EM_DIAGRAM):   end;
71123      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 61 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 61 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71124      proc sort data=work.modelstats out=work.modelstats;
MPRINT(EM_DIAGRAM):   proc sort data=work.modelstats out=work.modelstats;
71125      by NumRole STAT;
MPRINT(EM_DIAGRAM):   by NumRole STAT;
71126      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 61 observations read from the data set WORK.MODELSTATS.
NOTE: The data set WORK.MODELSTATS has 61 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71127      proc format;
MPRINT(EM_DIAGRAM):   proc format;
71128      value RoleFmt 1='Train' 2='Valid' 3='Test';
MPRINT(EM_DIAGRAM):   value RoleFmt 1='Train' 2='Valid' 3='Test';
NOTE: Format ROLEFMT has been output.
MPRINT(EM_DIAGRAM):   run;
71129      run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

71130      proc print data= work.modelstats(drop=STAT target targetLabel) noobs label;
MPRINT(EM_DIAGRAM):   proc print data= work.modelstats(drop=STAT target targetLabel) noobs 
label;
71131      label Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_statistics_vlabel, NOQUOTE))"
71131    ! NumRole= "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Label = "Statistics" NumRole= "Data Role";
71132      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_fittable_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Fit Statistics Table";
71133      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_target_title,   NOQUOTE, BAD))";
MPRINT(EM_DIAGRAM):   title10 "Target: BAD";
MPRINT(EM_DIAGRAM):   by NumRole;
MPRINT(EM_DIAGRAM):   format NumRole RoleFmt.;
MPRINT(EM_DIAGRAM):   run;
71134      by NumRole;
71135      format NumRole RoleFmt.;
71136      run;

NOTE: There were 61 observations read from the data set WORK.MODELSTATS.
NOTE: The PROCEDURE PRINT printed page 39.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

71137      title9;
MPRINT(EM_DIAGRAM):   title9;
71138      title10;
MPRINT(EM_DIAGRAM):   title10;
71139      data EMWS1.MdlComp_COMPAREFIT;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_COMPAREFIT;
71140      length DataRole Target $32 targetlabel $200;
MPRINT(EM_DIAGRAM):   length DataRole Target $32 targetlabel $200;
71141      label DataRole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))"
71141    ! STAT = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))" LABEL =
71141    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DataRole = "Data Role" STAT = "Fit Statistics" LABEL = "Statistics 
Label";
71142      set work.modelstats;
MPRINT(EM_DIAGRAM):   set work.modelstats;
71143      DataRole = strip(put(NumRole, Rolefmt.));
MPRINT(EM_DIAGRAM):   DataRole = strip(put(NumRole, Rolefmt.));
71144      drop NumRole;
MPRINT(EM_DIAGRAM):   drop NumRole;
71145      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 61 observations read from the data set WORK.MODELSTATS.
NOTE: The data set EMWS1.MDLCOMP_COMPAREFIT has 61 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

71146      %macro ReportFit;
71147      proc transpose data= EMWS1.MdlComp_EMOUTFIT(obs=1) out=tempFit;
71148      run;
71149      data _null_;
71150      set tempfit end=eof;
71151      retain statCount 0;
71152      if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
71153      statCount + 1;
71154      call symput('statName'!!strip(put(statCount,best.)), _NAME_);
71155      call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, ':'));
71156      end;
71157      if eof then do;
71158      call symput('statCount', strip(put(statCount,best.)));
71159      end;
71160      run;
71161      data EMWS1.MdlComp_EMREPORTFIT;
71162      set EMWS1.MdlComp_EMOUTFIT;
71163      length FitStat $41 Label $40;
71164      label FitStat = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_vlabel,   NOQUOTE))"
71164    ! LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_statlabel_vlabel, NOQUOTE))";
71165      %do i=1 %to &statCount;
71166      FitStat="&&StatName&i";
71167      Label="&&StatLabel&i";
71168      Train =&&StatName&i;
71169      %if &&StatName&i= KS %then %do;
71170      Validate = VKS;
71171      Test = TKS;
71172      %end;
71173      %else %if &&StatName&i= BINNED_KS_PROB_CUTOFF %then %do;
71174      Validate = _VBINNED_KS_PROB_CUTOFF_;
71175      Test = _TBINNED_KS_PROB_CUTOFF_;
71176      %end;
71177      %else %do;
71178      %let VstatName= _V%substr(&&StatName&i,2);
71179      %let TstatName= _T%substr(&&StatName&i,2);
71180      Validate=&VStatName;
71181      Test=&TStatName;
71182      %end;
71183      output;
71184      %end;
71185      keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
71186      run;
71187      %mend;
71188      %reportFit;
MPRINT(EM_DIAGRAM):   
MPRINT(REPORTFIT):   proc transpose data= EMWS1.MdlComp_EMOUTFIT(obs=1) out=tempFit;
MPRINT(REPORTFIT):   run;

NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set WORK.TEMPFIT has 61 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(REPORTFIT):   data _null_;
MPRINT(REPORTFIT):   set tempfit end=eof;
MPRINT(REPORTFIT):   retain statCount 0;
MPRINT(REPORTFIT):   if substr(_NAME_,1,2) ^in('_V', '_T', 'TK', 'VK') then do;
MPRINT(REPORTFIT):   statCount + 1;
MPRINT(REPORTFIT):   call symput('statName'!!strip(put(statCount,best.)), _NAME_);
MPRINT(REPORTFIT):   call symput('statLabel'!!strip(put(statCount,best.)), scan(_LABEL_,2, 
':'));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   if eof then do;
MPRINT(REPORTFIT):   call symput('statCount', strip(put(statCount,best.)));
MPRINT(REPORTFIT):   end;
MPRINT(REPORTFIT):   run;

NOTE: There were 61 observations read from the data set WORK.TEMPFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(REPORTFIT):   data EMWS1.MdlComp_EMREPORTFIT;
MPRINT(REPORTFIT):   set EMWS1.MdlComp_EMOUTFIT;
MPRINT(REPORTFIT):   length FitStat $41 Label $40;
MPRINT(REPORTFIT):   label FitStat = "Fit Statistics" LABEL = "Statistics Label";
MPRINT(REPORTFIT):   FitStat="_CRITERION_             ";
MPRINT(REPORTFIT):   Label=" Valid";
MPRINT(REPORTFIT):   Train =_CRITERION_ ;
MPRINT(REPORTFIT):   Validate=_VCRITERION_;
MPRINT(REPORTFIT):   Test=_TCRITERION_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFT_                   ";
MPRINT(REPORTFIT):   Label=" Total Degrees of Freedom                               ";
MPRINT(REPORTFIT):   Train =_DFT_ ;
MPRINT(REPORTFIT):   Validate=_VDFT_;
MPRINT(REPORTFIT):   Test=_TDFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFE_                   ";
MPRINT(REPORTFIT):   Label=" Degrees of Freedom for Error                           ";
MPRINT(REPORTFIT):   Train =_DFE_ ;
MPRINT(REPORTFIT):   Validate=_VDFE_;
MPRINT(REPORTFIT):   Test=_TDFE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DFM_                   ";
MPRINT(REPORTFIT):   Label=" Model Degrees of Freedom                               ";
MPRINT(REPORTFIT):   Train =_DFM_ ;
MPRINT(REPORTFIT):   Validate=_VDFM_;
MPRINT(REPORTFIT):   Test=_TDFM_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NW_                    ";
MPRINT(REPORTFIT):   Label=" Number of Estimated Weights                            ";
MPRINT(REPORTFIT):   Train =_NW_ ;
MPRINT(REPORTFIT):   Validate=_VNW_;
MPRINT(REPORTFIT):   Test=_TNW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AIC_                   ";
MPRINT(REPORTFIT):   Label=" Akaike's Information Criterion                         ";
MPRINT(REPORTFIT):   Train =_AIC_ ;
MPRINT(REPORTFIT):   Validate=_VAIC_;
MPRINT(REPORTFIT):   Test=_TAIC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SBC_                   ";
MPRINT(REPORTFIT):   Label=" Schwarz's Bayesian Criterion                           ";
MPRINT(REPORTFIT):   Train =_SBC_ ;
MPRINT(REPORTFIT):   Validate=_VSBC_;
MPRINT(REPORTFIT):   Test=_TSBC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ASE_                   ";
MPRINT(REPORTFIT):   Label=" Average Squared Error                                  ";
MPRINT(REPORTFIT):   Train =_ASE_ ;
MPRINT(REPORTFIT):   Validate=_VASE_;
MPRINT(REPORTFIT):   Test=_TASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MAX_                   ";
MPRINT(REPORTFIT):   Label=" Maximum Absolute Error                                 ";
MPRINT(REPORTFIT):   Train =_MAX_ ;
MPRINT(REPORTFIT):   Validate=_VMAX_;
MPRINT(REPORTFIT):   Test=_TMAX_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_DIV_                   ";
MPRINT(REPORTFIT):   Label=" Divisor for ASE                                        ";
MPRINT(REPORTFIT):   Train =_DIV_ ;
MPRINT(REPORTFIT):   Validate=_VDIV_;
MPRINT(REPORTFIT):   Test=_TDIV_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_NOBS_                  ";
MPRINT(REPORTFIT):   Label=" Sum of Frequencies                                     ";
MPRINT(REPORTFIT):   Train =_NOBS_ ;
MPRINT(REPORTFIT):   Validate=_VNOBS_;
MPRINT(REPORTFIT):   Test=_TNOBS_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RASE_                  ";
MPRINT(REPORTFIT):   Label=" Root Average Squared Error                             ";
MPRINT(REPORTFIT):   Train =_RASE_ ;
MPRINT(REPORTFIT):   Validate=_VRASE_;
MPRINT(REPORTFIT):   Test=_TRASE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SSE_                   ";
MPRINT(REPORTFIT):   Label=" Sum of Squared Errors                                  ";
MPRINT(REPORTFIT):   Train =_SSE_ ;
MPRINT(REPORTFIT):   Validate=_VSSE_;
MPRINT(REPORTFIT):   Test=_TSSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_SUMW_                  ";
MPRINT(REPORTFIT):   Label=" Sum of Case Weights Times Freq                         ";
MPRINT(REPORTFIT):   Train =_SUMW_ ;
MPRINT(REPORTFIT):   Validate=_VSUMW_;
MPRINT(REPORTFIT):   Test=_TSUMW_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_FPE_                   ";
MPRINT(REPORTFIT):   Label=" Final Prediction Error                                 ";
MPRINT(REPORTFIT):   Train =_FPE_ ;
MPRINT(REPORTFIT):   Validate=_VFPE_;
MPRINT(REPORTFIT):   Test=_TFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MSE_                   ";
MPRINT(REPORTFIT):   Label=" Mean Squared Error                                     ";
MPRINT(REPORTFIT):   Train =_MSE_ ;
MPRINT(REPORTFIT):   Validate=_VMSE_;
MPRINT(REPORTFIT):   Test=_TMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RFPE_                  ";
MPRINT(REPORTFIT):   Label=" Root Final Prediction Error                            ";
MPRINT(REPORTFIT):   Train =_RFPE_ ;
MPRINT(REPORTFIT):   Validate=_VRFPE_;
MPRINT(REPORTFIT):   Test=_TRFPE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RMSE_                  ";
MPRINT(REPORTFIT):   Label=" Root Mean Squared Error                                ";
MPRINT(REPORTFIT):   Train =_RMSE_ ;
MPRINT(REPORTFIT):   Validate=_VRMSE_;
MPRINT(REPORTFIT):   Test=_TRMSE_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AVERR_                 ";
MPRINT(REPORTFIT):   Label=" Average Error Function                                 ";
MPRINT(REPORTFIT):   Train =_AVERR_ ;
MPRINT(REPORTFIT):   Validate=_VAVERR_;
MPRINT(REPORTFIT):   Test=_TAVERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_ERR_                   ";
MPRINT(REPORTFIT):   Label=" Error Function                                         ";
MPRINT(REPORTFIT):   Train =_ERR_ ;
MPRINT(REPORTFIT):   Validate=_VERR_;
MPRINT(REPORTFIT):   Test=_TERR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_MISC_                  ";
MPRINT(REPORTFIT):   Label=" Misclassification Rate                                 ";
MPRINT(REPORTFIT):   Train =_MISC_ ;
MPRINT(REPORTFIT):   Validate=_VMISC_;
MPRINT(REPORTFIT):   Test=_TMISC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_WRONG_                 ";
MPRINT(REPORTFIT):   Label=" Number of Wrong Classifications                        ";
MPRINT(REPORTFIT):   Train =_WRONG_ ;
MPRINT(REPORTFIT):   Validate=_VWRONG_;
MPRINT(REPORTFIT):   Test=_TWRONG_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_AUR_                   ";
MPRINT(REPORTFIT):   Label=" Roc Index                                              ";
MPRINT(REPORTFIT):   Train =_AUR_ ;
MPRINT(REPORTFIT):   Validate=_VAUR_;
MPRINT(REPORTFIT):   Test=_TAUR_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_GINI_                  ";
MPRINT(REPORTFIT):   Label=" Gini Coefficient                                       ";
MPRINT(REPORTFIT):   Train =_GINI_ ;
MPRINT(REPORTFIT):   Validate=_VGINI_;
MPRINT(REPORTFIT):   Test=_TGINI_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="KS                      ";
MPRINT(REPORTFIT):   Label=" Kolmogorov-Smirnov Statistic                           ";
MPRINT(REPORTFIT):   Train =KS ;
MPRINT(REPORTFIT):   Validate = VKS;
MPRINT(REPORTFIT):   Test = TKS;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_KS_PROB_CUTOFF         ";
MPRINT(REPORTFIT):   Label=" Kolmogorov-Smirnov Probability Cutoff                  ";
MPRINT(REPORTFIT):   Train =_KS_PROB_CUTOFF ;
MPRINT(REPORTFIT):   Validate=_VKS_PROB_CUTOFF;
MPRINT(REPORTFIT):   Test=_TKS_PROB_CUTOFF;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_KS_BIN_                ";
MPRINT(REPORTFIT):   Label=" Bin-Based Two-Way Kolmogorov-Smirnov Statistic         ";
MPRINT(REPORTFIT):   Train =_KS_BIN_ ;
MPRINT(REPORTFIT):   Validate=_VKS_BIN_;
MPRINT(REPORTFIT):   Test=_TKS_BIN_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="BINNED_KS_PROB_CUTOFF   ";
MPRINT(REPORTFIT):   Label=" Bin-Based Two-Way Kolmogorov-Smirnov Probability Cutoff";
MPRINT(REPORTFIT):   Train =BINNED_KS_PROB_CUTOFF ;
MPRINT(REPORTFIT):   Validate = _VBINNED_KS_PROB_CUTOFF_;
MPRINT(REPORTFIT):   Test = _TBINNED_KS_PROB_CUTOFF_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_GAIN_                  ";
MPRINT(REPORTFIT):   Label=" Gain                                                   ";
MPRINT(REPORTFIT):   Train =_GAIN_ ;
MPRINT(REPORTFIT):   Validate=_VGAIN_;
MPRINT(REPORTFIT):   Test=_TGAIN_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_LIFT_                  ";
MPRINT(REPORTFIT):   Label=" Lift                                                   ";
MPRINT(REPORTFIT):   Train =_LIFT_ ;
MPRINT(REPORTFIT):   Validate=_VLIFT_;
MPRINT(REPORTFIT):   Test=_TLIFT_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_LIFTC_                 ";
MPRINT(REPORTFIT):   Label=" Cumulative Lift                                        ";
MPRINT(REPORTFIT):   Train =_LIFTC_ ;
MPRINT(REPORTFIT):   Validate=_VLIFTC_;
MPRINT(REPORTFIT):   Test=_TLIFTC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RESP_                  ";
MPRINT(REPORTFIT):   Label=" Percent Response                                       ";
MPRINT(REPORTFIT):   Train =_RESP_ ;
MPRINT(REPORTFIT):   Validate=_VRESP_;
MPRINT(REPORTFIT):   Test=_TRESP_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_RESPC_                 ";
MPRINT(REPORTFIT):   Label=" Cumulative Percent Response                            ";
MPRINT(REPORTFIT):   Train =_RESPC_ ;
MPRINT(REPORTFIT):   Validate=_VRESPC_;
MPRINT(REPORTFIT):   Test=_TRESPC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_CAP_                   ";
MPRINT(REPORTFIT):   Label=" Percent Captured Response                              ";
MPRINT(REPORTFIT):   Train =_CAP_ ;
MPRINT(REPORTFIT):   Validate=_VCAP_;
MPRINT(REPORTFIT):   Test=_TCAP_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   FitStat="_CAPC_                  ";
MPRINT(REPORTFIT):   Label=" Cumulative Percent Captured Response                   ";
MPRINT(REPORTFIT):   Train =_CAPC_ ;
MPRINT(REPORTFIT):   Validate=_VCAPC_;
MPRINT(REPORTFIT):   Test=_TCAPC_;
MPRINT(REPORTFIT):   output;
MPRINT(REPORTFIT):   keep Parent Model Target TargetLabel FitStat Label Train Validate Test;
MPRINT(REPORTFIT):   run;

NOTE: Variable _VCRITERION_ is uninitialized.
NOTE: Variable _TCRITERION_ is uninitialized.
NOTE: Variable _VDFT_ is uninitialized.
NOTE: Variable _TDFT_ is uninitialized.
NOTE: Variable _VDFE_ is uninitialized.
NOTE: Variable _TDFE_ is uninitialized.
NOTE: Variable _VDFM_ is uninitialized.
NOTE: Variable _TDFM_ is uninitialized.
NOTE: Variable _VNW_ is uninitialized.
NOTE: Variable _TNW_ is uninitialized.
NOTE: Variable _VAIC_ is uninitialized.
NOTE: Variable _TAIC_ is uninitialized.
NOTE: Variable _VSBC_ is uninitialized.
NOTE: Variable _TSBC_ is uninitialized.
NOTE: Variable _TASE_ is uninitialized.
NOTE: Variable _TMAX_ is uninitialized.
NOTE: Variable _TDIV_ is uninitialized.
NOTE: Variable _TNOBS_ is uninitialized.
NOTE: Variable _TRASE_ is uninitialized.
NOTE: Variable _TSSE_ is uninitialized.
NOTE: Variable _TSUMW_ is uninitialized.
NOTE: Variable _VFPE_ is uninitialized.
NOTE: Variable _TFPE_ is uninitialized.
NOTE: Variable _TMSE_ is uninitialized.
NOTE: Variable _VRFPE_ is uninitialized.
NOTE: Variable _TRFPE_ is uninitialized.
NOTE: Variable _TRMSE_ is uninitialized.
NOTE: Variable _TAVERR_ is uninitialized.
NOTE: Variable _TERR_ is uninitialized.
NOTE: Variable _TMISC_ is uninitialized.
NOTE: Variable _TWRONG_ is uninitialized.
NOTE: Variable _TAUR_ is uninitialized.
NOTE: Variable _TGINI_ is uninitialized.
NOTE: Variable TKS is uninitialized.
NOTE: Variable _VKS_PROB_CUTOFF is uninitialized.
NOTE: Variable _TKS_PROB_CUTOFF is uninitialized.
NOTE: Variable _TKS_BIN_ is uninitialized.
NOTE: Variable _TBINNED_KS_PROB_CUTOFF_ is uninitialized.
NOTE: Variable _TGAIN_ is uninitialized.
NOTE: Variable _TLIFT_ is uninitialized.
NOTE: Variable _TLIFTC_ is uninitialized.
NOTE: Variable _TRESP_ is uninitialized.
NOTE: Variable _TRESPC_ is uninitialized.
NOTE: Variable _TCAP_ is uninitialized.
NOTE: Variable _TCAPC_ is uninitialized.
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: The data set EMWS1.MDLCOMP_EMREPORTFIT has 210 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):  ;

71189      proc print data=EMWS1.MdlComp_EMEVENTREPORT(drop=PARENT) noobs label;
MPRINT(EM_DIAGRAM):    proc print data=EMWS1.MdlComp_EMEVENTREPORT(drop=PARENT) noobs label;
71190      title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   title9 "Event Classification Table";
71191      title10 "Model Selection based on Valid: Misclassification Rate (_VMISC_)";
MPRINT(EM_DIAGRAM):   title10 "Model Selection based on Valid: Misclassification Rate 
(_VMISC_)";
MPRINT(EM_DIAGRAM):   run;
71192      run;

NOTE: There were 12 observations read from the data set EMWS1.MDLCOMP_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 40.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71193      title9;
MPRINT(EM_DIAGRAM):   title9;
71194      title10;
MPRINT(EM_DIAGRAM):   title10;
71195      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
71196      modify MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   modify MdlComp_EMRANK;
71197      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
71197    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE =
71197    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
71198         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
71198    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data 
Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
71199      run;

NOTE: MODIFY was successful for EMWS1.MDLCOMP_EMRANK.DATA.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

71200      proc sort data=EMWS1.MdlComp_EMRANK NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_EMRANK NOTHREADS;
71201      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
71202      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 240 observations read from the data set EMWS1.MDLCOMP_EMRANK.
NOTE: The data set EMWS1.MDLCOMP_EMRANK has 240 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71203      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
71204      modify MdlComp_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify MdlComp_EMSCOREDIST;
71205      label PARENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_parent_vlabel  ,  NOQUOTE))"
71205    ! MODEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelnode_vlabel, NOQUOTE))" DATAROLE =
71205    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel,  NOQUOTE))" TARGET =
71206         "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel, NOQUOTE))" TARGETLABEL =
71206    ! "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PARENT = "Predecessor Node" MODEL = "Model Node" DATAROLE = "Data 
Role" TARGET = "Target Variable" TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   run;
71207      run;

NOTE: MODIFY was successful for EMWS1.MDLCOMP_EMSCOREDIST.DATA.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.17 seconds
      

71208      proc sort data=EMWS1.MdlComp_EMSCOREDIST NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_EMSCOREDIST NOTHREADS;
71209      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
71210      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 204 observations read from the data set EMWS1.MDLCOMP_EMSCOREDIST.
NOTE: The data set EMWS1.MDLCOMP_EMSCOREDIST has 204 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

71211      proc sort data=EMWS1.MdlComp_EMROC NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MdlComp_EMROC NOTHREADS;
71212      by descending model target;
MPRINT(EM_DIAGRAM):   by descending model target;
71213      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1047 observations read from the data set EMWS1.MDLCOMP_EMROC.
NOTE: The data set EMWS1.MDLCOMP_EMROC has 1047 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
