*------------------------------------------------------------*
User:                sakerb01
Date:                November 02, 2015
Time:                16:38:29
Site:                70080760
Platform:            X64_7PRO
Maintenance Release: 9.04.01M1P120413
EM Version:          13.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 02, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:52" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 02, 2015
Time:                16:36:52
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0NGK2MU "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0NGK2MU new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 02, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:52" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080760";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M1P120413";
MPRINT(EM_DIAGRAM):   put "EM Version:          13.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 02, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:36:52" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                sakerb01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22834      proc freq data=EMWS1.Report_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Report_VariableSet noprint;
22835      table ROLE*LEVEL/out=WORK.ReportMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.ReportMETA;
22836      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set EMWS1.REPORT_VARIABLESET.
NOTE: The data set WORK.REPORTMETA has 10 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
22837      proc print data=WORK.ReportMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.ReportMETA label noobs;
22838      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22839      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22840      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22841      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22842      run;
 
NOTE: There were 10 observations read from the data set WORK.REPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
22843      title10;
MPRINT(EM_DIAGRAM):   title10;
22844      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Project_3';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diagram_3';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural4_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23200      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23201      * Report: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Report: Generation of macros and macro variables;
23202      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23203      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
23204      %let EMEXCEPTIONSTRING=;
23205      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23206      * TRAIN: Report;
MPRINT(EM_DIAGRAM):   * TRAIN: Report;
23207      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23208      %let EM_ACTION = TRAIN;
23209      %let syscc = 0;
23210      %macro main;
23211
23212        filename temp catalog 'sashelp.emutil.reporter_macros.source';
23213        %include temp;
23214        filename temp;
23215
23216        %setProperties;
23217
23218        %if %upcase(&EM_ACTION) = CREATE %then %do;
23219          filename temp catalog 'sashelp.emutil.reporter_create.source';
23220          %include temp;
23221          filename temp;
23222
23223          %create;
23224        %end;
23225
23226         %else
23227         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23228
23229             filename temp catalog 'sashelp.emutil.reporter_train.source';
23230             %include temp;
23231             filename temp;
23232             %train;
23233         %end;
23234
23235         %doendm:
23236      %mend main;
23237
23238      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
23241     +%macro SetProperties;
23243     +     /* reporting options */
23244     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
23245     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
23246     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
23247     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
23249     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
23250     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
23251     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
23252     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
23253     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
23254     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
23255     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
23257     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
23259     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
23260     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
23261     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
23262     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
23264     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAIN.SOURCE.
23265     +
23266     +%macro train();
23267     +
23268     +    filename temp catalog 'sashelp.emutil.reporter_trainmacros.source'; %include temp; filename temp;
23269     +    filename temp catalog 'sashelp.emrpm.em_modelprops.source';         %include temp; filename temp;
23270     +
23271     +    /* Initialize property macro variables */
23272     +    %SetProperties;
23273     +
23274     +    /* if pdf or rtf files exist, delete these prior to recreating report */
23275     +    %EM_GETNAME(key=REPORT, type=FILE, extension=pdf);
23276     +    filename pdffile "&EM_USER_REPORT";
23277     +    %if %sysfunc(fexist(pdffile)) %then %do;
23278     +        %let rc = %sysfunc(fdelete(pdffile));
23279     +    %end;
23280     +    filename pdffile;
23281     +
23282     +    %EM_GETNAME(key=REPORT, type=FILE, extension=rtf);
23283     +    filename rtffile "&EM_USER_REPORT";
23284     +    %if %sysfunc(fexist(rtffile)) %then %do;
23285     +        %let rc = %sysfunc(fdelete(rtffile));
23286     +    %end;
23287     +    filename rtffile;
23288     +
23289     +    /* create report */
23290     +
23291     +    %EM_REPORT_CREATE(
23292     +        path        = &EM_NODEDIR,
23293     +        lib         = &EM_LIB,
23294     +        startnodeid = &EM_NODEID,
23295     +        showall     = &EM_PROPERTY_SHOWALL,
23296     +        nodes       = &EM_PROPERTY_NODES,
23297     +        format      = &EM_PROPERTY_FORMAT,
23298     +        style       = &EM_PROPERTY_STYLE
23299     +    );
23300     +
23301     +    %if &EMEXCEPTIONSTRING ne %then %do; %goto doendm; %end;
23302     +
23303     +    %EM_REPORT_RESULTS(
23304     +        path        = &EM_NODEDIR,
23305     +        lib         = &EM_LIB,
23306     +        startnodeid = &EM_NODEID,
23307     +        showall     = &EM_PROPERTY_SHOWALL,
23308     +        nodes       = &EM_PROPERTY_NODES,
23309     +        format      = &EM_PROPERTY_FORMAT,
23310     +        style       = &EM_PROPERTY_STYLE
23311     +    );
23312     +
23313     +    %doendm:
23314     +
23315     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.reporter_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TRAINMACROS.SOURCE.
23316     +/*---------------------------------------------------------*/
23317     + *  EM_REPORT_CREATE;
MPRINT(TRAIN):   * EM_REPORT_CREATE;
23318     + *   all work needed to start the documents;
MPRINT(TRAIN):   * all work needed to start the documents;
23319     + *  - identify directory location;
MPRINT(TRAIN):   * - identify directory location;
23320     + *  - clear directory of em report files;
MPRINT(TRAIN):   * - clear directory of em report files;
23321     + *  - initialize document options;
MPRINT(TRAIN):   * - initialize document options;
23322     + *  - setup ODS system;
MPRINT(TRAIN):   * - setup ODS system;
23323     +/*---------------------------------------------------------*/
23324     +%macro EM_REPORT_CREATE(
23325     +    path=,             /*-- output location             ---*/
23326     +    lib=,              /*-- em workspace library        ---*/
23327     +    startnodeid=,      /*-- starting nodeid             ---*/
23328     +    showall=,          /*-- show all content Y or N     ---*/
23329     +    nodes=,            /*-- nodes to generate report on ---*/
23330     +    format=,           /*-- format for generated report ---*/
23331     +    style=             /*--- style for ODS statement    ---*/
23332     +) ;
23334     +    filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';      %include temp; filename temp;
23335     +    filename temp catalog 'sashelp.emutil.reporter_printmacros.source';     %include temp; filename temp;
23336     +    filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';       %include temp; filename temp;
23337     +    filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;         %include temp; filename temp;
23338     +    filename temp catalog 'sashelp.emutil.reporter_tagset_template.source'; %include temp; filename temp;
23340     +    /*--- 1. set global parameters ---*/
23342     +    %GLOBAL EM_REPORT_PATH    ; %let EM_REPORT_PATH    = &PATH ;
23343     +    %GLOBAL EM_REPORT_SHOWALL ; %let EM_REPORT_SHOWALL = %upcase(&showall) ;
23344     +    %GLOBAL EM_REPORT_LIB     ; %let EM_REPORT_LIB     = &lib;
23345     +    %GLOBAL EM_REPORT_NODES   ; %let EM_REPORT_NODES   = &nodes;
23346     +    %GLOBAL EM_REPORT_FORMAT  ; %let EM_REPORT_FORMAT  = &format;
23347     +    %GLOBAL EM_REPORT_SYTLE   ; %let EM_REPORT_STYLE   = &style;
23349     +    /*--- 2. set global constants ---*/
23351     +    %GLOBAL EM_REPORT_GDEVICE;
23352     +    %GLOBAL EM_REPORT_PRINT_MAXVARS;
23353     +    %GLOBAL EM_REPORT_TEXT_FONT;
23354     +    %GLOBAL EM_REPORT_TEXT_SIZE;
23355     +    %GLOBAL EM_REPORT_TITLE_SIZE;
23356     +    %GLOBAL EM_REPORT_HEADER_SIZE;
23357     +    %GLOBAL EM_REPORT_NODE_FONT;
23358     +    %GLOBAL EM_REPORT_TITLE;
23359     +    %GLOBAL EM_REPORT_FOOTNOTE1;
23360     +    %GLOBAL EM_REPORT_FOOTNOTE2;
23362     +    %global EM_REPORT_SUPPRESS_DATE; %let EM_REPORT_SUPPRESS_DATE =;
23364     +    %global RPM_REPORT_MODELNODE RPM_REPORT_SCORENODE RPM_REPORT_MDLCOMP RPM_REPORT_VALIDSUMMARY;
23366     +    %if "&EM_REPORT_GDEVICE"       eq ""  %then %let EM_REPORT_GDEVICE = GIF;
23367     +    %if "&EM_REPORT_PRINT_MAXVARS" eq ""  %then %let EM_REPORT_PRINT_MAXVARS= 40;
23368     +    %if "&EM_REPORT_TEXT_FONT"     eq ""  %then %do;
23369     +        %let EM_REPORT_TEXT_FONT= %sysfunc(getlocale(FTITLE, &EM_PROPERTY_TEXTFONT));
23370     +        %let EM_REPORT_TEXT_FONT= %sysfunc(tranwrd(&EM_REPORT_TEXT_FONT,%str(<ttf>),%str()));
23371     +    %end;
23372     +    %if "&EM_REPORT_NODE_FONT"     eq ""  %then %do;
23373     +        %let EM_REPORT_NODE_FONT = %sysfunc(getlocale(FTITLE, SIMPLEX)) ;
23374     +        %let EM_REPORT_NODE_FONT = %sysfunc(tranwrd(&EM_REPORT_NODE_FONT,%str(<ttf>),%str()));
23375     +    %end;
23376     +    %if "&EM_REPORT_HEADER_SIZE"   eq ""  %then %let EM_REPORT_HEADER_SIZE = &EM_PROPERTY_HEADERSIZE;
23377     +    %if "&EM_REPORT_TEXT_SIZE"     eq ""  %then %let EM_REPORT_TEXT_SIZE   = &EM_PROPERTY_TEXTSIZE;
23378     +    %if "&EM_REPORT_TITLE_SIZE"    eq ""  %then %let EM_REPORT_TITLE_SIZE  = &EM_PROPERTY_TITLESIZE;
23380     +    /*--- 3. text for title statements ---*/
23382     +    %global EM_REPORT_PROJECT_TEXT ; %let EM_REPORT_PROJECT_TEXT= %superq(EM_PROJECTNAME);
23383     +    %global EM_REPORT_DIAGRAM_TEXT ; %let EM_REPORT_DIAGRAM_TEXT= %superq(EM_WSNAME);
23385     +    %EM_REPORT_NODE_TEXT(&startnodeid) ;
23387     +    /*--- 4. create output filename ---*/
23389     +    %EM_REGISTER(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
23391     +    /*--- 5. Allways get the path for showing the score code --*/
23393     +    %let FLOW= ;            /*--- ignore for now ---*/
23394     +    %let PUBLISH=;          /*--- ignore for now ---*/
23395     +    %let EM_LIB=&lib ;      /*--- used by the macro */
23397     +    %if &EM_REPORT_NODES ne SUMMARY %then %do;
23398     +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=&EM_REPORT_NODES);
23399     +    %end;
23400     +    %else %do;
23401     +        %EM_PATH(nodeid=&startnodeid, outds=emreportpath, nodes=PATH);
23402     +    %end;
23404     +    data emreportpath;
23405     +        set emreportpath;
23406     +        rename nodelabel=nodeid;
23407     +        nodeIndex = _n_;
23408     +    run;
23410     +    /*--- 6. create new tagset templates needed for tree, icicle and pie charts */
23412     +    *** create new style template to address fonts in ods text;
23414     +    ods path(prepend) work.templat(update);
23415     +    proc template ;
23416     +        define style styles.em_style / store=work.templat;
23417     +        parent= styles.&EM_REPORT_STYLE;
23419     +            style usertext from usertext /
23420     +                foreground=black font_size=&EM_REPORT_TITLE_SIZE pt font_face="&EM_REPORT_TEXT_FONT" font_weight=bold
23421     +            ;
23422     +            style systemtitle from systemtitle /
23423     +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
23424     +              fontsize=&EM_REPORT_TITLE_SIZE pt font_face="&EM_REPORT_TEXT_FONT" font_weight=bold
23425     +            ;
23426     +            style systemfooter from systemfooter /
23427     +              color=colors("systitlefg") backgroundcolor=colors("systitlebg")
23428     +              font_face="&EM_REPORT_TEXT_FONT"
23429     +            ;
23430     +            style GraphFonts from GraphFonts /
23431     +                'GraphTitleFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
23432     +                'GraphTitle1Font'   = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
23433     +                'GraphLabelFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_HEADER_SIZE pt)
23434     +                'GraphFootnoteFont' = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23435     +                'GraphValueFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23436     +                'GraphDataFont'     = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23437     +            ;
23438     +            style Fonts from Fonts/
23439     +                'TitleFont'           = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
23440     +                'TitleFont2'          = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TITLE_SIZE pt)
23441     +                'StrongFont'          = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23442     +                'EmphasisFont'        = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23443     +                'headingFont'         = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23444     +                'headingEmphasisFont' = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23445     +                'FixedEmphasisFont'   = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23446     +                'FixedStrongFont'     = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23447     +                'FixedHeadingFont'    = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23448     +                'FixedFont'           = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23449     +                'BatchFixedFont'      = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23450     +                'docFont'             = ("&EM_REPORT_TEXT_FONT", &EM_REPORT_TEXT_SIZE pt)
23451     +            ;
23452     +            style GraphTitleText from GraphTitleText / font_face="&EM_REPORT_TEXT_FONT";
23453     +            style data           from data           / font_size=&EM_REPORT_TEXT_SIZE pt;
23454     +            style header         from header         / font_size=&EM_REPORT_HEADER_SIZE pt;
23455     +            style rowheader      from header;
23456     +        end;
23457     +    run; quit;
23459     +    /*--- 7. start report / destination configurations ---*/
23461     +    *** options for page layout;
23462     +    options nodate nocenter number ls=97 ;
23464     +    *** get file name;
23465     +    %EM_GETNAME(key=REPORT, type=FILE, extension=&EM_REPORT_FORMAT);
23466     +    %let file = &EM_USER_REPORT;
23468     +    *** turn off LISTING and turn on the specified destination;
23469     +    ods listing close;
23470     +    ods graphics / height=4.5in;
23471     +    ods &EM_REPORT_FORMAT file="&file" style=styles.em_style
23472     +        %if &EM_REPORT_FORMAT eq PDF %then %do; startpage=NO uniform NOTOC %end;
23473     +        %if &EM_REPORT_FORMAT eq RTF %then %do; startpage=NEVER BODYTITLE  %end;
23474     +    ;
23476     +    *** titles and footnotes;
23477     +    ods &EM_REPORT_FORMAT text=" ";
23478     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
23479     +        ods &EM_REPORT_FORMAT text="&EM_REPORT_TITLE";
23480     +    %end;
23481     +    %else %do;
23482     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))";
23483     +    %end;
23485     +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1 "&EM_REPORT_FOOTNOTE1"; %end;
23486     +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2 "&EM_REPORT_FOOTNOTE2"; %end;
23488     +    /*--- 8. verify that valid flow exists for SUMMARY (RPM) report ---*/
23489     +    /*--- if not, SUMMARY style report can not be generated and PATH report will be done instead ---*/
23491     +    %EM_REPORT_validSummaryPath(startNodeID = &startNodeID);
23493     +    %if ((&EM_REPORT_NODES eq SUMMARY ) AND(&RPM_REPORT_VALIDSUMMARY eq 1))%then %do;
23494     +        %local hprpm_hpassess;
23495     +        %let   hprpm_hpassess = &em_lib..&RPM_REPORT_MODELNODE._hpassess;
23496     +        %if %sysfunc(exist(&hprpm_hpassess)) %then %do;
23497     +            filename temp catalog 'sashelp.hpdm.hpdm_scorecard.source'; %include temp; filename temp;
23498     +            %EM_REPORT_SUMMARY(runHP=1);
23499     +        %end;
23500     +        %else %do;
23501     +            %EM_REPORT_SUMMARY(runHP=0);
23502     +        %end;
23503     +        %goto create_endline;
23504     +    %end;
23505     +    %else %do;
23506     +        %if &EM_REPORT_NODES eq SUMMARY %then %let EM_REPORT_NODES= PATH;
23507     +    %end;
23509     +    /*--- 9. output report information (header of the report)---*/
23511     +    ods proclabel "%sysfunc(sasmsg(sashelp.dmine, rpt_reportinfo_title, NOQUOTE))";
23512     +    data _null_;
23513     +        call symput('report_date', %nrbquote(strip(put(date(),     NLDATE.))));
23514     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
23515     +    run;
23517     +    data _null_;
23518     +        file print ;
23519     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
23520     +        %if ((&EM_REPORT_SUPPRESS_DATE eq ) OR (%index(&EM_REPORT_SUPPRESS_DATE, Y) < 1)) %then %do;
23521     +            put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
23522     +        %end;
23523     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
23524     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
23525     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
23526     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
23527     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
23528     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &EM_REPORT_showall))" /;
23529     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
23530     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &EM_REPORT_STYLE))" /;
23531     +    run ;
23533     +    /*--- 10. generate the workspace plot ---*/
23535     +    %em_report_workspace_xml;
23536     +    %em_getname(key=PFD, type=FILE, extension=XML);
23537     +    %em_report_makeds(&EM_USER_PFD, xmldata);
23538     +    %em_report_workspace_render;
23540     +    /*--- 11. identify the nodes to report                                  ---*/
23541     +    /*--- merged and modified from three previous macros:                   ---*/
23542     +    /*--- EM_REPORT_PATH, EM_REPORT_PREDECESORS EM_REPORT_PREDECESORS_COUNT ---*/
23544     +    %global EM_REPORT_NODENUM EM_REPORT_NODELIST;
23545     +    %let EM_REPORT_NODENUM = 0;
23547     +    %if &EM_REPORT_NODES eq PATH or &EM_REPORT_NODES eq ALL
23548     +    %then %do;
23549     +        %if %sysfunc(exist(emreportpath)) %then %do;
23550     +            proc sql noprint;
23551     +                select count(*) into :EM_REPORT_NODENUM
23552     +                    from emreportpath where nodeID ne " ";
23553     +                %if &EM_REPORT_NODENUM gt 0 %then %do;
23554     +                    select strip(nodeID) into :EM_REPORT_NODELIST separated by ' '
23555     +                        from emreportpath where nodeID ne " " order by nodeIndex;
23556     +                %end;
23557     +            quit;
23558     +        %end;
23559     +    %end;
23560     +    %else %if &EM_REPORT_NODES eq PREDECESSOR
23561     +    %then %do ;
23562     +        proc sql noprint;
23563     +            select count(*) into :EM_REPORT_NODENUM
23564     +                from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq upcase(strip("&startnodeid"));
23565     +            %if &EM_REPORT_NODENUM gt 0 %then %do;
23566     +                select strip(from) into :EM_REPORT_NODELIST separated by ' '
23567     +                    from &EM_REPORT_LIB..em_dgraph where upcase(strip(to)) eq upcase(strip("&startnodeid"));
23568     +            %end;
23569     +        quit;
23570     +    %end;
23571     +    %else %if &EM_REPORT_NODES eq 0 %then %do;
23572     +        %let EM_REPORT_NODENUM = 1;
23573     +        %let EM_REPORT_NODELIST = &startnodeid;
23574     +    %end;
23576     +    %if &EM_REPORT_NODENUM gt 0 %then %do;
23577     +        %do n = 1 %to &EM_REPORT_NODENUM;
23578     +            %EM_REPORT_NODE(nodeid=%scan(&EM_REPORT_NODELIST,&n,' '));
23579     +        %end;
23580     +    %end;
23582     +    /*--- 12. close report and ODS destinations---*/
23584     +    %create_endline:;
23586     +    data _NULL_ ;
23587     +        file print;
23588     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_endreport_note, NOQUOTE))" ;
23589     +    run;
23591     +    title1; title2; title3 ;
23592     +    %if "&EM_REPORT_FOOTNOTE1" ne "" %then %do; footnote1; %end;
23593     +    %if "&EM_REPORT_FOOTNOTE2" ne "" %then %do; footnote2; %end;
23594     +    ods graphics / reset=height;
23595     +    ods listing;
23596     +    ods &EM_REPORT_FORMAT close;
23598     +%mend EM_REPORT_CREATE ;
23600     +/*---------------------------------------------------------*/
23601     + * EM_REPORT_NODE ;
MPRINT(TRAIN):   * EM_REPORT_NODE ;
23602     + *     create a report for a node on an EM diagram ;
MPRINT(TRAIN):   * create a report for a node on an EM diagram ;
23603     +/*---------------------------------------------------------*/
23604     +%macro EM_REPORT_NODE(nodeid=) ;
23606     +    %if not %sysfunc(exist(&em_report_lib..&nodeid._emreport))
23607     +    %then %do ;
23608     +        %put NOTE: Node report data set (&em_report_lib..&nodeid._emreport) is not defined.;
23609     +        %goto node_skip;
23610     +    %end ;
23612     +    /*--- 1. set global parameters ---*/
23614     +    %global EM_REPORT_NODEID EM_REPORT_KEY_WHERECLAUSE
23615     +            EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3
23616     +    ;
23617     +    %let EM_REPORT_NODEID= &nodeid ;
23619     +    /*--- 2. preparations: Node Text; Path; Notes; Num of Prev. Nodes ---*/
23621     +    /* 2.1 get node text;*/
23622     +    %EM_REPORT_NODE_TEXT(&nodeid) ;
23624     +    /* 2.2 get the em path to this node;*/
23625     +    %EM_gettrainpath(nodeid=&nodeid,outpath=_tmp_emrnp);
23627     +    %if %sysfunc(exist(_tmp_emrnp))
23628     +    %then %do;
23629     +        data _null_;
23630     +            set _tmp_emrnp end=eof ;
23631     +            length path $1000 ;
23632     +            retain path ' ';
23633     +            if _n_ eq 1
23634     +                then path = strip(nodelabel) ;
23635     +                else path = strip(path) !! " => " !! strip(nodelabel);
23636     +            if eof then call symput('print_path', strip(path));
23637     +        run;
23638     +    %end ;
23639     +    %else %do;
23640     +        %let print_path= Unknown;
23641     +    %end ;
23643     +    /* 2.3 retrieve location of notes file;*/
23644     +    %let temp = %nrbquote(%sysfunc(pathname(&EM_REPORT_LIB)));
23645     +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
23646     +    %let file = EMNOTES.txt;
23647     +    %let notesfile = %nrbquote(&path&em_dsep&nodeid&em_dsep&file);
23649     +    /* 2.4 predecessor node counts */
23650     +    proc sql noprint;
23651     +        select count(*) into :EM_REPORT_PREDECESSORS_COUNT
23652     +            from &EM_REPORT_LIB..EM_DGRAPH where upcase(strip(to)) eq upcase(strip("&nodeid"));
23653     +    quit;
23655     +    %if ((&EM_REPORT_PREDECESSORS_COUNT eq 0) or (&EM_REPORT_NODES eq 0) or (&EM_REPORT_NODES eq PREDECESSOR))
23656     +        %then %let varlist=1;
23657     +        %else %let varlist=0;
23659     +    %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP
23660     +        %then %let varlist = 0;
23662     +    /*--- 3. beginning section of a node report ---*/
23664     +    /* 3.1 force page break at the beginning of each node */
23666     +    /* sample output of a beginning section
23667     +        -----------------------------------
23668     +        -  SAS Enterprise Miner Report    -
23669     +        -                                 -
23670     +        -  Node=Regression                -
23671     +        -  Summary                        -
23672     +        -                                 -
23673     +        -  Node id = Reg                  -
23674     +        -  Node label = Regression        -
23675     +        -  Meta Path = Ids => Part => Reg -
23676     +        -  Notes =                        -
23677     +        -----------------------------------*/
23679     +    ods &EM_REPORT_FORMAT startpage=now;
23681     +    ods &EM_REPORT_FORMAT text=" ";
23682     +    %if "&EM_REPORT_TITLE" ne ""
23683     +        %then %do; ods &EM_REPORT_FORMAT text= "&EM_REPORT_TITLE"; %end;
23684     +        %else %do; ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
23686     +    ods &EM_REPORT_FORMAT text=" ";
23687     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
23688     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_summary_title, NOQUOTE))";
23690     +    data _null_ ;
23691     +        file print;
23692     +        put " ";
23693     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodeid_vlabel,   NOQUOTE, &nodeid));                         put "&note";
23694     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnodelbl_vlabel,  NOQUOTE, %nrbquote(&em_report_node_text))); put "&note";
23695     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptmetapath_vlabel, NOQUOTE, &print_path));                     put "&note";
23696     +        %let note = %sysfunc(sasmsg(sashelp.dmine, rpt_rptnotes_vlabel,    NOQUOTE));                                  put "&note";
23697     +        put " ";
23698     +    run;
23700     +    %if "&notesfile" ne "" %then %do;
23701     +        filename x "&notesfile" encoding='utf-8' NOBOM;
23702     +        data _null_;
23703     +            length string $1000;
23704     +            file PRINT;
23705     +            fid = fopen('x');
23706     +            do while (^fread(fid));
23707     +                rc= fget(fid, string, frlen(fid));
23708     +                string = tranwrd(string, "'", "''");
23709     +                if string eq '' then string = ' ';
23710     +                put string;
23711     +            end;
23712     +            fid = fclose(fid);
23713     +            put " ";
23714     +        run;
23715     +        filename x;
23716     +    %end;
23718     +    /*--- 4. property table of a node report ---*/
23719     +    %EM_REPORT_PROPERTIES(catalog=&em_report_lib..&nodeid, dsname=properties);
23721     +    /*--- 5. datasource table of a node report ---*/
23722     +    %if &varlist eq 1 and %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT)) %then %do;
23723     +        %EM_REPORT_DATASOURCE;
23724     +    %end;
23726     +    /*--- 6. varlist table of a node report ---*/
23727     +    %EM_REPORT_VARS(varlist=&varlist) ;
23729     +    /* --- 7. the itemized output of EMREPORT TLFs ---*/
23731     +    /* 7.1 get number of items */
23732     +    proc sql noprint;
23733     +        select max(ID) into: numitems from &em_report_lib..&nodeid._emreport;
23734     +    quit;
23736     +    /* 7.2 define and initialize global KEYs */
23737     +    proc sql noprint;
23738     +        select count(distinct key) into :allnumkeys
23739     +            from &em_report_lib..&nodeid._emreport;
23740     +        select distinct key into :allnamekey1-:allnamekey%left(&allnumkeys)
23741     +            from &em_report_lib..&nodeid._emreport;
23742     +    quit;
23744     +    %do i = 1 %to &allnumkeys;
23745     +        %global EM_REPORT_KEY_&&&allnamekey&i;
23746     +        %let EM_REPORT_KEY_&&&allnamekey&i = ;
23747     +    %end;
23748     +    %global EM_REPORT_KEY_YREF EM_REPORT_KEY_XREF EM_REPORT_KEY_Y EM_REPORT_KEY_Y2 EM_REPORT_KEY_X
23749     +            EM_REPORT_KEY_LATTICEY EM_REPORT_KEY_LATTICEX EM_REPORT_KEY_WHERE EM_REPORT_KEY_SUBGROUP
23750     +            EM_REPORT_KEY_FREQUENCY EM_REPORT_KEY_GROUP EM_REPORT_KEY_Y2REF EM_REPORT_KEY_LATTICETYPE
23751     +            EM_REPORT_KEY_ORIENTATION
23752     +    ;
23753     +    %let EM_REPORT_KEY_AUTODISPLAY = N;
23754     +    %let EM_REPORT_KEY_XREF        = ;
23755     +    %let EM_REPORT_KEY_YREF        = ;
23756     +    %let EM_REPORT_KEY_Y2REF       = ;
23757     +    %let EM_REPORT_KEY_X           = ;
23758     +    %let EM_REPORT_KEY_Y           = ;
23759     +    %let EM_REPORT_KEY_Y2          = ;
23760     +    %let EM_REPORT_KEY_LATTICEX    = ;
23761     +    %let EM_REPORT_KEY_LATTICEY    = ;
23762     +    %let EM_REPORT_KEY_WHERE       = ;
23763     +    %let EM_REPORT_KEY_SUBGROUP    = ;
23764     +    %let EM_REPORT_KEY_FREQUENCY   = ;
23765     +    %let EM_REPORT_KEY_GROUP       = ;
23766     +    %let EM_REPORT_KEY_LATTICETYPE = ;
23767     +    %let EM_REPORT_KEY_ORIENTATION = ;
23769     +    /* 7.3 loop over items in the EM_REPORT dataset */
23771     +    %do index = 1 %to &numitems ;
23773     +        /* 7.3.1 initialize all key macro variables for each item */
23775     +        %do i = 1 %to &allnumkeys;
23776     +            %let EM_REPORT_KEY_&&&allnamekey&i = ;
23777     +        %end;
23778     +        %let EM_REPORT_KEY_AUTODISPLAY = N;
23779     +        %let EM_REPORT_KEY_WHERE       = ;
23780     +        %let EM_REPORT_KEY_WHERECLAUSE = ;
23781     +        %let EM_REPORT_TTL1            = ;
23782     +        %let EM_REPORT_TTL2            = ;
23783     +        %let EM_REPORT_TTL3            = ;
23784     +        %let EM_REPORT_KEY_XREF        = ;
23785     +        %let EM_REPORT_KEY_YREF        = ;
23786     +        %let EM_REPORT_KEY_Y2REF       = ;
23787     +        %let EM_REPORT_KEY_X           = ;
23788     +        %let EM_REPORT_KEY_Y           = ;
23789     +        %let EM_REPORT_KEY_Y2          = ;
23790     +        %let EM_REPORT_KEY_LATTICEX    = ;
23791     +        %let EM_REPORT_KEY_LATTICEY    = ;
23792     +        %let EM_REPORT_KEY_SUBGROUP    = ;
23793     +        %let EM_REPORT_KEY_FREQUENCY   = ;
23794     +        %let EM_REPORT_KEY_GROUP       = ;
23795     +        %let EM_REPORT_KEY_LATTICETYPE = ;
23796     +        %let EM_REPORT_KEY_ORIENTATION = ;
23798     +        %let item_skip_code = 1;
23800     +        data _null_;
23801     +            set &em_report_lib..&nodeid._emreport(where=(id eq &index));
23802     +            call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
23803     +        run;
23805     +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLESCATTER"
23806     +            %then %let EM_REPORT_KEY_VIEWTYPE = SCATTER;
23808     +        /* special treatment for EM_REPORT_KEY_Y in overlaid line plot */
23809     +        %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT" or "&EM_REPORT_KEY_VIEWTYPE" eq "SCATTER"
23810     +            or "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"
23811     +            or "&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT" or "&EM_REPORT_KEY_LATTICETYPE" eq "PLOT"
23812     +        %then %do;
23813     +            proc sql noprint;
23814     +                select distinct value into :EM_REPORT_KEY_Y separated by ' '
23815     +                    from &em_report_lib..&nodeid._emreport(where=(id eq &index))
23816     +                    where upcase(key) eq "Y";
23817     +            quit;
23818     +        %end;
23820     +        %put ==&INDEX : Viewtype = &EM_REPORT_KEY_VIEWTYPE &EM_REPORT_KEY_DESCRIPTION ;
23822     +        /* 7.3.2 set EM_REPORT_KEY_WHERE as EM_REPORT_KEY_WHERECLAUSE */
23824     +        %if "&EM_REPORT_KEY_WHERECLAUSE" ne "" and "&EM_REPORT_KEY_WHERE" eq ""
23825     +        %then %do;
23826     +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERECLAUSE);
23827     +        %end;
23828     +        %else %if "&EM_REPORT_KEY_WHERECLAUSE" eq "" and "&EM_REPORT_KEY_WHERE" ne ""
23829     +        %then %do;
23830     +            %let EM_REPORT_KEY_WHERE = %str(&EM_REPORT_KEY_WHERE);
23831     +        %end;
23832     +        %else %do;
23833     +            %let EM_REPORT_KEY_WHERE = ;
23834     +        %end;
23836     +        %if "&EM_REPORT_KEY_WHERE" ne "" %then %do;
23837     +            %let EM_REPORT_KEY_WHERECLAUSE = %str((where=(&EM_REPORT_KEY_WHERE)));
23838     +        %end;
23840     +        /* 7.3.3 skip this TLF item if the source data set does not exist */
23841     +        %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_KEY_FILE)) %then %do;
23842     +            %let item_skip_code = 0;
23843     +        %end;
23845     +        /* 7.3.4 skip the TLF item as documented in the previous version of the macro */
23846     +        /*       or just print the TLF item as documented, or use special macros      */
23848     +        data _null_;
23849     +            format type $100. desc $200.;
23850     +            type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
23851     +            desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
23853     +            if  (type in ('SCATTER')   and desc in ('STATPLOT' 'RULEPATHITEM' 'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN'))
23854     +             or (type in ('PLOT')      and desc in ('SEASON' 'TREND' 'CORRSTAT' 'DECOMP'))
23855     +             or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID' 'CROSSCCFMAP' 'CROSSCCFNORMMAP'))
23856     +             or (type in ('BAR')       and desc in ('VIP' 'ABSESTIMATE' 'ABSSTDESTIMATE' 'PRINCOEFFPLOT'))
23857     +             or (type in ('LATTICE')   and desc in ('ESTIMATEGRID' 'ASSESSRANKGRID' 'CORRPLOT'))
23858     +                then call symput('item_skip_code','2');
23860     +            /* ASSESSRANKGRID : content handled in %EM_REPORT_PLOT - from old macro comments*/
23861     +            /* CORRPLOT: empty macro report_corrplot in old macro */
23863     +            if  (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR'))
23864     +             or (type in ('BAR')       and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT'))
23865     +             or (type in ('LATTICE')   and desc in ('CHIPLOT' 'WORTH'))
23866     +                then call symput('item_skip_code','3');
23868     +            if (type in ('PLOT')    and desc in ('ASSESSRANKOVERLAY'))
23869     +                then call symput('item_skip_code','4');
23870     +            if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY'))
23871     +                then call symput('item_skip_code','5');
23873     +            if (type in ('PLOT') and desc in ('EVENTPLOT'))
23874     +                then call symput('item_skip_code','6');
23876     +            if (type in ('LATTICE') and desc in ('CLASSSTAT'))
23877     +                then call symput('EM_REPORT_KEY_VIEWTYPE','DATA');
23879     +            if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST'))
23880     +                then call symput('item_skip_code','7');
23881     +            if (type in ('LATTICE') and desc in ('SCOREDIST'))
23882     +                then call symput('item_skip_code','8');
23883     +            if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY'))
23884     +                then call symput('item_skip_code','9');
23886     +            if (type in ('PLOT') and desc in ('HPDMASSESS'))
23887     +                then call symput('item_skip_code','10');
23889     +            if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE' 'TSDISTANCEMAP'))
23890     +                then call symput('item_skip_code','11');
23892     +        run;
23894     +        /* 7.3.5 */
23896     +        %EM_REPORT_GTT;
23898     +        /********** actions by item_skip_code ***********************************/
23900     +        %if &item_skip_code eq 2 %then %do;
23901     +            /* TLF is skipped for these types of reports */
23902     +        %end;
23903     +        %else
23904     +        %if &item_skip_code eq 3 %then %do;
23905     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23906     +                /* just a print */
23907     +                title1 "&EM_REPORT_TTL1";
23908     +                title2 "&EM_REPORT_TTL2";
23909     +                title3 "&EM_REPORT_TTL3";
23910     +                ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE))";
23911     +                proc print data=&EM_REPORT_LIB..&EM_REPORT_KEY_FILE noobs label contents='';
23912     +                run;
23913     +            %end;
23914     +        %end;
23915     +        %else
23916     +        %if &item_skip_code eq 4 %then %do;
23917     +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=no);
23918     +        %end;
23919     +        %else
23920     +        %if &item_skip_code eq 5 %then %do;
23921     +            %EM_REPORT_EMRANK(pdat=&em_report_lib..&EM_REPORT_KEY_FILE,lattice=yes);
23922     +        %end;
23923     +        %else
23924     +        %if &item_skip_code eq 6 %then %do;
23925     +            %EM_REPORT_EVENTPLOT;
23926     +        %end;
23927     +        %else
23928     +        %if &item_skip_code eq 7 %then %do;
23929     +            %if %substr(%upcase(%sysfunc(strip(&nodeid))),1,7) ne MDLCOMP or &EM_REPORT_NODES eq PREDECESSOR %then %do;
23930     +                %EM_REPORT_SCOREDIST;
23931     +            %end;
23932     +        %end;
23933     +        %else
23934     +        %if &item_skip_code eq 8 %then %do;
23935     +            %EM_REPORT_SCOREDIST2;
23936     +        %end;
23937     +        %else
23938     +        %if &item_skip_code eq 9 %then %do;
23939     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23940     +                %EM_REPORT_CLASSIFYTAB;
23941     +            %end;
23942     +        %end;
23943     +        %else
23944     +        %if &item_skip_code eq 10 %then %do;
23945     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
23946     +                %EM_REPORT_HPDMASSESS;
23947     +            %end;
23948     +        %end;
23949     +        %else
23950     +        %if &item_skip_code eq 11 %then %do;
23951     +                %EM_REPORT_HEATMAPTEMPLATE;
23952     +        %end;
23955     +        %else
23957     +        %if &item_skip_code eq 1 %then %do;
23959     +            /*--- process the viewtypes ---*/
23960     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PLOT"           %then %do; %EM_REPORT_SGPLOT(type=PLOT);     %end;
23961     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LINEPLOT"       %then %do; %EM_REPORT_SGPLOT(type=LINEPLOT); %end;
23962     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "SCATTER"        %then %do; %EM_REPORT_SGPLOT(type=SCATTER);  %end;
23963     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "BAR"            %then %do; %EM_REPORT_SGPLOT(type=BARPLOT);  %end;
23964     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "HISTOGRAM"      %then %do; %EM_REPORT_SGPLOT(type=HISTOGRAM);%end;
23965     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "PIE"            %then %do; %EM_REPORT_SGSILK(type=PIE);      %end;
23966     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DTREE"          %then %do; %EM_REPORT_SGSILK(type=DTREE);    %end;
23967     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ICICLE"         %then %do; %EM_REPORT_SGSILK(type=ICICLE);   %end;
23968     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DENDROGRAM"     %then %do; %EM_REPORT_DENDROGRAM;            %end;
23969     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "ITERATIONPLOT"  %then %do; %EM_REPORT_ITERATIONPLOT;         %end;
23970     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "DATA"           %then %do; %EM_REPORT_DATA(maxobs=100);      %end;
23971     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "MULTIPLEY2PLOT" %then %do; %EM_REPORT_MULTIPLY2PLOT;         %end;
23973     +            %if "&EM_REPORT_KEY_VIEWTYPE" eq "LATTICE" %then %do;
23974     +                ods graphics / height=9in;
23975     +                %EM_REPORT_LATTICE;
23976     +                ods graphics / height=4.5in;
23977     +            %end;
23978     +        %end;
23980     +        title1; title2; title3; title4; title5;
23981     +    %end;
23983     +%node_skip:
23985     +%mend EM_REPORT_NODE;
23987     +/*---------------------------------------------------------*/
23988     +/*---- create xml file containing pfd information      ----*/
23989     +/*---------------------------------------------------------*/
23990     +%macro em_report_workspace_xml();
23992     +    %global EM_REPORT_LIB;
23994     +    %EM_REGISTER(key=PFD, type=FILE, extension=XML);
23995     +    %EM_GETNAME(key=PFD,  type=FILE, extension=XML);
23997     +    filename x "&EM_USER_PFD" encoding="utf-8" NOBOM;
23999     +    /* Node information */
24000     +    data _null_;
24001     +        file x;
24002     +        set &EM_REPORT_LIB..EM_NODEID;
24003     +        length string $400;
24005     +        /* check for invalid characters in the node label */
24006     +        label = tranwrd(label, %nrstr("&"), %nrstr("&amp;"));
24007     +        label = tranwrd(label, %nrstr("<"), %nrstr("&lt;"));
24008     +        label = tranwrd(label, %nrstr(">"), %nrstr("&gt;"));
24009     +        label = tranwrd(label, %nrstr("'"), %nrstr("&#39;"));
24010     +        label = tranwrd(label, %nrstr('"'), %nrstr('&quot;'));
24012     +        string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'" title="',LABEL,'"></PFDNode>');
24013     +        put string;
24014     +    run;
24016     +    /* Link information */
24017     +    data _null_;
24018     +        file x mod;
24019     +        set &EM_REPORT_LIB..EM_DGRAPH(where=(TO ne ""));
24020     +        length string $400;
24022     +        string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"' toId='",TO,"'></PFDLink>");
24023     +        put string;
24024     +    run;
24026     +    filename x;
24028     +%mend em_report_workspace_xml;
24030     +/*---------------------------------------------------------*/
24031     +/* "chop" xml definitions, wrapping if over 256 bytes      */
24032     +/*---------------------------------------------------------*/
24033     +%macro em_report_makeds(XMLfile,outds);
24035     +    %local rc fileref fid max reclen;
24036     +    %let fileref=xmlref;
24037     +    %if %sysfunc(fexist(xmlref)) %then %put ERROR: Fileref XMLREF in use.;
24038     +    %else %do;
24039     +      %let rc=%sysfunc(filename(fileref,&XMLfile,,encoding='utf-8')));
24040     +      %if %sysfunc(fileref(xmlref)) ne 0 %then %put %sysfunc(sysmsg());
24041     +      %else %do;
24042     +        %let fid=%sysfunc(fopen(xmlref,i,5000,v));
24043     +        %let max=0;
24044     +         %if %sysfunc(fread(&fid)) = 0 %then %do;
24045     +            %let reclen=%sysfunc(frlen(&fid));
24046     +            %let max=&reclen;
24047     +            %do %while(%sysfunc(fread(&fid)) = 0);
24048     +               %let reclen=%sysfunc(frlen(&fid));
24049     +               %if &reclen > &max %then %let max=&reclen;
24050     +            %end;
24051     +        %end;
24052     +        %let rc=%sysfunc(fclose(&fid));
24054     +        data &outds(keep=PFDItemList);
24055     +          infile xmlref recfm=v  lrecl=&max  length=len;
24056     +          length PFDItemList $256;
24057     +          input record $varying5000. len;
24058     +          recordNum+1;
24059     +          do start=1 to len by 256 ;
24060     +             end=start+256;
24061     +             *put recordNum= start= end=;
24062     +             PFDItemList=substr(record,start,end);
24063     +             output;
24064     +          end;
24065     +        run;
24066     +        %let rc=%sysfunc(filename(fileref));
24067     +      %end;
24068     +    %end;
24069     +%mend em_report_makeds;
24071     +/*---------------------------------------------------------*/
24072     +/* render a workspace plot in the ODS destination          */
24073     +/*---------------------------------------------------------*/
24074     +%macro em_report_workspace_render;
24076     +     /*--- determine if flow was run in batch (ie all x/y coordinates are -1) ---*/
24077     +     %let runBatch = 0;
24078     +     data temp;
24079     +        set &EM_REPORT_LIB..EM_NODEID;
24080     +        if X = -1 AND Y= - 1 then delete;
24081     +     run;
24082     +     %let dsid = %sysfunc(open(work.temp));
24083     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
24084     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24086     +     %if &nobs le 1 %then %let runBatch = 1;
24088     +      title1; title2; title3;
24090     +      %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
24091     +      %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
24092     +      %let view = view.xml;
24093     +      %let viewfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
24094     +      %let datax = data.xml;
24095     +      %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
24097     +      /* make sgDataModel*/
24098     +      ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
24099     +      ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8" style=styles.em_style;
24100     +      proc sgrender data=work.xmldata template=dataonly;
24101     +          dynamic var1="PFDItemList";
24102     +      run;
24104     +      /* pfd event code */
24105     +      %if "&EM_REPORT_TITLE" ne "" %then %do;
24106     +          ods tagsets.gtl event=LayoutRegion(start)
24107     +              options(title ="&EM_REPORT_TITLE"
24108     +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))");
24109     +      %end;
24110     +      %else %do;
24111     +          ods tagsets.gtl event=LayoutRegion(start)
24112     +              options(title ="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"
24113     +                      title2="%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))");
24114     +      %end;
24116     +      %if &runBatch ne 1 %then %do;
24117     +          ods tagsets.gtl event=PFD options(pfditems="PFDItemList" id="pfdView1");
24118     +          ods tagsets.gtl event=LayoutRegion(finish);
24119     +          ods tagsets.gtl close;
24120     +          ods &EM_REPORT_FORMAT select ALL ; /* re-enable sgrender output */
24121     +          ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_processflow_title, NOQUOTE))";
24122     +          proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
24123     +      %end;
24124     +      title1; title2; title3;
24126     +%mend em_report_workspace_render;
24129     +%macro EM_REPORT_RESULTS(
24130     +    path=,              /*-- output location             ---*/
24131     +    lib=,               /*-- em workspace library        ---*/
24132     +    startnodeid=,       /*-- starting nodeid             ---*/
24133     +    showall=,           /*-- show all content Y or N     ---*/
24134     +    nodes=,             /*-- nodes to generate report on ---*/
24135     +    format=,            /*-- format for generated report ---*/
24136     +    style=              /*--- style for ODS statement    ---*/
24137     +) ;
24139     +    data _null_ ;
24140     +        call symput('report_date', strip(put(date(),     NLDATE.)));
24141     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
24142     +    run;
24144     +    data _null_;
24145     +        file print ;
24146     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
24147     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
24148     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
24149     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
24150     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
24151     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
24152     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
24153     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &EM_REPORT_SHOWALL))" / ;
24154     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
24155     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE, &EM_REPORT_GDEVICE))" ;
24156     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &STYLE))" / ;
24157     +    run ;
24159     +    /* add report view to results */
24160     +    %EM_GETNAME(key=REPORT, type=FILE, extension=&FORMAT);
24161     +    %EM_REPORT(KEY=REPORT, BLOCK=MODEL, VIEWTYPE = FILEVIEWER, autodisplay=Y, DESCRIPTION=CUSTOM);
24163     +%mend;
24165     +%macro EM_REPORT_CREATERESULTS();
24167     +    %EM_GETNAME(key=ODSRESULTS, type=FILE, extension=htm, folder=ODS);
24168     +    filename x "&EM_FILE_ODSRESULTS" nobom;
24170     +    ods listing close;
24171     +    ods html3 file=X encoding = "utf-8" style=styles.em_style;
24172     +    ods html3 text=" ";
24173     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
24174     +        ods html3 text="&EM_REPORT_TITLE";
24175     +    %end;
24176     +    %else %do;
24177     +        ods html3 text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))";
24178     +    %end;
24180     +    data _null_ ;
24181     +        call symput('report_date', strip(put(date(),     NLDATE.)));
24182     +        call symput('report_time', %nrbquote(strip(put(datetime(), NLTIME.))));
24183     +    run;
24185     +    data _null_;
24186     +        file print ;
24187     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_user_note, NOQUOTE, &sysuserid))" ;
24188     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_date_note, NOQUOTE, %nrbquote(&report_time), &report_date))" ;
24189     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_project_note, NOQUOTE, &EM_REPORT_PROJECT_TEXT)) " ;
24190     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_diagram_note, NOQUOTE, %nrstr(&EM_REPORT_DIAGRAM_TEXT)))" / ;
24191     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_startnode_note, NOQUOTE, &startnodeid))";
24192     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodelabel_note, NOQUOTE, %nrbquote(&em_report_node_text)))" ;
24193     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_nodes_note, NOQUOTE, &EM_REPORT_NODES))" ;
24194     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_showall_note, NOQUOTE, &showall))" / ;
24195     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_format_note, NOQUOTE, &EM_REPORT_FORMAT))" ;
24196     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_graphics_note, NOQUOTE, &EM_REPORT_GDEVICE))" ;
24197     +        put "%sysfunc(sasmsg(sashelp.dmine, rpt_style_note, NOQUOTE, &EM_REPORT_STYLE))" / ;
24198     +    run ;
24200     +    filename x;
24201     +    ods listing;
24202     +    ods html3 close;
24204     +    %EM_REPORT(KEY=ODSRESULTS, BLOCK=MODEL, VIEWTYPE = HTMLVIEW);
24206     +%mend EM_REPORT_CREATERESULTS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emrpm.em_modelprops.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMRPM.EM_MODELPROPS.SOURCE.
24207     +%macro em_modelprops(dgmid=, modelid=, output=%nrbquote(work.properties));
24208     +  %global mdl_emwsid mdl_modelid;
24209     +  %do;
24210     +     %let mdl_emwsid  = &dgmid;
24211     +     %let mdl_modelid = &modelid;
24212     +     %let mdl_output  = &output;
24213     +
24214     +     dm "afa c=sashelp.emrpm.modelprops.scl";
24215     +  %end;
24216     +%mend em_modelprops;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename pdffile "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf";
MPRINT(TRAIN):   filename pdffile;
NOTE: Fileref PDFFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename rtffile "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\REPORT.rtf";
MPRINT(TRAIN):   filename rtffile;
NOTE: Fileref RTFFILE has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_plotmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PLOTMACROS.SOURCE.
24217     +/*---------------------------------------------------------*/
24218     + * Utility functions:;
MPRINT(EM_REPORT_CREATE):   * Utility functions:;
24219     +/*---------------------------------------------------------*/
24221     +%macro EM_REPORT_GTT();
24223     +    %global EM_REPORT_TTL1 EM_REPORT_TTL2 EM_REPORT_TTL3 EM_REPORT_TITLE EM_REPORT_NODE_TEXT EM_REPORT_KEY_description;
24225     +    %if "&EM_REPORT_TITLE" ne "" %then %do;
24226     +        %let EM_REPORT_ttl1 = &EM_REPORT_TITLE;
24227     +    %end;
24228     +    %else %do;
24229     +        %let EM_REPORT_ttl1 = %sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE));
24230     +    %end;
24232     +    %let EM_REPORT_ttl2 = %sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)));
24234     +    %let msg0 = views_descriptions_&em_report_key_description;
24235     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
24236     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
24237     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
24238     +    %end;
24239     +    %else %do;
24240     +        %let msg2=views_descriptions_&em_report_key_description;
24241     +    %end;
24243     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
24244     +    %then %do;
24245     +        %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
24246     +    %end;
24247     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
24248     +    %then %do;
24249     +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
24250     +            %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
24251     +        %end;
24252     +    %end;
24253     +    %else %do;
24254     +        %let EM_REPORT_ttl3 = &em_report_key_description;
24255     +    %end;
24257     +    /*--- special labels ---*/
24259     +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS"
24260     +    %then %do;
24261     +       %let EM_REPORT_ttl3 = %sysfunc(sasmsg(sashelp.dmine, rpt_regressionmod_title, NOQUOTE));
24262     +    %end;
24264     +%mend;
24266     +/*---------------------------------------------------------*/
24267     +* Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
MPRINT(EM_REPORT_CREATE):   * Plots created by SGPLOT: LINEPLOT, SCATTER, PLOT, BAR;
24268     +/*---------------------------------------------------------*/
24270     +%macro EM_REPORT_SGPLOT(type=);
24272     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24274     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24276     +    /*--- EM_REPORT_SGPLOT 1. identify the plot statement ---*/
24278     +    %let axisstmt = xaxis;
24280     +    %if &type eq LINEPLOT   %then %let plotstmt = series;
24281     +    %if &type eq PLOT       %then %let plotstmt = series;
24282     +    %if &type eq SCATTER    %then %let plotstmt = scatter;
24283     +    %if &type eq BARPLOT    %then %let plotstmt = vbar;
24284     +    %if &type eq HISTOGRAM  %then %let plotstmt = histogram;
24286     +    %if "&plotstmt" eq "vbar" and "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq "HORIZONTAL"
24287     +    %then %do;
24288     +        %let plotstmt = hbar;
24289     +        %let axisstmt = yaxis;
24290     +    %end;
24291     +    /*--- EM_REPORT_SGPLOT 2. options for plot statements ---*/
24293     +    %let plotopt = ;
24295     +    %if &type eq LINEPLOT %then %do;
24296     +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
24297     +    %end;
24298     +    %else %if &type eq PLOT %then %do;
24299     +        %if "&EM_REPORT_KEY_GROUP" ne "" %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
24300     +    %end;
24301     +    %else %if &type eq SCATTER %then %do;
24302     +        %if "&EM_REPORT_KEY_GROUP" ne ""     %then %let plotopt = %str(&plotopt group = &EM_REPORT_KEY_GROUP);
24303     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt freq=&EM_REPORT_KEY_FREQUENCY);
24304     +        %let plotopt = %str(&plotopt markerattrs=(symbol=squarefilled));
24305     +    %end;
24306     +    %else %if &type eq BARPLOT %then %do;
24307     +        %let plotopt = missing;
24308     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt response=&EM_REPORT_KEY_FREQUENCY);
24309     +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_SUBGROUP);
24310     +        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_GROUP);
24311     +    %end;
24312     +    %else %if &type eq HISTOGRAM %then %do;
24313     +        %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %let plotopt = %str(&plotopt freq=&EM_REPORT_KEY_FREQUENCY);
24314     +        %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_SUBGROUP);
24315     +/*        %if "&EM_REPORT_KEY_Y" ne ""         %then %let plotopt = %str(&plotopt group=&EM_REPORT_KEY_Y);*/
24316     +    %end;
24318     +    %if "&plotopt" ne "" %then %let plotopt = %str(/ &plotopt);
24320     +    /*--- EM_REPORT_SGPLOT 3. handle _ANYNUMERIC_ or BYSET---*/
24322     +    %if &type eq PLOT and "&EM_REPORT_KEY_Y" eq "_ANYNUMERIC_" %then %do;
24324     +         proc contents data=&pdat out=_rptsgplot_temp(keep=name type) noprint;
24325     +         run;
24327     +         /*** For _ANYNUMERIC_, get the first numeric variable that is not X ***/
24328     +         data _null_;
24329     +            set _rptsgplot_temp(where=(type eq 1 and upcase(name) ne "%upcase(&EM_REPORT_KEY_X)"));
24330     +            if _n_=1 then call symput("EM_REPORT_KEY_Y", strip(name));
24331     +         run;
24332     +    %end;
24334     +    /*--- EM_REPORT_SGPLOT 4. call SGPLOT ---*/
24336     +    ods graphics / discretemax=5000;
24338     +    proc sgplot data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
24340     +        %if "&EM_REPORT_KEY_Y" ne "" and "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
24341     +            %let i = 1;
24342     +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
24343     +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
24344     +                %let i = %eval(&i+1);
24345     +                &plotstmt
24346     +                    x = &EM_REPORT_KEY_X  y = &thisY  &plotopt
24347     +                ;
24348     +            %end;
24349     +        %end;
24350     +        %if "&EM_REPORT_KEY_Y2" ne "" and "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
24351     +            &plotstmt
24352     +                x = &EM_REPORT_KEY_X  y = &EM_REPORT_KEY_Y2  &plotopt
24353     +            ;
24354     +        %end;
24355     +        %if "&type" eq "BARPLOT" %then %do;
24356     +            &plotstmt
24357     +                &EM_REPORT_KEY_X &plotopt;
24358     +            &axisstmt
24359     +                type=discrete /* discreteorder=data */
24360     +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do; display=(NOVALUES NOTICKS) %end;
24361     +            ;
24362     +        %end;
24363     +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do;
24364     +            &plotstmt
24365     +                &EM_REPORT_KEY_X &plotopt;
24366     +            &axisstmt
24367     +                %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do; display=(NOVALUES NOTICKS) %end;
24368     +            ;
24369     +        %end;
24370     +        %if "&type" eq "HISTOGRAM" and "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
24371     +            &plotstmt &EM_REPORT_KEY_X;
24372     +        %end;
24373     +        %if "&type" ne "BARPLOT" and "&type" ne "HISTOGRAM" %then %do;
24374     +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF / axis = y; %end;
24375     +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF / axis = x; %end;
24376     +        %end;
24378     +        keylegend;
24379     +    run; quit;
24381     +    %if "&EM_REPORT_KEY_DESCRIPTION" eq "REGEFFECTS" %then %do;
24382     +        %EM_REPORT_makeMultiColumn(dat=&pdat.&EM_REPORT_KEY_WHERECLAUSE, vars=effectnum variable classlevel coefficient tvalue pvalue, split=2);
24383     +    %end;
24385     +    ods graphics / discretemax=100;
24386     +    title1; title2; title3;
24388     +%mend EM_REPORT_SGPLOT;
24390     +/*---------------------------------------------------------*/
24391     +* Plots rendered by SGSILK: DTREE, ICICLE, PIE;
MPRINT(EM_REPORT_CREATE):   * Plots rendered by SGSILK: DTREE, ICICLE, PIE;
24392     +/*---------------------------------------------------------*/
24394     +%macro EM_REPORT_SGSILK(type=);
24396     +    %local temp path view datax viewfile dataxfile;
24397     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24399     +    /*--- EM_REPORT_SGSILK 1. define the XML files for view and data ---*/
24401     +    %let temp      = %nrbquote(%sysfunc(PATHNAME(&EM_REPORT_LIB)));
24402     +    %let path      = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
24403     +    %let view      = view.xml;
24404     +    %let datax     = data.xml;
24405     +    %let viewfile  = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&view);
24406     +    %let dataxfile = %nrbquote(&path&em_dsep&EM_NODEID&em_dsep&datax);
24408     +    /*--- EM_REPORT_SGSILK 2. Call SGRENGER and setup GTL tagsets---*/
24410     +    ods &EM_REPORT_FORMAT exclude SGRENDER; /* disable sgrender output to PDF */
24411     +    ods tagsets.gtl file="&viewfile" data="&dataxfile" encoding="utf-8" style=styles.em_style;
24413     +    %if &type eq DTREE %then %do;   /****** DTREE ******/
24415     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
24416     +            dynamic var1 = "&EM_REPORT_KEY_ID";
24417     +            dynamic var2 = "&EM_REPORT_KEY_PARENT";
24418     +            dynamic var3 = "&EM_REPORT_KEY_NODETEXT";
24419     +            dynamic var4 = "&EM_REPORT_KEY_NODECOLOR";
24420     +            dynamic var5 = "&EM_REPORT_KEY_ABOVETEXT";
24421     +            dynamic var6 = "&EM_REPORT_KEY_BELOWTEXT";
24422     +            dynamic var7 = "&EM_REPORT_KEY_LINKWIDTH";
24423     +        run;
24425     +        ods tagsets.gtl event=LayoutRegion(start)
24426     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
24428     +        ods tagsets.gtl event=DecisionTree
24429     +            options( id        = "&EM_REPORT_KEY_ID"
24430     +                     parent    = "&EM_REPORT_KEY_PARENT"
24431     +                     nodetext  = "&EM_REPORT_KEY_NODETEXT"
24432     +                     abovetext = "&EM_REPORT_KEY_ABOVETEXT"
24433     +                     belowtext = "&EM_REPORT_KEY_BELOWTEXT"
24434     +                     linkwidth = "&EM_REPORT_KEY_LINKWIDTH"
24435     +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR" );
24437     +    %end;
24438     +    %else %if &type eq ICICLE %then %do;      /****** ICICLE ******/
24440     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
24441     +            dynamic var1="&EM_REPORT_KEY_ID";
24442     +            dynamic var2="&EM_REPORT_KEY_PARENT";
24443     +            dynamic var3="&EM_REPORT_KEY_NODECOLOR";
24444     +            dynamic var4="&EM_REPORT_KEY_NODESIZE";
24445     +        run;
24447     +        ods tagsets.gtl event=LayoutRegion(start)
24448     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
24450     +        ods tagsets.gtl event=Icicle
24451     +            options( id        = "&EM_REPORT_KEY_ID"
24452     +                     parent    = "&EM_REPORT_KEY_PARENT"
24453     +                     nodecolor = "&EM_REPORT_KEY_NODECOLOR"
24454     +                     nodesize  = "&EM_REPORT_KEY_NODESIZE" );
24456     +    %end;
24457     +    %else %if &type eq PIE %then %do;      /****** PIE ******/
24459     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=dataonly;
24460     +            dynamic var1="&EM_REPORT_KEY_X" var2="&EM_REPORT_KEY_Y";
24461     +        run; quit;
24463     +        ods tagsets.gtl event=LayoutRegion(start)
24464     +            options(title="&EM_REPORT_TTL1" title2="&EM_REPORT_TTL2" title3="&EM_REPORT_TTL3");
24466     +        ods tagsets.gtl event=Pie
24467     +            options( category = "&EM_REPORT_KEY_X"
24468     +                     response = "&EM_REPORT_KEY_Y"
24469     +                     pielabeldisplay = "1"         );
24471     +    %end;
24473     +    ods tagsets.gtl event=LayoutRegion(finish);
24474     +    ods tagsets.gtl close;
24476     +    /*--- EM_REPORT_SGSILK 3. Call SGSILK to render the graph---*/
24478     +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
24479     +    proc sgsilk viewxml="&viewfile" dataxml="&dataxfile"; run;
24480     +    title1; title2; title3;
24481     +%mend;
24483     +/*---------------------------------------------------------*/
24484     +* DENDROGRAM <- PROC TREE;
MPRINT(EM_REPORT_CREATE):   * DENDROGRAM <- PROC TREE;
24485     +/*---------------------------------------------------------*/
24487     +%macro EM_REPORT_DENDROGRAM() ;
24489     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24491     +    *goptions device=&EM_REPORT_GDEVICE ;
24492     +    goptions reset=all device=&EM_REPORT_GDEVICE;
24494     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24496     +    axis1 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt ) ;
24497     +    axis2 minor=none label=(height = &EM_REPORT_TEXT_SIZE pt angle=90 ) ;
24499     +    ods &EM_REPORT_FORMAT select ALL; /* re-enable sgrender output */
24501     +    proc tree data=&pdat.&EM_REPORT_KEY_WHERECLAUSE horizontal haxis=axis1 vaxis=axis2;
24502     +        height &EM_REPORT_KEY_HEIGHT;
24503     +        name   &EM_REPORT_KEY_NAME;
24504     +        parent &EM_REPORT_KEY_PARENT;
24505     +    run; quit;
24507     +    title1; title2; title3 ;
24508     +    axis1; axis2;
24510     +%mend EM_REPORT_DENDROGRAM;
24512     +/*---------------------------------------------------------*/
24513     +* EVENTPLOT <- SGSCATTER;
MPRINT(EM_REPORT_CREATE):   * EVENTPLOT <- SGSCATTER;
24514     +/*---------------------------------------------------------*/
24516     +%macro EM_REPORT_EVENTPLOT();
24518     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24520     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24522     +    proc sgscatter data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
24523     +        plot (_cumulative_event_count_ _marginal_event_rate_ _event_count_ _cumulative_event_rate_)
24524     +            * _cutoff_score_ / group=datarole join=() markerattrs=(size=0) grid;
24525     +    run; quit;
24527     +    title1; title2; title3 ;
24529     +%mend EM_REPORT_EVENTPLOT;
24531     +/*---------------------------------------------------------*/
24532     + * EM_REPORT_ITERATIONPLOT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_ITERATIONPLOT ;
24533     + * create plots of iterations: neural, stepwise, tree, etc..;
MPRINT(EM_REPORT_CREATE):   * create plots of iterations: neural, stepwise, tree, etc..;
24534     +/*---------------------------------------------------------*/
24536     +%macro EM_REPORT_ITERATIONPLOT();
24538     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24539     +    %let X    = &EM_REPORT_KEY_X;
24541     +    title1 "&EM_REPORT_TTL1";
24542     +    title2 "&EM_REPORT_TTL2";
24543     +    title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_mdliterationplot_title, NOQUOTE))";
24545     +    %local _misc_ _vmisc_ _ase_ _vase_ ;
24546     +    data _null_ ;
24547     +        set &pdat(obs=2) end=eof;
24548     +        if eof then do ;
24549     +            call symput('_ase_',_ase_);
24550     +            call symput('_vase_',_vase_);
24551     +            call symput('_misc_',_misc_);
24552     +            call symput('_vmisc_',_vmisc_);
24553     +        end;
24554     +    run;
24556     +    %let dsid = %sysfunc(open(&pdat));
24557     +    %if &dsid %then %do;
24558     +        %let _ase_ = %sysfunc(VARNUM(&dsid, _ase_));
24559     +        %let _vase_ = %sysfunc(VARNUM(&dsid, _vase_));
24560     +        %let _misc_ = %sysfunc(VARNUM(&dsid, _misc_));
24561     +        %let _vmisc_ = %sysfunc(VARNUM(&dsid, _vmisc_));
24562     +    %end;
24563     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24565     +    %if "&_ase_"   eq "." %then %let _ase_   = 0;
24566     +    %if "&_vase_"  eq "." %then %let _vase_  = 0;
24567     +    %if "&_misc_"  eq "." %then %let _misc_  = 0;
24568     +    %if "&_vmisc_" eq "." %then %let _vmisc_ = 0;
24570     +    %put &_ase_ &_vase_ &_misc_ &_vmisc_;
24572     +    %if &_vmisc_ ne 0 %then %do;
24573     +        proc sql noprint;
24574     +            select count(*) into :nonMiss_vmisc from &pdat where _vmisc_ ne .;
24575     +        quit;
24576     +    %end;
24577     +    %else %do;
24578     +        %let nonMiss_vmisc = 0;
24579     +    %end;
24581     +    ods path(prepend) work.templat(update);
24582     +    proc template;
24583     +        define statgraph em.IterationPlot / store=work.templat;
24584     +            begingraph;
24585     +                entrytitle "&EM_REPORT_TTL1";
24586     +                entrytitle "&EM_REPORT_TTL2";
24587     +                entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_mdliterationplot_title, NOQUOTE))";
24589     +              layout lattice / order=columnmajor rows=1 rowdatarange=data columngutter=10;
24591     +                %if &_ase_ ne 0 or &_vase_ ne 0 %then %do;
24592     +                    layout overlay / cycleattrs=true
24593     +                        xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
24594     +                        yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, stat_ase_vlabel, NOQUOTE))");
24595     +                        %if &_ase_ ne 0 %then %do ;
24596     +                            seriesplot x=&X y=_ASE_ /  markerattrs=(size=0) display=all name='train'
24597     +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_roletrain_value, NOQUOTE))";
24598     +                        %end;
24599     +                        %if &_vase_  ne 0 %then %do ;
24600     +                            seriesplot x=&X y=_VASE_ /  markerattrs=(size=0) display=all name='validate'
24601     +                                legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rolevalidate_value, NOQUOTE))";
24602     +                        %end;
24603     +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline x=&EM_REPORT_KEY_XREF; %end;
24604     +                    endlayout;
24605     +                %end;
24607     +                %if &_misc_ ne 0 or ( &_vmisc_ ne 0 and &nonMiss_vmisc ne 0) %then %do;
24608     +                    layout overlay / cycleattrs=true
24609     +                        xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_iteration_vlabel, NOQUOTE))")
24610     +                        yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_misclassrate_vlabel, NOQUOTE))");
24611     +                        %if &_misc_ ne 0 %then %do;
24612     +                            seriesplot x=&X y=_MISC_ /  markerattrs=(size=0) display=all;
24613     +                        %end;
24614     +                        %if &_vmisc_  ne 0 %then %do ;
24615     +                            seriesplot x=&X y=_VMISC_ /  markerattrs=(size=0) display=all;
24616     +                        %end;
24617     +                        %if "&EM_REPORT_KEY_XREF" ne "" %then %do; referenceline x=&EM_REPORT_KEY_XREF; %end;
24618     +                    endlayout;
24619     +                %end;
24621     +                sidebar /  align=bottom;
24622     +                    layout overlay;
24623     +                        discretelegend 'train' 'validate' / down=1 order=columnmajor;
24624     +                    endlayout;
24625     +                endsidebar;
24626     +              endlayout;
24627     +            endgraph;
24628     +        end;
24629     +    run;
24631     +    proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmprpt_iterdat;
24632     +        by &X;
24633     +    run;
24635     +    proc sgrender data=_tmprpt_iterdat template='em.IterationPlot';
24636     +    run;
24637     +    title1; title2; title3;
24639     +    proc delete data=_tmprpt_iterdat; run;
24641     +%mend  EM_REPORT_ITERATIONPLOT;
24643     +/* for hpdmassess */
24645     +%macro EM_REPORT_HPDMASSESS();
24647     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24649     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24651     +    /*--- EM_REPORT_HPDMASSESS 1. idenfity the variables     ---*/
24653     +    %let dsid = %sysfunc(open(&pdat));
24654     +    %if &dsid %then %do;
24655     +        %let lift     = %sysfunc(VARNUM(&dsid, lift));
24656     +        %let c_lift   = %sysfunc(VARNUM(&dsid, c_lift));
24657     +        %let mean1    = %sysfunc(VARNUM(&dsid, target_mean));
24658     +        %let mean2    = %sysfunc(VARNUM(&dsid, predicted_mean));
24659     +        %let datarole = %sysfunc(VARNUM(&dsid, &EM_REPORT_KEY_GROUP));
24660     +    %end;
24661     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24663     +    %if "&lift"     eq "."  %then %let lift     = 0;
24664     +    %if "&c_lift"   eq "."  %then %let c_lift   = 0;
24665     +    %if "&mean1"    eq "."  %then %let mean1   = 0;
24666     +    %if "&mean2"    eq "."  %then %let mean2   = 0;
24667     +    %if "&datarole" eq "."  %then %let datarole = 0;
24669     +    %put &lift &c_lift &mean1 &mean2 &datarole;
24671     +    %if &lift ne 0 and &c_lift ne 0 %then %do;
24672     +        %let hpdm_plot = 1;
24673     +        %let hpdm_var1 = lift;
24674     +        %let hpdm_var2 = c_lift;
24675     +        %let hpdm_lbl1 = assmt_lift_vlabel;
24676     +        %let hpdm_lbl2 = assmt_liftc_vlabel;
24677     +    %end;
24678     +    %else
24679     +    %if &mean1 ne 0 and &mean2 ne 0
24680     +    %then %do;
24681     +        %let hpdm_plot = 1;
24682     +        %let hpdm_var1 = target_mean;
24683     +        %let hpdm_var2 = predicted_mean;
24684     +        %let hpdm_lbl1 = rpt_rpttargetmean_vlabel;
24685     +        %let hpdm_lbl2 = rpt_rptpredmean_vlabel;
24686     +    %end;
24687     +    %else %do;
24688     +        %let hpdm_plot = 0;
24689     +        %let hpdm_var1 = ;
24690     +        %let hpdm_var2 = ;
24691     +        %let hpdm_lbl1 = ;
24692     +        %let hpdm_lbl2 = ;
24693     +    %end;
24694     +    /*--- EM_REPORT_HPDMASSESS 2. call SGPANEL                ---*/
24696     +    %if &hpdm_plot eq 1 %then %do;
24697     +        ods path(prepend) work.templat(update);
24698     +        proc template;
24699     +            define statgraph em.hpdmassess / store=work.templat;
24700     +                begingraph;
24701     +                    entrytitle "&EM_REPORT_TTL1";
24702     +                    entrytitle "&EM_REPORT_TTL2";
24703     +                    entrytitle "&EM_REPORT_TTL3";
24705     +                    layout lattice / order=columnmajor rows=1 rowdatarange=data columngutter=10;
24707     +                        %if &datarole ne 0 %then %do;
24708     +                            layout overlay / cycleattrs=true
24709     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
24710     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
24711     +                            ;
24712     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 / name='var1' markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
24713     +                            endlayout;
24714     +                            layout overlay / cycleattrs=true
24715     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
24716     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl2, NOQUOTE))")
24717     +                            ;
24718     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /  markerattrs=(size=0) display=all group=&EM_REPORT_KEY_GROUP;
24719     +                            endlayout;
24720     +                            sidebar /  align = bottom;
24721     +                                layout overlay;
24722     +                                    discretelegend 'var1' / down=1 order=columnmajor;
24723     +                                endlayout;
24724     +                            endsidebar;
24725     +                        %end;
24726     +                        %else %do;
24727     +                            layout overlay / cycleattrs=true
24728     +                                             xaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel, NOQUOTE))")
24729     +                                             yaxisopts=(griddisplay=on label="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))")
24730     +                            ;
24731     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var1 /  markerattrs=(size=0) display=all name='var1'
24732     +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl1, NOQUOTE))";
24733     +                                seriesplot x=&EM_REPORT_KEY_X y=&hpdm_var2 /  markerattrs=(size=0) display=all name='var2'
24734     +                                    legendlabel="%sysfunc(sasmsg(sashelp.dmine, &hpdm_lbl2, NOQUOTE))";
24735     +                            endlayout;
24736     +                            sidebar /  align=bottom;
24737     +                                layout overlay;
24738     +                                    discretelegend 'var1' 'var2' / down=1 order=columnmajor;
24739     +                                endlayout;
24740     +                            endsidebar;
24741     +                        %end;
24742     +                    endlayout;
24743     +                endgraph;
24744     +            end;
24745     +        run;
24747     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template='em.hpdmassess'; run;
24748     +    %end;
24750     +    title1; title2; title3;
24752     +%mend EM_REPORT_HPDMASSESS;
24754     +/* for heatmap version of histograms */
24756     +%macro EM_REPORT_HEATMAPTEMPLATE();
24758     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24760     +    %if "&EM_REPORT_KEY_FREQUENCY" ne "" "&EM_REPORT_KEY_X" ne "" "&EM_REPORT_KEY_Y" ne "" %then %do;
24762     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24764     +        proc template;
24765     +        define statgraph heatmap;
24766     +        begingraph;
24767     +        entrytitle "&EM_REPORT_TTL1";
24768     +        entrytitle "&EM_REPORT_TTL2";
24769     +        entrytitle "&EM_REPORT_TTL3";
24770     +        layout overlay;
24771     +        heatmapparm x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y colorresponse=&EM_REPORT_KEY_FREQUENCY / name="map" display=all;
24772     +          continuouslegend "map";
24773     +        endlayout;
24774     +        endgraph;
24775     +        end;
24777     +        proc sgrender data=&pdat.&EM_REPORT_KEY_WHERECLAUSE template=heatmap; run;
24779     +    %end;
24781     +    title1; title2; title3;
24783     +%mend EM_REPORT_HEATMAPTEMPLATE;
24786     +/* for assessment plot */
24788     +%macro EM_REPORT_EMRANK(pdat=, lattice=no) ;
24790     +    data _tmp_dat;
24791     +        set &pdat.&EM_REPORT_KEY_WHERECLAUSE;
24792     +    run;
24793     +    %let pdat = _tmp_dat;
24795     +    %let varList = GAIN CAPC LIFTC RESPC _MEANP_ _MINP_ _MAXP_;
24796     +    %let varNum = 7;
24797     +    %let modelVar = model;
24798     +    %do k = 1 %to &varNum;
24799     +        %let thisVar = %scan(&varList,&k,' ');
24800     +        %let var_&thisVar = ;
24801     +    %end;
24803     +/*-----------------------------------------------------------------------------*/
24805     +    proc contents data=&pdat out=_tmp_content(keep=name) noprint;
24806     +    run;
24808     +    %let is_cat = 0;
24809     +    %let has_loop = 0;
24810     +    %let has_where = 0;
24812     +    data _null_;
24813     +        set _tmp_content;
24814     +        name=strip(upcase(name));
24815     +        format _tmp_list $500.;
24816     +        _tmp_list = symget('varList');
24818     +        do k = 1 to &varNum;
24819     +            if name eq scan(_tmp_list,k,' ') then call symput(cats('var_',name),name);
24820     +        end;
24822     +        if name eq '_LOOP_'  then call symput('has_loop','1');
24823     +        if name eq '_WHERE_' then call symput('has_where','1');
24824     +        if name eq 'GAIN'    then call symput('is_cat','1');
24825     +    run;
24827     +    %if &has_loop eq 1 %then %do;
24828     +        %if &has_where eq 1 %then %do;
24829     +            proc sql noprint;
24830     +                select count(*) into :nn1 from &pdat;
24831     +                select count(*) into :nn2 from &pdat where _where_ is missing;
24832     +            quit;
24833     +            %if &nn1 ne &nn2
24834     +                %then %let modelvar = _where_;
24835     +                %else %let modelvar = ;
24836     +        %end;
24837     +        %else %do;
24838     +            %let modelvar = ;
24839     +        %end;
24840     +    %end;
24842     +/*-----------------------------------------------------------------------------*/
24844     +    %if "&lattice" eq "yes" %then %do ;
24846     +        proc sql noprint;
24847     +            select count(distinct datarole)  into :ndataroles from &pdat;
24848     +            select distinct datarole into :drole1-:drole%left(&ndataroles) from &pdat;
24849     +        quit;
24851     +        %do d =1 %to &ndataroles;
24853     +            proc sort data=&pdat(where=(datarole eq "&&&drole&d")) out=_tmp_emrp;
24854     +                by &modelvar decile;
24855     +            run;
24857     +            title1 "&EM_REPORT_TTL1";
24858     +            title2 "&EM_REPORT_TTL2";
24859     +            title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_multiplemdlassess_title, NOQUOTE, &&&drole&d))";
24860     +            %if "&EM_REPORT_KEY_WHERE" ne " " %then %do;
24861     +                title4 "&EM_REPORT_KEY_WHERE";
24862     +            %end;
24864     +            proc sgscatter data=_tmp_emrp;
24865     +                plot
24866     +                    %if &is_cat eq 1 %then %do;
24867     +                        (&var_gain &var_liftc &var_capc &var__meanp_) * decile
24868     +                    %end;
24869     +                    %else %do;
24870     +                        (&var__meanp_ &var__minp_ &var__maxp_) * decile
24871     +                    %end;
24872     +                    / %if &modelvar ne %then %do; group=&modelvar %end;
24873     +                        join=() markerattrs=(size=0) grid
24874     +                ;
24875     +            run; quit;
24876     +            title1; title2; title3; title4;
24877     +        %end;
24878     +    %end;
24879     +    %else %do;
24881     +        proc sort data=&pdat out=_tmp_emrp;
24882     +            by target datarole;
24883     +        run;
24885     +        title1 "&EM_REPORT_TTL1";
24886     +        title2 "&EM_REPORT_TTL2";
24887     +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_singlemdlassess_title, NOQUOTE, &em_report_key_where))";
24889     +        %if &is_cat eq 1 %then %do;
24890     +            %if "&var_gain" ne " " %then %do;
24891     +                proc sgpanel data=_tmp_emrp;
24892     +                    panelby datarole;
24893     +                    series x=decile y=gain; series x=decile y=basegain; series x=decile y=bestgain;
24894     +                    rowaxis grid; colaxis grid;
24895     +                run; quit;
24896     +            %end;
24897     +            %if "&var_liftc" ne " " %then %do;
24898     +                proc sgpanel data=_tmp_emrp;
24899     +                    panelby datarole;
24900     +                    series x=decile y=liftc; series x=decile y=baseliftc; series x=decile y=bestliftc;
24901     +                    rowaxis grid; colaxis grid;
24902     +                run; quit;
24903     +            %end;
24904     +            %if "&var_capc" ne " " %then %do;
24905     +                proc sgpanel data=_tmp_emrp;
24906     +                    panelby datarole;
24907     +                    series x=decile y=capc; series x=decile y=basecapc; series x=decile y=bestcapc;
24908     +                    rowaxis grid; colaxis grid;
24909     +                run; quit;
24910     +            %end;
24911     +        %end;
24912     +        %else %do;
24913     +            %if "&var__meanp_" ne " " %then %do ;
24914     +                proc sgpanel data=_tmp_emrp;
24915     +                    panelby datarole;
24916     +                    series x=decile y=_meanp_; series x=decile y=_targetmean_;
24917     +                    rowaxis grid; colaxis grid;
24918     +                run; quit;
24919     +            %end;
24920     +            %if "&var__minp_" ne " " %then %do ;
24921     +                proc sgpanel data=_tmp_emrp;
24922     +                    panelby datarole;
24923     +                    series x=decile y=_minp_; series x=decile y=_targetmin_;
24924     +                    rowaxis grid; colaxis grid;
24925     +                run; quit;
24926     +            %end;
24927     +            %if "&var__maxp_" ne " " %then %do ;
24928     +                proc sgpanel data=_tmp_emrp;
24929     +                    panelby datarole;
24930     +                    series x=decile y=_maxp_; series x=decile y=_targetmax_;
24931     +                    rowaxis grid; colaxis grid;
24932     +                run; quit;
24933     +            %end;
24934     +        %end;
24936     +        title1; title2; title3;
24937     +    %end;
24939     +%mend;
24942     +%macro EM_REPORT_LATTICE();
24944     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
24946     +    %let numx = 1;
24947     +    %let numy = 1;
24949     +    proc sql noprint;
24950     +        %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do;
24951     +            select count(distinct &EM_REPORT_KEY_LATTICEX) into :numx from &pdat.&EM_REPORT_KEY_WHERECLAUSE;
24952     +        %end;
24953     +        %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do;
24954     +            select count(distinct &EM_REPORT_KEY_LATTICEY) into :numy from &pdat.&EM_REPORT_KEY_WHERECLAUSE;
24955     +        %end;
24956     +    quit;
24958     +    %let numrows=&numy;
24959     +    %let numcols=&numx;
24960     +    %let totalnum = %eval(&numx * &numy);
24962     +    %if &totalnum gt 6 %then %do;
24963     +        %if &totalnum le 18 %then %let numcols=3;
24964     +        %else %if &totalnum le 24 %then %let numcols=4;
24965     +        %else %if &totalnum le 30 %then %let numcols=5;
24966     +        %else %let numcols=3;
24967     +    %end;
24969     +    %if &totalnum gt 6 %then %do;
24970     +        %let numrows  = %sysevalf(&totalnum / &numcols);
24971     +        %let numrows  = %sysfunc(ceil(&numrows));
24972     +        %if &numrows ge 6 %then %let numrows=6;
24973     +    %end;
24975     +    %if (("&EM_REPORT_KEY_LATTICETYPE" eq "BAR") OR ("&EM_REPORT_KEY_LATTICETYPE" eq "HISTOGRAM"))
24976     +    %then %do;
24978     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
24979     +        %if "&em_report_key_whereclause" ne "" %then %do ;
24980     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, &em_report_key_where))";
24981     +        %end;
24983     +        proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
24984     +            panelby
24985     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
24986     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
24987     +              /
24988     +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows /*novarname*/ %end;
24989     +                uniscale=column
24990     +            ;
24991     +            /* originally using frequency so keeping this here; */
24992     +            /* eventrate plot in binning sets y var as response so added y as well */
24994     +            %if "&EM_REPORT_KEY_LATTICETYPE" eq "HISTOGRAM" %then %do;
24995     +                %if "&EM_REPORT_KEY_FREQUENCY" eq "" %then %do;
24996     +                    histogram &EM_REPORT_KEY_X;
24997     +                %end;
24998     +                %else %do;
24999     +                    histogram &EM_REPORT_KEY_X / freq = &EM_REPORT_KEY_FREQUENCY;
25000     +                %end;
25001     +            %end;
25002     +            %else %do;
25003     +                %if "%upcase(&EM_REPORT_KEY_ORIENTATION)" eq "HORIZONTAL"
25004     +                %then %do; hbar %end;
25005     +                %else %do; vbar %end;
25006     +                    &EM_REPORT_KEY_X /
25007     +                    %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do; response=&EM_REPORT_KEY_FREQUENCY %end;
25008     +                    %if "&EM_REPORT_KEY_Y" ne ""         %then %do; response=&EM_REPORT_KEY_Y         %end;
25009     +                    %if "&EM_REPORT_KEY_SUBGROUP" ne ""  %then %do; group=&EM_REPORT_KEY_SUBGROUP     %end;
25010     +                        %else %if "&EM_REPORT_KEY_GROUP" ne ""  %then %do; group=&EM_REPORT_KEY_GROUP %end;
25011     +                ;
25012     +            %end;
25013     +            colaxis grid fitpolicy=rotatethin /* discreteorder=data */;
25014     +            rowaxis grid ;
25015     +        run; quit;
25017     +        /* special treatments */
25018     +        %if "&EM_REPORT_KEY_DESCRIPTION" eq "EVENTRATE" %then %do ;
25019     +            %if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
25021     +                %let wtevexist=0;
25022     +                %let dsid = %sysfunc(open(work.pdl));
25023     +                %if &dsid %then %do;
25024     +                    %let wtevexist = %sysfunc(VARNUM(&dsid, wtev));
25025     +                %end;
25026     +                %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25028     +                %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
25030     +                proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label contents='';
25031     +                    var display_var _label_ _group_ role eventRate
25032     +                        %if &wtevexist ne 0 %then %do; wtev %end;;
25033     +                run;
25034     +            %end;
25035     +        %end;
25036     +    %end;
25037     +    %else %if (("&EM_REPORT_KEY_LATTICETYPE" eq "LINEPLOT") or ("&EM_REPORT_KEY_LATTICETYPE" eq "PLOT")) %then %do;
25039     +        proc sort data=&pdat.&EM_REPORT_KEY_WHERECLAUSE out=_tmp_pdl;
25040     +            by
25041     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
25042     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
25043     +            ;
25044     +        run;
25046     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
25047     +        %if "&em_report_key_whereclause" ne "" %then %do ;
25048     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, &em_report_key_where))";
25049     +        %end;
25051     +        proc sgpanel data=_tmp_pdl;
25052     +            panelby
25053     +                %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
25054     +                %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
25055     +              /
25056     +                %if &totalnum ge 5 %then %do; columns=&numcols rows=&numrows /*novarname*/ %end;
25057     +                uniscale=column
25058     +            ;
25059     +            %let i = 1;
25060     +            %do %while ("%scan(&EM_REPORT_KEY_Y,&i,' ')" ne "");
25061     +                %let thisY=%scan(&EM_REPORT_KEY_Y,&i,' ');
25062     +                %let i = %eval(&i+1);
25063     +                series x=&EM_REPORT_KEY_X y=&thisY
25064     +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; / group=&EM_REPORT_KEY_GROUP %end;
25065     +                ;
25066     +            %end;
25067     +            %if "&EM_REPORT_KEY_Y2" ne "" %then %do;
25068     +                series x=&EM_REPORT_KEY_X y=&EM_REPORT_KEY_Y2
25069     +                    %if "&EM_REPORT_KEY_GROUP" ne "" %then %do; / group=&EM_REPORT_KEY_GROUP %end;
25070     +                ;
25071     +            %end;
25072     +            %if "&EM_REPORT_KEY_YREF" ne "" %then %do; refline &EM_REPORT_KEY_YREF / axis = y; %end;
25073     +            %if "&EM_REPORT_KEY_XREF" ne "" %then %do; refline &EM_REPORT_KEY_XREF / axis = x; %end;
25074     +            colaxis grid fitpolicy=rotatethin;
25075     +            rowaxis grid;
25076     +        run; quit;
25077     +    %end;
25079     +%mend EM_REPORT_LATTICE;
25081     +/*---------------------------------------------------------*/
25082     + * EM_REPORT_SCOREDIST2 ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST2 ;
25083     + *     Score Distribution 2;
MPRINT(EM_REPORT_CREATE):   * Score Distribution 2;
25084     +/*---------------------------------------------------------*/
25086     +%macro EM_REPORT_SCOREDIST2() ;
25088     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
25090     +    title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
25092     +    proc sgpanel data=&pdat.&EM_REPORT_KEY_WHERECLAUSE;
25093     +        panelby
25094     +            %if "&EM_REPORT_KEY_LATTICEY" ne "" %then %do; &EM_REPORT_KEY_LATTICEY %end;
25095     +            %if "&EM_REPORT_KEY_LATTICEX" ne "" %then %do; &EM_REPORT_KEY_LATTICEX %end;
25096     +          / rows=1 uniscale=row layout=lattice
25097     +        ;
25098     +        vbar &EM_REPORT_KEY_X
25099     +            %if "&EM_REPORT_KEY_FREQUENCY" ne "" %then %do; / response=count %end;
25100     +        ;
25101     +        colaxis fitpolicy=rotatethin;
25102     +    run; quit;
25104     +%mend EM_REPORT_SCOREDIST2;
25106     +/*---------------------------------------------------------*/
25107     + * EM_REPORT_SCOREDIST ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_SCOREDIST ;
25108     + *     Score Distribution ;
MPRINT(EM_REPORT_CREATE):   * Score Distribution ;
25109     +/*---------------------------------------------------------*/
25111     +%macro EM_REPORT_SG4SCOREDIST(y1=,y2=,str1=,str2=,rowstr=);
25112     +    proc sgpanel data=_tmpdat;
25113     +        panelby datarole;
25114     +        %if "&y1" ne " " %then %do;
25115     +            series x=score y=&y1 / legendlabel="%sysfunc(sasmsg(sashelp.dmine, &str1, NOQUOTE))";
25116     +        %end;
25117     +        %if "&y2" ne " " %then %do;
25118     +            series x=score y=&y2 / legendlabel="%sysfunc(sasmsg(sashelp.dmine, &str2, NOQUOTE))";
25119     +        %end;
25120     +        rowaxis grid label="%sysfunc(sasmsg(sashelp.dmine, &rowstr, NOQUOTE))";
25121     +        colaxis grid;
25122     +    run; quit;
25123     +%mend;
25125     +%macro EM_REPORT_SCOREDIST(data=) ;
25127     +    data _tmp_scoredist;
25128     +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
25129     +    run;
25131     +    proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum name) noprint;
25132     +    run;
25134     +    /*--------------------------------------------------------------------------*/
25136     +    %let var_targetMean = ;
25137     +    %let var_targetMax = ;
25138     +    %let var_targetMin = ;
25139     +    %let is_cat = 0;
25140     +    %let modeldescnum = 0;
25141     +    %let loopnum = 0;
25142     +    %let has_where = 0;
25143     +    %let has_target = 0;
25145     +    data _null_;
25146     +        set _tmp_content;
25147     +        name=strip(upcase(name));
25148     +        if name eq 'MODELDESCRIPTION'   then call symput('modeldescnum',  put(varnum,6.));
25149     +        if name eq '_LOOP_'             then call symput('loopnum',       put(varnum,6.));
25150     +        if name eq '_WHERE_'            then call symput('has_where',     '1');
25151     +        if name eq '_TARGET_'           then call symput('has_target',    '1');
25152     +        if name eq '_TARGETMEAN_'       then call symput('var_targetMean',name);
25153     +        if name eq '_TARGETMAX_'        then call symput('var_targetMax', name);
25154     +        if name eq '_TARGETMIN_'        then call symput('var_targetMin', name);
25155     +        if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat',        '1');
25156     +    run;
25158     +    /*--------------------------------------------------------------------------*/
25160     +    %if (&modeldescnum eq 0) and (&loopnum eq 0) %then %do;
25161     +        %let modelvar = ;
25162     +        %let nmodels = 1;
25163     +        %let modeldat1 = _tmp_scoredist;
25164     +    %end;
25165     +    %else %do;
25167     +        %if &loopnum gt 0
25168     +            %then %do;
25169     +                proc sql noprint;
25170     +                    select count(*) into :nn1 from _tmp_scoredist;
25171     +                    select count(*) into :nn2 from _tmp_scoredist where _where_ is missing;
25172     +                quit;
25173     +                %if &nn1 ne &nn2
25174     +                    %then %let modelvar = _where_;
25175     +                    %else %let modelvar = target;
25176     +            %end;
25177     +            %else %let modelvar = model;
25179     +        %let nmodels = 1;
25180     +        proc sql noprint;
25181     +            select count(distinct &modelvar) into :nmodels from _tmp_scoredist;
25182     +            select distinct &modelvar into :cond1-:cond%left(&nmodels) from _tmp_scoredist;
25183     +        quit;
25185     +        %do d = 1 %to &nmodels;
25186     +            %let modeldat&d = %str(_tmp_scoredist(where=(&modelvar eq "&&&cond&d")));
25187     +        %end;
25188     +    %end;
25190     +    /* --- loop through all models or _where_ for plots---*/
25192     +    %do d = 1 %to &nmodels;
25194     +        proc sort data=&&&modeldat&d out=_tmpdat;
25195     +            by &modelvar target datarole;
25196     +        run;
25198     +        title1 "&EM_REPORT_TTL1";
25199     +        title2 "&EM_REPORT_TTL2";
25200     +        title3 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoredistsingle_title, NOQUOTE, &em_report_key_where))";
25201     +        %if &nmodels gt 1 %then %do; title4 "&&&cond&d"; %end;
25203     +        %if &is_cat eq 1 %then %do;
25204     +            %EM_REPORT_SG4SCOREDIST(y1=percentageofevents, y2=percentageofnonevents,
25205     +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel, rowstr=assmt_percent_vlabel);
25206     +            %EM_REPORT_SG4SCOREDIST(y1=cumulativepercentageofevents, y2=cumulativepercentageofnonevents,
25207     +                str1=rpt_events_vlabel, str2=rpt_nonevents_vlabel, rowstr=assmt_percentC_vlabel);
25208     +        %end;
25209     +        %else %do;
25210     +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMean,
25211     +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel, rowstr=rpt_mean_vlabel);
25212     +            %EM_REPORT_SG4SCOREDIST(y1=_meanP_, y2=&var_targetMax,
25213     +                str1=rpt_predicted_vlabel, str2=rpt_target_vlabel, rowstr=rpt_maximum_vlabel);
25214     +        %end;
25216     +        proc delete data=_tmpdat; run;
25217     +        title1; title2; title3; title4;
25218     +    %end;
25220     +    /* --- loop through all models or _where_ for prints ---*/
25222     +    %do d = 1 %to &nmodels;
25224     +        proc sort data=&&&modeldat&d out=_tmpdat;
25225     +            by &modelvar target datarole;
25226     +        run;
25228     +        title1; title2; title3;
25229     +        %EM_REPORT_TABLETEXT(subtitle=rpt_scoredistnone_title);
25231     +        %if &is_cat eq 1 %then %do;
25232     +            proc print data=_tmpdat noobs label contents='';
25233     +                by &modelvar target datarole;
25234     +                var p_label numberofevents percentageofevents percentageofnonevents
25235     +                    cumulativepercentageofevents cumulativepercentageofnonevents ;
25236     +            run;
25237     +        %end;
25238     +        %else %do;
25239     +            proc print data=_tmpdat noobs label contents='';
25240     +                by &modelvar target datarole;
25241     +                var p_label _meanP_ _maxP_ _minP_ &var_targetMean &var_targetMax &var_targetMin;
25242     +            run;
25243     +        %end;
25244     +    %end;
25246     +%mend EM_REPORT_SCOREDIST;
25249     +%macro EM_REPORT_MULTIPLY2PLOT;
25251     +    data _tmp_dat;
25252     +        set &EM_REPORT_LIB..&EM_REPORT_KEY_FILE.&EM_REPORT_KEY_WHERECLAUSE;
25253     +    run;
25255     +    proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
25256     +    run;
25258     +    %let has_datarole = 0;
25259     +    data _null_;
25260     +        set _tmp_content;
25261     +        name=strip(upcase(name));
25262     +        if name eq "DATEROLE" then call symput('has_datarole','1');
25263     +    run;
25265     +    %if &has_datarole eq 1 %then %do;
25266     +        proc sql noprint;
25267     +            select count(distinct datarole) into :ndataroles from _tmp_dat;
25268     +            select distinct datarole into :drole1-:drole%left(&ndataroles) from _tmp_dat;
25269     +        quit;
25270     +    %end;
25271     +    %else %do;
25272     +        %let ndataroles = 1;
25273     +    %end;
25275     +    %if &ndataroles gt 1 %then %do;
25276     +        %do d=1 %to &ndataroles ;
25278     +            proc sort data=_tmp_dat(where=(datarole eq "&&&drole&d")) out=_tmp_empd;
25279     +                by datarole &EM_REPORT_KEY_X;
25280     +            run;
25282     +            title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
25283     +            title4 "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitlethree_title, NOQUOTE, &&&drole&d))";
25285     +            proc sgplot data=_tmp_empd;
25286     +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
25287     +                series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
25288     +                %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline &EM_REPORT_KEY_YREF  / axis = y;  %end;
25289     +                %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline &EM_REPORT_KEY_Y2REF / axis = y2; %end;
25290     +            run; quit;
25291     +        %end;
25292     +    %end;
25293     +    %else %do;
25294     +        title1 "&EM_REPORT_TTL1"; title2 "&EM_REPORT_TTL2"; title3 "&EM_REPORT_TTL3";
25295     +        proc sgplot data=_tmp_dat;
25296     +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y   ;
25297     +            series x=&EM_REPORT_KEY_X  y=&EM_REPORT_KEY_Y2 / y2axis ;
25298     +            %if "&EM_REPORT_KEY_YREF"  ne "" %then %do; refline &EM_REPORT_KEY_YREF  / axis = y;  %end;
25299     +            %if "&EM_REPORT_KEY_Y2REF" ne "" %then %do; refline &EM_REPORT_KEY_Y2REF / axis = y2; %end;
25300     +        run; quit;
25301     +    %end;
25303     +    title1; title2; title3; title4;
25305     +%mend EM_REPORT_MULTIPLY2PLOT;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_printmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_PRINTMACROS.SOURCE.
25306     +/*---------------------------------------------------------*/
25307     + * EM_REPORT_NODE_TEXT ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_NODE_TEXT ;
25308     + *      return the text label for a given node ;
MPRINT(EM_REPORT_CREATE):   * return the text label for a given node ;
25309     +/*---------------------------------------------------------*/
25311     +%macro EM_REPORT_NODE_TEXT(nodeid);
25312     +    %global EM_REPORT_NODE_TEXT ;
25313     +    %if not %sysfunc(exist(&em_report_lib..EM_NODEID)) %then %goto skip ;
25314     +    data _null_ ;
25315     +        set &em_report_lib..EM_NODEID ;
25316     +        where upcase(strip(nodeid)) eq upcase(strip("&nodeid")) ;
25317     +        call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
25318     +    run;
25319     +    %skip:
25320     +%mend EM_REPORT_NODE_TEXT;
25322     +/*---------------------------------------------------------*/
25323     + * EM_REPORT_TABLETEXT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_TABLETEXT;
25324     + *      print the ods texts in front of a table;
MPRINT(EM_REPORT_CREATE):   * print the ods texts in front of a table;
25325     +/*---------------------------------------------------------*/
25327     +%macro EM_REPORT_TABLETEXT(subtitle=);
25328     +%if %substr(%upcase(%sysfunc(strip(&subtitle))), 1, 19) eq VIEWS_DESCRIPTIONS_ %then %do;
25329     +    ods &EM_REPORT_FORMAT text=" ";
25330     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
25331     +    %let thisDVD = dmine;
25333     +    %let msg0 = views_descriptions_&em_report_key_description;
25334     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE));
25335     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
25336     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE));
25337     +    %end;
25338     +    %else %do;
25339     +        %let msg2=views_descriptions_&em_report_key_description;
25340     +    %end;
25342     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&msg0))"
25343     +    %then %do;
25344     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, views_descriptions_&em_report_key_description, NOQUOTE))";
25345     +    %end;
25346     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&msg0))"
25347     +    %then %do;
25348     +        %if %sysfunc(exist(sashelp.tmine)) %then %do;
25349     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.tmine, views_descriptions_&em_report_key_description, NOQUOTE))";
25350     +            %let thisDVD = tmine;
25351     +        %end;
25352     +    %end;
25353     +    %else %do;
25354     +        ods &EM_REPORT_FORMAT text="&em_report_key_description";
25355     +    %end;
25357     +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
25358     +%end;
25359     +%else %do;
25360     +    %let msg1 = %sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
25361     +    %if %sysfunc(exist(sashelp.tmine)) %then %do;
25362     +        %let msg2 = %sysfunc(sasmsg(sashelp.tmine, &subtitle, NOQUOTE));
25363     +    %end;
25364     +    %else %do;
25365     +        %let msg2=%sysfunc(sasmsg(sashelp.dmine, &subtitle, NOQUOTE));
25366     +    %end;
25368     +    %if "%sysfunc(strip(%nrstr(&msg1)))" ne "%sysfunc(strip(&subtitle))"
25369     +    %then %do;
25370     +        %let thisDVD = dmine;
25371     +    %end;
25372     +    %else %if "%sysfunc(strip(%nrstr(&msg2)))" ne "%sysfunc(strip(&subtitle))"
25373     +    %then %do;
25374     +        %let thisDVD = tmine;
25375     +    %end;
25376     +    %else %do;
25377     +        %let thisDVD = dmine;
25378     +    %end;
25380     +    ods &EM_REPORT_FORMAT text=" ";
25381     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
25382     +    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
25383     +    ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.&thisDVD, &subtitle, NOQUOTE))";
25384     +%end;
25385     +%mend EM_REPORT_TABLETEXT;
25387     +/*---------------------------------------------------------*/
25388     + *  Print comparison of model fit stats;
MPRINT(EM_REPORT_CREATE):   * Print comparison of model fit stats;
25389     + *      used by EM_REPORT_DATA();
MPRINT(EM_REPORT_CREATE):   * used by EM_REPORT_DATA();
25390     +/*---------------------------------------------------------*/
25392     +%macro EM_REPORT_COMPAREFIT(data=) ;
25393     +    proc sort data=&data out=sd(drop=stat) ;
25394     +        by target datarole ;
25395     +    run ;
25396     +    %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitcomparison_title);
25397     +    proc print data=sd noobs label contents='' ;
25398     +        by target datarole ;
25399     +        label label="%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_stat, NOQUOTE))";
25400     +    run;
25401     +%mend EM_REPORT_COMPAREFIT;
25403     +/*---------------------------------------------------------*/
25404     + * EM_REPORT_CLASSIFYTABT;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_CLASSIFYTABT;
25405     + *      print the table in a lattice plot of classification charts;
MPRINT(EM_REPORT_CREATE):   * print the table in a lattice plot of classification charts;
25406     +/*---------------------------------------------------------*/
25408     +%macro EM_REPORT_CLASSIFYTAB();
25410     +    %if "&em_report_key_whereclause" eq "" %then %do ;
25411     +        %EM_REPORT_TABLETEXT(subtitle=rpt_eventclassification_title);
25412     +    %end; %else %do;
25413     +        ods &EM_REPORT_FORMAT text=" ";
25414     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text)))";
25415     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
25416     +        ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitletwo_title, NOQUOTE, %nrbquote(&em_report_node_text))) %sysfunc(sasmsg(sashelp.dmine, rpt_eventclasswhere_title, NOQUOTE, &em_report_key_where))";
25417     +    %end;
25419     +    %let pdat = &EM_REPORT_LIB..&EM_REPORT_KEY_FILE;
25421     +    proc print data=&pdat.&EM_REPORT_KEY_WHERECLAUSE noobs label contents='';
25422     +        label CORRECTTEXT= "%sysfunc(sasmsg(sashelp.dmine, rpt_state_vlabel, NOQUOTE))" percent="%sysfunc(sasmsg(sashelp.dmine, rpt_percent_vlabel, NOQUOTE))" ;
25423     +        by target datarole ;
25424     +        var from into correcttext count percent ;
25425     +    run;
25427     +%mend EM_REPORT_CLASSIFYTAB;
25429     +/*---------------------------------------------------------*/
25430     + * EM_REPORT_PROPERTIES;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_PROPERTIES;
25431     + *     print the properties table;
MPRINT(EM_REPORT_CREATE):   * print the properties table;
25432     +/*---------------------------------------------------------*/
25434     +%macro EM_REPORT_PROPERTIES(catalog=, dsname=work.properties);
25435     +    %if %sysfunc(cexist(&catalog)) %then %do;
25436     +        proc display cat=sashelp.emutil.prop2Ds.scl;
25437     +        run;
25438     +        %EM_REPORT_TABLETEXT(subtitle=rpt_props_title);
25439     +        %EM_REPORT_makeMultiColumn(dat=work.properties, vars=name value default, split=3);
25440     +        proc delete data=work.properties; run; quit;
25441     +    %end;
25442     +%mend EM_REPORT_PROPERTIES;
25444     +/*---------------------------------------------------------*/
25445     + * EM_REPORT_DATASOURCE ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_DATASOURCE ;
25446     + *     Report on data set starting a flow ;
MPRINT(EM_REPORT_CREATE):   * Report on data set starting a flow ;
25447     +/*--------------------------------------------------------*/
25448     +%macro EM_REPORT_DATASOURCE();
25450     +    proc transpose data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTMETADEFAULT out=temp_source;
25451     +        var _all_;
25452     +        format crdate NLDATM24.0 modate NLDATM24.0;
25453     +    run;
25455     +    /* prepare the data source table */
25456     +    data temp_source;
25457     +        set temp_source;
25458     +        rename col1 = value;
25459     +        col1 = right(col1);
25460     +        format label $64.;
25461     +        label
25462     +            col1  = "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel, NOQUOTE))"
25463     +            label = "%sysfunc(sasmsg(sashelp.dmine, rpt_attribute_vlabel, NOQUOTE))"
25464     +        ;
25465     +        *** get the localized label column;
25466     +        _name_=upcase(_name_) ;
25467     +        if _name_ eq "MEMNAME"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_dataname_vlabel, NOQUOTE))" ;
25468     +        if _name_ eq "MEMTYPE"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datatype_vlabel, NOQUOTE))" ;
25469     +        if _name_ eq "MEMLABEL"        then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datalabel_vlabel, NOQUOTE))" ;
25470     +        if _name_ eq "TYPEMEM"         then delete ;
25471     +        if _name_ eq "ENGINE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_engine_vlabel, NOQUOTE))" ;
25472     +        if _name_ eq "CRDATE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_crdate_vlabel, NOQUOTE))" ;
25473     +        if _name_ eq "MODATE"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datemode_vlabel, NOQUOTE))" ;
25474     +        if _name_ eq "NOBS"            then label="%sysfunc(sasmsg(sashelp.dmine, rpt_numrows_vlabel, NOQUOTE))" ;
25475     +        if _name_ eq "NCOLS"           then label="%sysfunc(sasmsg(sashelp.dmine, rpt_numcols_vlabel, NOQUOTE))" ;
25476     +        if _name_ eq "NBYTES"          then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datasize_vlabel, NOQUOTE))" ;
25477     +        if _name_ eq "ROLE"            then label="%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" ;
25478     +        if _name_ eq "USEEXTERNALDATA" then delete ;
25479     +        if _name_ eq "SAMPLINGRATE"    then delete ;
25480     +        if _name_ eq "SEGMENT"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_segment_vlabel, NOQUOTE))" ;
25481     +        if _name_ eq "LIBNAME"         then label="%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))" ;
25482     +    run;
25484     +    %EM_REPORT_TABLETEXT(subtitle=rpt_dataattributes_title);
25485     +    %EM_REPORT_makeMultiColumn(dat=temp_source, vars=label value, split=3);
25486     +    proc delete data=temp_source; run; quit;
25488     +%mend EM_REPORT_DATASOURCE ;
25490     +*---------------------------------------------------------*/
25491     + *  a utility macro for split table into multiple columns ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ * a utility macro for split table into multiple columns ;
25492     +/*---------------------------------------------------------*/
25494     +%macro em_report_makeMultiColumn(dat=,vars=,split=2);
25496     +    %let vars = %upcase(&vars);
25498     +    /*--- check if the variable existing in the table ---*/
25499     +    proc contents data=&dat out=_tmpms_content(keep=name) noprint;
25500     +    run;
25502     +    %let k = 1;
25503     +    %let vars2 = ;
25504     +    %do %while("%scan(&vars,&k,' ')" ne "");
25505     +        data _null_;
25506     +            set _tmpms_content;
25507     +            name=strip(upcase(name));
25508     +            if name eq "%scan(&vars,&k,' ')"
25509     +                then call symput('vars2',catx(' ',symget('vars2'),name));
25510     +        run;
25511     +        %let k = %eval(&k+1);
25512     +    %end;
25514     +    /*--- count the valid variables ---*/
25515     +    %let k = 1;
25516     +    %do %while("%scan(&vars2,&k,' ')" ne "");
25517     +        %let var&k = %scan(&vars2,&k,' ');
25518     +        %let k = %eval(&k+1);
25519     +    %end;
25520     +    %let numvars = %eval(&k-1);
25522     +    /* --- split the table ---*/
25523     +    %let dsid = %sysfunc(open(&dat));
25524     +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
25525     +    %let numrows = %sysfunc(round(%sysevalf(&numobs/&split)));
25526     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25528     +    data %do d = 1 %to &split; _tmpms_dat&d.(rename=(%do k = 1 %to &numvars; &&&var&k=&&&var&k..&d %end;)) %end;;
25529     +        set &dat;
25530     +        keep &vars2 numrow;
25531     +        %do d = 1 %to &split;
25532     +            if _n_ gt %eval(&numrows*(&d-1)) and _n_ le %eval(&numrows*&d)
25533     +                then do; numrow = _n_-&numrows*(&d-1); output _tmpms_dat&d; end;
25534     +        %end;
25535     +    run;
25537     +    %do d = 1 %to &split;
25538     +        proc sort data=_tmpms_dat&d; by numrow; run;
25539     +    %end;
25541     +    /*--- merge and print ---*/
25542     +    data _tmpms_alldat;
25543     +        merge %do d = 1 %to &split; _tmpms_dat&d %end;;
25544     +        by numrow;
25545     +    run;
25547     +    proc print data=_tmpms_alldat noobs label contents='';
25548     +        var %do d = 1 %to &split; %do k = 1 %to &numvars; &&&var&k..&d %end; %end;;
25549     +    run;
25551     +    proc datasets lib=work nolist;
25552     +        delete _tmpms_:;
25553     +    run; quit;
25555     +%mend em_report_makeMultiColumn;
25557     +*---------------------------------------------------------*/
25558     + *  basic print a data table ;
MPRINT(EM_REPORT_CREATE):   *---------------------------------------------------------*/ * basic print a data table ;
25559     +/*---------------------------------------------------------*/
25560     +%macro EM_REPORT_DATA(maxobs=100);
25562     +%local pd desc ;
25563     +%let pd=&em_report_lib..&EM_REPORT_KEY_FILE ;
25564     +%IF not %SYSFUNC(EXIST(&pd)) %then %goto skip;
25566     +%if (("&EM_REPORT_KEY_AUTODISPLAY" eq "Y") OR ("&EM_REPORT_SHOWALL" eq "Y")) %then %do;
25568     +    %let desc= %upcase(&em_report_key_description) ;
25570     +    %if "&desc" eq "VARIABLES" %then %do;
25571     +        /*--- NOOP: handled globally by EM_REPORT_NODE --*/
25572     +        %goto skip ;
25573     +    %end;
25574     +    %else %if (("&desc" eq "ITEMS") OR ("&desc" eq "OUTAOV16") OR ("&desc" eq "OUTGINT") OR ("&desc" eq "OUTGVAR")
25575     +              OR ("&desc" eq "HISTWEIGHT") OR ("&desc" eq "EMSTAT")) %then %do;;
25576     +        %goto skip;
25577     +    %end;
25578     +    %if (("&desc" eq "SAMPLE") AND (%substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq GRFEXPL)) %then %do;;
25579     +        %goto skip;
25580     +    %end;
25581     +    %else %if "&desc" eq "MODELDIAGNOSTICS" %then %do;
25583     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
25585     +        proc print data=&pd(obs=&maxobs) noobs label contents='';
25586     +            by datarole;
25587     +            var cutoff sensitivity_tpr specificity_tnr one_specificity_fpr precision_event
25588     +                precision_non_event ovl_class_rate precision_overall;
25589     +        run ;
25590     +    %end;
25591     +    %else
25592     +    %if "&desc" eq "REPORTFITSTAT" %then %do ;
25594     +        /*--- should switch to proc tabulate ---*/
25595     +        /*--- often there is only one value of the by variable 'target', but there may be several ---*/
25596     +        data pd; set &pd ;
25597     +            where train ne . ;
25598     +            label _NOBS_  = "%sysfunc(sasmsg(sashelp.dmine, stat_nobs_vlabel, NOQUOTE))"
25599     +                  _MISC_  = "%sysfunc(sasmsg(sashelp.dmine, stat_misc_vlabel, NOQUOTE))"
25600     +                  _MAX_   = "%sysfunc(sasmsg(sashelp.dmine, stat_max_vlabel, NOQUOTE))"
25601     +                  _SSE_   = "%sysfunc(sasmsg(sashelp.dmine, stat_sse_vlabel, NOQUOTE))"
25602     +                  _ASE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_ase, NOQUOTE))"
25603     +                  _RASE_  = "%sysfunc(sasmsg(sashelp.dmine, stat_rase_vlabel, NOQUOTE))"
25604     +                  _DIV_   = "%sysfunc(sasmsg(sashelp.dmine, stat_div_vlabel, NOQUOTE))"
25605     +                  _DFT_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dft, NOQUOTE))"
25606     +                  _AIC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_aic, NOQUOTE))"
25607     +                  _MSE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_mse, NOQUOTE))"
25608     +                  _RMSE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rmse, NOQUOTE))"
25609     +                  _AVERR_ = "%sysfunc(sasmsg(sashelp.dmine, stat_averr_vlabel, NOQUOTE))"
25610     +                  _DFE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfe, NOQUOTE))"
25611     +                  _DFM_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfm, NOQUOTE))"
25612     +                  _ERR_   = "%sysfunc(sasmsg(sashelp.dmine, stat_err_vlabel, NOQUOTE))"
25613     +                  _FPE_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_fpe, NOQUOTE))"
25614     +                  _NW_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_nw, NOQUOTE))"
25615     +                  _RFPE_  = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rfpe, NOQUOTE))"
25616     +                  _SBC_   = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_sbc, NOQUOTE))"
25617     +            ;
25618     +            drop stat ;
25619     +        run;
25621     +        %EM_REPORT_TABLETEXT(subtitle=rpt_modelfitstat_title);
25623     +        proc sort data=pd;
25624     +            by target targetlabel;
25625     +        proc print data=pd noobs label contents='';
25626     +            label label="%sysfunc(sasmsg(sashelp.dmine, rpt_dmneural_label_statlabel, NOQUOTE))" ;
25627     +            by target targetlabel;
25628     +        run;
25630     +    %end ;
25631     +    %else %if "&desc" eq "CLUSMEAN" %then %do;
25633     +        /* determine number of segments to process */
25634     +        %let dsid = %sysfunc(open(&pd));
25635     +        %if &dsid %then %do;
25636     +            %let numseg = %sysfunc(ATTRN(&dsid, NOBS));
25637     +        %end;
25638     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25640     +        /* transpose data to have a row per segment value */
25641     +        proc transpose data=&pd out=clusmean name=VARIABLE;
25642     +        run;
25644     +        data clusmean;
25645     +            set clusmean;
25646     +            label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
25647     +                %do i=1 %to &numseg;
25648     +                    %let colname = COL&i;
25649     +                    &colname = "%sysfunc(sasmsg(sashelp.dmine, rpt_segcolname_vlabel, NOQUOTE, &i))"
25650     +                %end;
25651     +            ;
25652     +            if missing(_LABEL_) then _LABEL_ = VARIABLE;
25653     +            if VARIABLE="_SEGMENT_" then delete;
25654     +            drop VARIABLE;
25655     +       run;
25657     +       %EM_REPORT_TABLETEXT(subtitle=rpt_meanstats_title);
25658     +       proc print data=clusmean noobs label contents='' ;  run ;
25660     +    %end;
25661     +    %else %if "&desc" eq "COMPAREFIT" %then %do;
25663     +        %EM_REPORT_COMPAREFIT(data=&pd);
25665     +    %end;
25666     +    %else %if "&desc" eq "FITSTAT" %then %do;
25668     +        /*** only print the fitstat table for MDLCOMP nodes ***/
25669     +        %if %substr(%upcase(%sysfunc(strip(&nodeid))), 1, 7) eq MDLCOMP %then %do;
25671     +            data _null_ ;
25672     +                set &pd (obs=2) end=eof ;
25673     +                if eof then do ;
25674     +                    call symput("_misc_"      , strip(put(_misc_,best.))) ;
25675     +                    call symput("_vmisc_"     , strip(put(_vmisc_,best.))) ;
25676     +                    call symput("_aur_"       , strip(put(_aur_, best.)));
25677     +                    call symput("_gini_"      , strip(put(_gini_, best.)));
25678     +                end;
25679     +            run;
25681     +            %let loopflag  = 0; %let validflag = 0;
25682     +            %let ASEflag   = 0; %let VASEflag  = 0; %let MISCflag  = 0; %let VMISCflag = 0;
25683     +            %let KSflag    = 0; %let VKSflag   = 0; %let AURflag   = 0; %let GINIflag  = 0;
25684     +            %let dsid = %sysfunc(open(&pd));
25685     +            %if &dsid %then %do;
25686     +                %let loopflag  = %sysfunc(VARNUM(&dsid, _LOOP_));
25687     +                %let validflag = %sysfunc(VARNUM(&dsid, VKS));
25688     +                %let ASEflag   = %sysfunc(VARNUM(&dsid, _ASE_));
25689     +                %let MISCflag  = %sysfunc(VARNUM(&dsid, _MISC_));
25690     +                %let KSflag    = %sysfunc(VARNUM(&dsid, KS));
25691     +                %let VASEflag  = %sysfunc(VARNUM(&dsid, _VASE_));
25692     +                %let VMISCflag = %sysfunc(VARNUM(&dsid, _VMISC_));
25693     +                %let VKSflag   = %sysfunc(VARNUM(&dsid, VKS));
25694     +                %let AURflag   = %sysfunc(VARNUM(&dsid, _AUR_));
25695     +                %let GINIflag  = %sysfunc(VARNUM(&dsid, _GINI_));
25696     +            %end;
25697     +            %if &dsid %then %let dsid=%sysfunc(close(&dsid));
25699     +            %EM_REPORT_TABLETEXT(subtitle=rpt_fittable_title);
25701     +            proc print data=&pd(obs=&maxobs) noobs label contents='';
25702     +                id
25703     +                    %if &loopflag ne 0 %then %do; _LOOP_ _WHERE_ %end;
25704     +                    USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_
25705     +                ;
25706     +                var
25707     +                %if &validflag ne 0 %then %do;
25708     +                    %if &ASEflag ne 0                         %then %do; _ASE_   %end;
25709     +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_  %end;
25710     +                    %if &KSflag ne 0                          %then %do; KS      %end;
25711     +                    %if &VASEflag ne 0                        %then %do; _VASE_  %end;
25712     +                    %if &VMISCflag ne 0 and "&_vmisc_" ne "." %then %do; _VMISC_ %end;
25713     +                    %if &VKSflag ne 0                         %then %do; VKS     %end;
25714     +                %end;
25715     +                %else %do;
25716     +                    %if &ASEflag ne 0                         %then %do; _ASE_   %end;
25717     +                    %if &MISCflag ne 0  and "&_misc_" ne "."  %then %do; _MISC_  %end;
25718     +                    %if &KSflag ne 0                          %then %do; KS      %end;
25719     +                    %if &AURflag ne 0   and "&_aur_" ne "."   %then %do; _AUR_  %end;
25720     +                    %if &GINIflag ne 0  and "&_gini_" ne "."  %then %do; _GINI_  %end;
25721     +                %end;
25722     +               ;
25723     +            run;
25724     +        %end;
25725     +        %else %do;
25726     +            %goto skip;
25727     +        %end;
25728     +    %end;
25729     +    %else %if "&desc" eq "RULETABLE" %then %do;
25731     +        %let dsid = %sysfunc(open(&pd));
25732     +        %let printflag = 0;
25733     +        %if &dsid %then %do;
25734     +          %let printflag = %sysfunc(VARNUM(&dsid, EXP_CONF));
25735     +          %let lhandflag = %sysfunc(VARNUM(&dsid, _lhand));
25736     +          %let rhandflag = %sysfunc(VARNUM(&dsid, _rhand));
25737     +        %end;
25738     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
25740     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
25742     +        proc print data=&pd(obs=&maxobs) noobs label contents='';
25743     +            %if &printflag ne 0 %then %do;
25744     +                var rule exp_conf support lift count
25745     +                %if &lhandflag ne 0 %then %do; _lhand %end;
25746     +                %if &rhandflag ne 0 %then %do; _rhand %end;
25747     +                ;
25748     +            %end;
25749     +            %else %do;
25750     +                var rule conf support count
25751     +                %if &lhandflag ne 0 %then %do; _lhand %end;
25752     +                %if &rhandflag ne 0 %then %do; _rhand %end;
25753     +                ;
25754     +            %end;
25755     +        run;
25756     +    %end;
25757     +    %else %do ;
25758     +        %EM_REPORT_TABLETEXT(subtitle=views_descriptions_&em_report_key_description);
25759     +        proc print data=&pd(obs=&maxobs) noobs label contents=''; run ;
25760     +    %end ;
25761     +    %end;
25762     +%skip:
25763     +%mend EM_REPORT_DATA;
25765     +/*---------------------------------------------------------*/
25766     + * EM_REPORT_VARS ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS ;
25767     + * EM_REPORT_VARS_FLIP ;
MPRINT(EM_REPORT_CREATE):   * EM_REPORT_VARS_FLIP ;
25768     + *     Report on variables used by the node ;
MPRINT(EM_REPORT_CREATE):   * Report on variables used by the node ;
25769     +/*---------------------------------------------------------*/
25770     +%macro EM_REPORT_VARS_FLIP(data=,out=);
25772     +    proc sort data=&data;
25773     +        by descending role level name;
25774     +    run;
25776     +    data &out(keep=role level count names ) ;
25777     +        length role level $16 ;
25778     +        set &data end=eof ;
25779     +        length xrole role $32 count 8 names $200 ;
25780     +        krole= strip(role) !!' * ' !! strip(level) ;
25781     +        retain xrole ; if _n_ eq 1 then xrole=krole ;
25782     +        retain names ; if _n_ eq 1 then names=name ;
25783     +        retain count 0 ending 0 ;
25784     +        count+1 ;
25785     +        role=scan(xrole,1,'*') ;
25786     +        level=scan(xrole,2,'*') ;
25787     +        if xrole ne krole then do ;
25788     +            count=count-1 ;
25789     +            put _n_ "OUTPUT;" ;
25790     +            output ;
25791     +            xrole=krole ; names= strip(name) ;
25792     +            count=1  ; ending=0 ;
25793     +        end ;
25794     +        else if _n_ gt 1 then do ;
25795     +            if length(names) + length(name) lt 196 then
25796     +                names= strip(names) !! ' '  !! strip(name) ;
25797     +            else
25798     +            if not ending then do ;
25799     +                names= strip(names) !! ' ...' ;
25800     +                ending=1 ;
25801     +            end;
25802     +        end;
25803     +        role=scan(xrole,1,'*') ;
25804     +        level=scan(xrole,2,'*') ;
25805     +        if eof and count gt 0 then output ;
25806     +        label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE)) "
25807     +              names = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
25808     +              level = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
25809     +              role = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))";
25810     +    run ;
25811     +%mend EM_REPORT_VARS_FLIP ;
25813     +%macro EM_REPORT_VARS(varlist=0);
25815     +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE))
25816     +        %then %goto skip ;
25818     +    proc sql noprint;
25819     +        select count(*) into :tmp_numvar from &EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE;
25820     +    quit;
25822     +    %if &tmp_numvar lt 1 %then %goto skip;
25823     +/*--- 1. get minimal set of vars -----------------------------------------*/
25825     +    data _tmpvl_pdv(drop=use newuse count) ;
25826     +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._EMTRAINVARIABLE end=eof;
25827     +        length use newuse $1;
25828     +        label
25829     +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
25830     +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
25831     +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
25832     +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))"
25833     +        ;
25834     +        if use eq "" then use="Y";
25835     +        newuse=use;
25836     +        if use eq "D" then do;
25837     +            if role="REJECT" then newuse="N";
25838     +            else if role="INPUT"    then newuse="Y";
25839     +            else if role="CROSSID"  then newuse="Y";
25840     +            else if role="TEXT"     then newuse="Y";
25841     +        end ;
25842     +        if newuse eq "Y" then do ;
25843     +            count+1 ;
25844     +            output;
25845     +        end;
25846     +        if eof then call symput("varcount",put(count,6.)) ;
25847     +    run;
25849     +    proc sort data=_tmpvl_pdv; by name; run ;
25851     +/*--- 2. Summarize the variables -----------------------------------------*/
25853     +    %if &varlist ne 1 or &varcount gt &EM_REPORT_PRINT_MAXVARS %then %do;
25855     +        /* why not update pdv here? mxx */
25856     +        %EM_REPORT_VARS_FLIP(data=_tmpvl_pdv,out=_tmpvl_pds);
25857     +        %EM_REPORT_TABLETEXT(subtitle=rpt_varsummary_title);
25858     +        proc print data=_tmpvl_pds noobs label contents=''; run;
25860     +    %end;
25861     +    %else %do;
25863     +        %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset)) %then %do;
25864     +            proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._variableset out=_tmpvl_vs;
25865     +                by name;
25866     +            data _tmpvl_pdv;
25867     +                update _tmpvl_pdv _tmpvl_vs;
25868     +                by name;
25869     +                label
25870     +                    type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
25871     +                    format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel, NOQUOTE))"
25872     +                    creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel, NOQUOTE))"
25873     +                    family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel, NOQUOTE))"
25874     +                    label   = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))"
25875     +                ;
25876     +            run;
25877     +        %end;
25879     +        %EM_REPORT_TABLETEXT(subtitle=rpt_varlist_title);
25880     +        proc print data=_tmpvl_pdv noobs label contents='';
25881     +            var name label role level type length format creator;
25882     +        run;
25883     +    %end;
25885     +/*--- 3. for SVM node with EMSTAT table ----------------------------------*/
25887     +    %let emstat_exist = 0;
25888     +    %if %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._emstat)) %then %do;
25889     +        proc sql noprint;
25890     +            select count(*) into :emstat_use from &em_report_lib..&nodeid._emreport
25891     +                where key="DESCRIPTION" and value="EMSTAT" ;
25892     +        quit;
25893     +        %if &emstat_use gt 0 %then %let emstat_exist = 1;
25894     +    %end;
25896     +    %if &emstat_exist eq 1 %then %do;
25898     +        /* check newname column */
25899     +        %let newname_exist = 0;
25900     +        %let newobs = 0;
25901     +        %let tsdsid = %sysfunc(open(work.pdv));
25902     +        %if &tsdsid %then %do;
25903     +            %let tsobs = %sysfunc(ATTRN(&tsdsid, NOBS));
25904     +            %let newobs = %sysfunc(varnum(&tsdsid, NEWNAME));
25905     +            %if &tsobs > 0 AND  &newobs > 0 %then %let newname_exist =1;
25906     +        %end;
25907     +        %if &tsdsid %then %let tsdsid = %sysfunc(close(&tsdsid));
25909     +        %if &newname_exist eq 1 %then %do;
25910     +            data _tmpvl_pdv; set _tmpvl_pdv(drop=name); run;
25911     +            proc sort data=_tmpvl_pdv(rename=(newname=NAME)); by name; run;
25912     +        %end;
25913     +        %else %do;
25914     +            proc sort data=_tmpvl_pdv; by name; run;
25915     +        %end;
25917     +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._VARIABLESET out=_tmpvl_v; by name; run;
25919     +        data _tmpvl_pdv ;
25920     +            update _tmpvl_pdv _tmpvl_v;
25921     +            by name;
25922     +            label label="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
25923     +        run;
25925     +        proc sort data=_tmpvl_pdv; by name; run;
25926     +        proc sort data=&EM_REPORT_LIB..&EM_REPORT_NODEID._EMSTAT out=_tmpvl_tempsort; by name; run;
25928     +        data _tmpvl_pdv;
25929     +            merge _tmpvl_pdv(keep=name label role level type length format creator family) _tmpvl_tempsort;
25930     +            by name;
25931     +            label type    = "%sysfunc(sasmsg(sashelp.dmine, meta_type_vlabel, NOQUOTE))"
25932     +                  format  = "%sysfunc(sasmsg(sashelp.dmine, meta_format_vlabel, NOQUOTE))"
25933     +                  creator = "%sysfunc(sasmsg(sashelp.dmine, meta_creator_vlabel, NOQUOTE))"
25934     +                  family  = "%sysfunc(sasmsg(sashelp.dmine, rpt_family_vlabel, NOQUOTE))";
25935     +        run;
25937     +        proc sort data=_tmpvl_pdv; by descending role name; run;
25939     +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_interval_title);
25940     +        proc print data=_tmpvl_pdv(where=(LEVEL="INTERVAL")) noobs label contents='';
25941     +            var name label role level type length format creator pctmiss min max mean std skewness kurtosis;
25942     +        run;
25944     +        %EM_REPORT_TABLETEXT(subtitle=rpt_variable_class_title);
25945     +        proc print data=_tmpvl_pdv(where=(LEVEL^="INTERVAL")) noobs label contents='';
25946     +            var name label role level type length format creator nlevel pctmiss;
25947     +        run;
25948     +    %end;
25950     +/*--- 4. now get vars created by this node -------------------------------*/
25952     +    %if not %sysfunc(exist(&EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN))
25953     +        %then %goto skip;
25955     +    %let pdvxnum = 0;
25957     +    data _tmpvl_pdvx;
25958     +        set &EM_REPORT_LIB..&EM_REPORT_NODEID._CMETA_TRAIN end=eof ;
25959     +        where upcase(creator) eq "&EM_REPORT_NODEID" ;
25960     +        if eof then call symput('pdvxnum',put(_N_,6.));
25961     +        label
25962     +            name   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))"
25963     +            label  = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))"
25964     +            role   = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
25965     +            level  = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))"
25966     +            type   = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel, NOQUOTE))"
25967     +            length = "%sysfunc(sasmsg(sashelp.dmine, meta_length_vlabel, NOQUOTE))";
25968     +    run;
25970     +    %if pdvxnum gt 0 %then %do;
25971     +        %if &varlist ne 1 or &pdvxnum gt &EM_REPORT_PRINT_MAXVARS %then %do ;
25973     +            %EM_REPORT_VARS_FLIP(data=_tmpvl_pdvx,out=_tmpvl_pdvxp) ;
25975     +            proc sql noprint;
25976     +                select count(*) into :nobs from _tmpvl_pdvxp;
25977     +            quit;
25979     +            %if &nobs > 0 %then %do;
25980     +                %EM_REPORT_TABLETEXT(subtitle=rpt_createvarsummary_title);
25981     +                proc print data=_tmpvl_pdvxp noobs label contents=''; run ;
25982     +            %end;
25983     +        %end;
25984     +        %else %do ;
25986     +            %EM_REPORT_TABLETEXT(subtitle=rpt_createvarslist_title);
25987     +            proc print data=_tmpvl_pdvx noobs label contents='';
25988     +                var name label role type length ;
25989     +            run;
25990     +        %end;
25991     +    %end;
25993     +/*------------------------------------------------------------------------*/
25995     +    proc datasets lib=work nolist;
25996     +        delete _tmpvl_:;
25997     +    run; quit;
25998     +    %skip:
26000     +%mend EM_REPORT_VARS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_rpmmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_RPMMACROS.SOURCE.
26002     +%macro EM_REPORT_validSummaryPath(startNodeID =);
26003     +/*--- purpose: detect whether a flow is valid as a summary path ---*/
26005     +    %global EM_REPORT_NODES EM_REPORT_LIB RPM_REPORT_MODELNODE  RPM_REPORT_SCORENODE RPM_REPORT_MDLCOMP RPM_REPORT_VALIDSUMMARY;
26006     +    %local prednode em_report_mdlOutfit;
26007     +    %let RPM_REPORT_MODELNODE    = ;
26008     +    %let RPM_REPORT_SCORENODE    = ;
26009     +    %let RPM_REPORT_MDLCOMP      = ;
26010     +    %let RPM_REPORT_VALIDSUMMARY = 0;
26012     +    %if &EM_REPORT_NODES eq SUMMARY %then %do;
26014     +        %let predNode=;
26015     +        data _null_ ;
26016     +            set &EM_REPORT_LIB..em_dgraph(where=(to="&startNodeID"));
26017     +            call symput('predNode', strip(from));
26018     +        run;
26019     +        %let predNode = &predNode;
26021     +        /* if predecessor is MDLCOMP, RPM report is valid */
26022     +        /* or if predecessor is SCORE and MODEL node is fed into score, RPM report is valid */
26023     +        /* or if MDLCOMP to SCORE to REPORTER, RPM report is valid, commented xxm */
26024     +        /* or if predecessor is MODEL node, RPM report is valid */
26026     +        %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
26027     +            %let RPM_REPORT_MDLCOMP = &predNode;
26028     +            %let RPM_REPORT_VALIDSUMMARY=1;
26029     +            data _null_;
26030     +                set &EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
26031     +                call symput('RPM_REPORT_MODELNODE',strip(model));
26032     +            run;
26033     +        %end;
26034     +        %else %if %upcase(%substr(&prednode,1,5)) eq SCORE %then %do;
26035     +            %let RPM_REPORT_SCORENODE = &prednode;
26036     +            %let prednode = ;
26037     +            data _null_ ;
26038     +                set &EM_REPORT_LIB..em_dgraph(where=(to="&RPM_REPORT_SCORENODE"));
26039     +                call symput('predNode', strip(from));
26040     +            run;
26041     +            %let predNode = &predNode;
26043     +            %if &prednode ne %then %do;
26044     +                %if %upcase(%substr(&prednode,1,7)) eq MDLCOMP %then %do;
26045     +                    %let RPM_REPORT_MDLCOMP = &prednode;
26046     +                    %let RPM_REPORT_VALIDSUMMARY=1;
26047     +                    data _null_;
26048     +                        set &EM_REPORT_LIB..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
26049     +                        call symput('RPM_REPORT_MODELNODE',strip(model));
26050     +                    run;
26051     +                %end;
26052     +                %else %do;
26053     +                    %let em_report_mdlOutfit = &EM_REPORT_LIB..&prednode._emoutfit;
26054     +                    %if %sysfunc(exist(&em_report_mdlOutfit))
26055     +                    %then %do;
26056     +                        %let RPM_REPORT_MODELNODE = &prednode;
26057     +                        %let RPM_REPORT_VALIDSUMMARY=1;
26058     +                    %end;
26059     +                %end;
26060     +            %end;
26061     +        %end;
26062     +        %else %do;
26063     +            %let em_report_mdlOutfit = &em_lib..&prednode._emoutfit;
26064     +            %if %sysfunc(exist(&em_report_mdlOutfit))
26065     +            %then %do;
26066     +                %let RPM_REPORT_MODELNODE = &prednode;
26067     +                %let RPM_REPORT_VALIDSUMMARY=1;
26068     +            %end;
26069     +        %end;
26070     +    %end;
26072     +    %let RPM_REPORT_MODELNODE = &RPM_REPORT_MODELNODE;
26073     +    %let RPM_REPORT_SCORENODE = &RPM_REPORT_SCORENODE;
26074     +    %let RPM_REPORT_MDLCOMP   = &RPM_REPORT_MDLCOMP;
26076     +%mend EM_REPORT_validSummaryPath;
26078     +%macro em_report_summary(runHP=0);
26080     +%global EM_REPORT_SUMMARY_TARGET RPM_REPORT_MDLCOMP RPM_REPORT_MODELNODE;
26081     +%local  IDSNode freqvar;
26083     +%if not %sysfunc(exist(emreportpath)) %then %goto skip ;
26085     +/*--- RPM-1. Identify the modeling node -------------------------------------*/
26087     +%let em_report_modelID = ;
26088     +%let em_report_modeldesc= ;
26090     +%if &RPM_REPORT_MDLCOMP ne %then %do;
26091     +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
26092     +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
26093     +        data _null_;
26094     +           set &em_lib..&RPM_REPORT_MDLCOMP._emoutfit(where=(USE='Y'));
26095     +           call symput('em_report_modelID',   strip(model));
26096     +           call symput('em_report_modeldesc', strip(modeldescription));
26097     +        run;
26098     +    %end;
26099     +%end;
26100     +%else %if &RPM_REPORT_MODELNODE ne %then %do;
26101     +    %let em_report_mdloutfit = &em_lib..&RPM_REPORT_MODELNODE._emoutfit;
26102     +    %if %sysfunc(exist(&em_report_mdloutfit)) %then %do;
26103     +        %let em_report_modelID   = &RPM_REPORT_MODELNODE;
26104     +        %let em_report_modeldesc = ;
26105     +    %end;
26106     +%end;
26108     +/*--- RPM-2. Retrieve necessary information for the model--------------------*/
26110     +%if &em_report_modelId ne %then %do;
26112     +    /* RPM-2.1 save model information */
26114     +    %EM_GETNAME(key=MODELINFO, type=DATA);
26115     +    data &EM_USER_MODELINFO;
26116     +        format modelID $100. modeldesc $200.;
26117     +        modelid = "&em_report_modelID";
26118     +        modeldesc="&em_report_modeldesc";
26119     +    run;
26121     +    /* RPM-2.2 retrieve warning file if it exists */
26123     +    %let temp = %nrbquote(%sysfunc(PATHNAME(&em_report_lib)));
26124     +    %let path = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
26125     +    %let file = EMWARN.sas;
26126     +    %let warnfile = %nrbquote(&path&em_dsep&em_report_modelId&em_dsep&file);
26128     +    %if "&warnfile" ne "" %then %do;
26129     +        filename x "&warnfile" encoding='utf-8' NOBOM;
26130     +        data _null_;
26131     +            length string $1000;
26132     +            file PRINT;
26133     +            fid = fopen('x');
26134     +            do while (^fread(fid));
26135     +                rc= fget(fid, string, frlen(fid));
26136     +                string = tranwrd(string, "'", "''");
26137     +                if string eq '' then string = ' ';
26138     +                put string;
26139     +            end;
26140     +            fid = fclose(fid);
26141     +            put " ";
26142     +        run;
26143     +        filename x;
26144     +    %end;
26146     +    /* RPM-2.3 retrieve ID nodeid */
26148     +    data _null_;
26149     +        set emreportpath(where=(substr(upcase(strip(nodeid)),1,3) eq "IDS"));
26150     +        call symput("idsnode",strip(nodeid)) ;
26151     +    run;
26153     +    %let idstmeta = &em_lib..&idsnode._emtmetadefault;
26154     +    %let idscmeta = &em_lib..&idsnode._emcmetadefault;
26156     +    %if %sysfunc(exist(&idstmeta)) %then %do;
26157     +        data _null_;
26158     +            set  &em_lib..&idsnode._emtmetadefault;
26159     +            call symput('rpt_rpm_data',    strip(MEMNAME));
26160     +            call symput('rpt_rpm_datalib', strip(LIBNAME));
26161     +            call symput('rpt_rpm_nobs',    strip(NOBS));
26162     +            call symput('rpt_rpm_ncols',   strip(NCOLS));
26163     +        run;
26164     +    %end;
26166     +    /* RPM-2.4 retrieve name of target to use in presense of multiple targets */
26167     +    /* prefer to use the target given by &EM_REPORT_SUMMARY_TARGET        */
26168     +    /* otherwise the last target modelled (by name) will be used          */
26170     +    %let mdlTarget = ;
26172     +    %if "&EM_REPORT_SUMMARY_TARGET" ne "" %then %do;
26173     +        proc sql noprint;
26174     +            select count(*) into :tmpn
26175     +            from &em_lib..&em_report_modelid._variableset;
26176     +                where name eq "&EM_REPORT_SUMMARY_TARGET" and upcase(role) eq "TARGET";
26177     +        quit;
26178     +        %if &tmpn eq 1 %then %let mdlTarget = &EM_REPORT_SUMMARY_TARGET;
26179     +    %end;
26181     +    %if "&mdlTarget" eq "" %then %do;
26182     +        data _null_;
26183     +            set &em_lib..&em_report_modelid._variableset(where=(role="TARGET" and use="Y"));
26184     +            call symput('mdlTarget', strip(name));
26185     +        run;
26186     +    %end;
26188     +    /* RPM-2.5 retrieve name of decmeta from eminfo of the chosen model */
26190     +    data _null_;
26191     +        set &em_lib..&em_report_modelid._eminfo;
26192     +        if KEY="DECMETA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget" %end;
26193     +            then  call symput('rpt_rpm_mdldecmeta', strip(data));
26194     +        if KEY="DECDATA" %if "&mdlTarget" ne "" %then %do; and target="&mdlTarget" %end;
26195     +            then  call symput('rpt_rpm_mdldecdata', strip(data));
26196     +    run;
26198     +    /* RPM-2.6 retrieve name of DECISION variable if it exists      */
26199     +    /*       - use this as target var for categorical target        */
26200     +    /*       - otherwise use INTO variable as class target var      */
26201     +    /* RPM-2.7 retrieve target event level, save TARGETINFO table   */
26202     +    /* RPM-2.8 retrieve name of the PREDICTED variable from decmeta */
26203     +    /*       - INTERVAL TARGET ONLY                                 */
26205     +    %let catTarget = ;
26207     +    data _null_;
26208     +        set &rpt_rpm_mdldecmeta;
26209     +        if _type_ eq "INTO"          then call symput('catTarget', strip(variable));
26210     +        if _type_ eq "MODELDECISION" then call symput('catTarget', strip(variable));
26212     +        if _type_ eq "TARGET" then do;
26213     +            call symput('rpt_rpm_eventlvl',    strip(event));
26214     +            call symput('rpt_rpm_targetName',  strip(variable));
26215     +            call symput('rpt_rpm_targetLevel', strip(level));
26216     +            call symput('rpt_rpm_targetLabel', strip(label));
26217     +        end;
26218     +    data _null_;
26219     +        set &rpt_rpm_mdldecmeta;
26220     +        %if "&rpt_rpm_targetLevel" eq "INTERVAL" %then %do;
26221     +            if _type_ eq "PREDICTED"
26222     +                then call symput('rpt_rpm_predvar', strip(variable));
26223     +        %end;
26224     +    run;
26226     +    %EM_GETNAME(key=TARGETINFO, type=DATA);
26227     +    data &EM_USER_TARGETINFO;
26228     +        set &rpt_rpm_mdldecmeta;
26229     +    run;
26231     +    /* RPM-2.9 retrieve freq variable name if it exists */
26233     +    %let freqvar=;
26234     +    data _null_;
26235     +        set &em_lib..&em_report_modelid._variableset(where=(role eq "FREQ"));
26236     +        call symput('freqvar', strip(name));
26237     +    run;
26239     +    /* RPM-2.10 retrieve listing of all inputs into the model */
26240     +    /*     process only when SCORENODE exists                 */
26242     +    %if &RPM_REPORT_SCORENODE ne %then %do;
26244     +        %EM_REGISTER(key=tempvar,  type=DATA);
26245     +        %EM_REGISTER(key=tempmeta, type=DATA);
26246     +        %EM_GETNAME( key=tempvar,  type=DATA);
26247     +        %EM_GETNAME( key=tempmeta, type=DATA);
26249     +        data &EM_USER_tempvar;
26250     +            %if %sysfunc(exist(&em_lib..&rpm_report_scorenode._eminputvars)) %then %do;
26251     +                set &em_lib..&rpm_report_scorenode._eminputvars(where=(scorevar="Y"));
26252     +            %end;
26253     +            %else %do;
26254     +                set &em_lib..&idsnode._variableset(where=(upcase(role)='INPUT') keep=role name);
26255     +            %end;
26256     +        run;
26258     +        proc sql noprint;
26259     +            select count(distinct name) into :n_svars from &EM_USER_tempvar;
26260     +        quit;
26262     +        proc sort data=&EM_USER_tempvar;       by name;
26263     +        proc sort data=&idscmeta out=tempmeta; by name;
26265     +        data &EM_USER_tempmeta;
26266     +            merge &EM_USER_tempvar(in=_a) tempmeta;
26267     +            by name;
26268     +            if _a;
26269     +        run;
26271     +        proc delete data=tempmeta; run;
26272     +    %end;
26274     +    /* RPM-2.11 is HPRPM or not */
26276     +    proc sql noprint;
26277     +        select count(*) into :rpt_rpm_isHP from &em_lib..&idsnode._eminfo
26278     +            where upcase(key) eq 'HPDMSAMPLE';
26279     +    quit;
26281     +    %if &rpt_rpm_isHP ne 0 %then %let rpt_rpm_isHP = 1;
26283     +    /* RPM-2.12 determine if vvn variables are present in ids node */
26285     +    %let vvnflag = 0;
26286     +    %let cmdsid = %sysfunc(open(&idscmeta));
26287     +    %if &cmdsid %then %do;
26288     +        %let newnum = %sysfunc(varnum(&cmdsid, newname));
26289     +        %if &newnum gt 0 %then %let vvnflag = 1;
26290     +    %end;
26291     +    %if &cmdsid %then %let cmdsid = %sysfunc(close(&cmdsid));
26293     +    %if &vvnflag eq 0
26294     +        %then %let name_to_use = name;
26295     +        %else %let name_to_use = newname;
26297     +/* end of 2. Retrieve necessary information for the model */
26298     +%end;
26300     +/*******************************************************************************************/
26302     +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) %then %do;
26304     +    %if &EM_PROPERTY_SUMMARIZATION eq Y %then %do;
26306     +        %EM_GETNAME(key=DATASUM,   type=DATA);
26307     +        %EM_GETNAME(key=TARGETSUM, type=DATA);
26308     +        %EM_GETNAME(key=VARSUM,    type=DATA);
26309     +        %let rpt_rpm_eventlvl = %nrbquote(&rpt_rpm_eventlvl);
26311     +        /* RPM-3.1 - output data summary ------------------------------------------------------------------*/
26313     +        data &EM_USER_DATASUM;
26314     +            length stat $200 value $200;
26315     +            label stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))"
26316     +                  value = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
26318     +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptinputdatasource_vlabel, NOQUOTE))";
26319     +            value = "&rpt_rpm_datalib..&rpt_rpm_data";
26320     +            output;
26322     +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetvariable_vlabel, NOQUOTE))";
26323     +            %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
26324     +                value = "%nrbquote(&rpt_rpm_targetLabel)";
26325     +            %end;
26326     +            %else %do;
26327     +                value = "&rpt_rpm_targetName";
26328     +            %end;
26329     +            output;
26331     +            %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
26332     +                stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpteventlevel_vlabel, NOQUOTE))";
26333     +                value = "&rpt_rpm_eventlvl";
26334     +                output;
26335     +            %end;
26337     +            stat  = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptobservations_vlabel, NOQUOTE))";
26338     +            value = "&rpt_rpm_nobs";
26339     +            output;
26341     +            stat = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptorigvars_vlabel, NOQUOTE))";
26342     +            value = "&rpt_rpm_ncols";
26343     +            output;
26345     +            %if &RPM_REPORT_SCORENODE ne %then %do;
26346     +                %if &n_svars ne %then %do;
26347     +                    stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptselectedvars_vlabel, NOQUOTE))";
26348     +                    value="&n_svars";
26349     +                    output;
26350     +                %end;
26351     +            %end;
26352     +        run;
26354     +        ods &EM_REPORT_FORMAT text=" ";
26355     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelsummarization_title, NOQUOTE))";
26356     +        ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdata_title, NOQUOTE))";
26357     +        ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelsummarization_title, NOQUOTE)) %sysfunc(sasmsg(sashelp.dmine, rpt_rptdata_title, NOQUOTE))";
26359     +        proc print data=&EM_USER_DATASUM noobs label style=[outputwidth=50%]; run;
26361     +        /* RPM-3.2 - output target summary -----------------------------------------------------------------*/
26363     +       ods &EM_REPORT_FORMAT text=" ";
26364     +       %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
26365     +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
26366     +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
26367     +       %end;
26368     +       %else %do;
26369     +           ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, &rpt_rpm_targetName))";
26370     +           ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttarget_title, NOQUOTE, &rpt_rpm_targetName))";
26371     +       %end;
26373     +        %if "&rpt_rpm_targetLevel" ne "INTERVAL"
26374     +        %then %do;
26375     +            /* target summary for for non-interval target */
26377     +            %let useD = N;
26378     +            data _null_;
26379     +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('MATRIX'))) end=eof;
26380     +                if eof then call symput('useD', USE);
26381     +            run;
26383     +            %let useP = N;
26384     +            data _null_;
26385     +                set &rpt_rpm_mdldecmeta(where=(_type_ in ('DECPRIOR'))) end=eof;
26386     +                if eof then call symput('useP', USE);
26387     +            run;
26389     +            data &EM_USER_TARGETSUM;
26390     +                set &rpt_rpm_mdldecdata;
26391     +                label
26392     +                    &rpt_rpm_targetName = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))"
26393     +                    count      = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, NOQUOTE))"
26394     +                    trainprior = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptdatapercentage_vlabel, NOQUOTE))"
26395     +                    decprior   = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptadjustedperc_vlabel, NOQUOTE))";
26396     +                ;
26397     +                %if &useD eq Y and &useP eq Y %then %do; drop dataprior;          %end;
26398     +                %if &useD eq Y and &useP eq N %then %do; drop decprior dataprior; %end;
26399     +                %if &useD eq N and &useP eq Y %then %do; keep &rpt_rpm_targetName count trainprior decprior; %end;
26400     +                %if &useD eq N and &useP eq N %then %do; keep &rpt_rpm_targetName count trainprior;          %end;
26401     +            run;
26403     +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%]; run;
26404     +        %end;
26405     +        %else %do;
26406     +            /* target summary for interval target */
26408     +            data _null_;
26409     +                set  &em_lib..&idsnode._cmeta_data(where=(ROLE='TARGET'));
26410     +                call symput('rpt_rpm_ids_target',    strip(name));
26411     +            run;
26413     +            %if &rpt_rpm_isHP eq 1 %then %do;
26414     +                ods &EM_REPORT_FORMAT exclude all;
26415     +                ods listing;
26416     +                proc hpdmdb data=&em_lib..&idsnode._data varout=temp1;
26417     +                    var &rpt_rpm_ids_target;
26418     +                proc transpose data=temp1
26419     +                    out=&EM_USER_TARGETSUM(rename=(col1=&rpt_rpm_ids_target _name_=_stat_));
26420     +                    by name notsorted;
26421     +                    var n min max mean std;
26422     +                run;
26423     +                ods listing close;
26424     +                ods &EM_REPORT_FORMAT select all;
26425     +                proc delete data=temp1; run;
26426     +            %end;
26427     +            %else %do;
26428     +                proc means data=&em_lib..&idsnode._data noprint;
26429     +                    var &rpt_rpm_ids_target;
26430     +                    output out=&EM_USER_TARGETSUM;
26431     +                run;
26433     +                data &EM_USER_TARGETSUM;
26434     +                    format _stat_ $50.;
26435     +                    set &EM_USER_TARGETSUM;
26436     +                    if strip(upcase(_stat_)) eq "MIN"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
26437     +                    if strip(upcase(_stat_)) eq "MAX"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
26438     +                    if strip(upcase(_stat_)) eq "N"    then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel, NOQUOTE))";
26439     +                    if strip(upcase(_stat_)) eq "MEAN" then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel, NOQUOTE))";
26440     +                    if strip(upcase(_stat_)) eq "STD"  then _stat_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_std_vlabel, NOQUOTE))";
26441     +                run;
26442     +            %end;
26444     +            proc print data=&EM_USER_TARGETSUM noobs label style=[outputwidth=50%];
26445     +                var _stat_ &rpt_rpm_ids_target;
26446     +                label _stat_        = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, NOQUOTE))"
26447     +                &rpt_rpm_ids_target = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
26448     +            run;
26449     +        %end;
26451     +        /* RPM-3.3 - output variable summary ---------------------------------------------------------------*/
26453     +        %if &RPM_REPORT_SCORENODE ne %then %do;
26455     +            proc sql noprint;
26456     +                create table tempselected as
26457     +                    select a.*, b.name as selected
26458     +                    from &em_lib..&idsnode._variableset as a left join &EM_USER_tempmeta as b
26459     +                        on a.name eq b.name
26460     +                ;
26461     +                create table &EM_USER_VARSUM as
26462     +                    select role,level, count(distinct name) as count, sum(selected ne ' ') as sel_count
26463     +                    from tempselected
26464     +                    group by role, level
26465     +                    order by role, level
26466     +                ;
26467     +            quit;
26469     +            ods &EM_REPORT_FORMAT text=" ";
26470     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarsummary_title, NOQUOTE))";
26471     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarsummary_title, NOQUOTE))";
26473     +            data &EM_USER_VARSUM;
26474     +                format role $50. level $50.;
26475     +                set &EM_USER_VARSUM;
26477     +                role  = upcase(strip(role));
26478     +                level = upcase(strip(level));
26480     +                     if role eq 'ASSESS'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_assess_vlabel, NOQUOTE))";
26481     +                else if role eq 'COST'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_cost_vlabel, NOQUOTE))";
26482     +                else if role eq 'CENSOR'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_censor_vlabel, NOQUOTE))";
26483     +                else if role eq 'CROSSID'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_crossid_vlabel, NOQUOTE))";
26484     +                else if role eq 'FREQ'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_freq_vlabel, NOQUOTE))";
26485     +                else if role eq 'GROUP'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel, NOQUOTE))";
26486     +                else if role eq 'DECISION'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_decision_vlabel, NOQUOTE))";
26487     +                else if role eq 'CLASSIFICATION' then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_vlabel, NOQUOTE))";
26488     +                else if role eq 'KEY'            then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_key_vlabel, NOQUOTE))";
26489     +                else if role eq 'MISSING'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_missing_vlabel, NOQUOTE))";
26490     +                else if role eq 'PREDICT'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
26491     +                else if role eq 'REFERRER'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_referrer_vlabel, NOQUOTE))";
26492     +                else if role eq 'REJECTED'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_rejected_vlabel, NOQUOTE))";
26493     +                else if role eq 'SEGMENT'        then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_segment_vlabel, NOQUOTE))";
26494     +                else if role eq 'SEQUENCE'       then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_sequence_vlabel, NOQUOTE))";
26495     +                else if role eq 'TEXT'           then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_text_vlabel, NOQUOTE))";
26496     +                else if role eq 'TIMEID'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_timeid_vlabel, NOQUOTE))";
26497     +                else if role eq 'TRIAL'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_trial_vlabel, NOQUOTE))";
26498     +                else if role eq 'ID'             then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_id_vlabel, NOQUOTE))";
26499     +                else if role eq 'INPUT'          then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_input_vlabel, NOQUOTE))";
26500     +                else if role eq 'TARGET'         then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
26501     +                else if role eq 'TREATMENT'      then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_treatment_vlabel, NOQUOTE))";
26502     +                else if role eq 'RESIDUAL '      then role= "%sysfunc(sasmsg(sashelp.dmine, rpt_residual_vlabel, NOQUOTE))";
26503     +                else if role eq 'LABEL'          then role= "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
26505     +                     if level eq 'INTERVAL'  then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_interval_vlabel , NOQUOTE))";
26506     +                else if level eq 'NOMINAL'   then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_nominal_vlabel , NOQUOTE))";
26507     +                else if level eq 'ORDINAL'   then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_ordinal_vlabel , NOQUOTE))";
26508     +                else if level eq 'BINARY'    then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_binary_vlabel , NOQUOTE))";
26509     +                else if level eq 'UNARY'     then level = "%sysfunc(sasmsg(sashelp.dmine, rpt_rpm_unary_vlabel , NOQUOTE))";
26511     +                role  = strip(role);
26512     +                level = strip(level);
26513     +            run;
26515     +            proc print data=&EM_USER_VARSUM label noobs style=[outputwidth=50%];
26516     +                var role level count sel_count;
26517     +                label role      = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptrole_vlabel, NOQUOTE))"
26518     +                      level     = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptlevel_vlabel, NOQUOTE))"
26519     +                      count     = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptorigcount_vlabel, NOQUOTE))"
26520     +                      sel_count = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptselcount_vlabel, NOQUOTE))";
26521     +            run;
26523     +            proc delete data=tempselected; run;
26524     +        %end;
26525     +    %end;  /* end of --&EM_PROPERTY_SUMMARIZATION eq Y           --*/
26526     +/* three output in this section: datasum, targetsum, varsum      --*/
26527     +%end; /* end of &em_report_modelId ne - end of block 3.1,3.2,3.3 --*/
26530     +/***** RPM-4. varRank and Scorecard ************************************************************************/
26532     +%if &em_report_modelId ne  and %sysfunc(exist(&idstmeta)) and &RPM_REPORT_SCORENODE ne  %then %do;
26534     +    %EM_GETNAME(key=VARRANK,   type=DATA);
26535     +    %EM_GETNAME(key=SCORECARD, type=DATA);
26537     +    %if "&rpt_rpm_targetLevel" ne "INTERVAL"
26538     +        %then %let scorecard_target = &catTarget;
26539     +        %else %let scorecard_target = &rpt_rpm_predvar;
26541     +    %if &runHP eq 0 %then %do;
26543     +        %global EM_SUMMARY_REPORT_MAXOBS  EM_SUMMARY_REPORT_SAMPLEMETHOD ;
26545     +        %if &EM_SUMMARY_REPORT_MAXOBS ne  %then %do;
26546     +            %let maxobs = &EM_SUMMARY_REPORT_MAXOBS;
26547     +        %end;
26548     +        %else %do;
26549     +            %exploreObs(data=&em_lib..&em_report_modelid._train);
26550     +            %let maxobs = &_EXPLOREOBS_MAX;
26551     +        %end;
26553     +        %if "&EM_SUMMARY_REPORT_SAMPLEMETHOD" ne ""
26554     +            %then  %let sampleMethod = &EM_SUMMARY_REPORT_SAMPLEMETHOD;
26555     +            %else  %let sampleMethod = RANDOM;
26557     +        %exploreSample(
26558     +            data     = &em_lib..&em_report_modelid._train,
26559     +            seed     = 12345,
26560     +            output   = &em_report_modelid._trainsample,
26561     +            method   = &sampleMethod,
26562     +            size     = &maxobs,
26563     +            sizetype = obs,
26564     +            metaData = &em_lib..&em_report_modelid._cmeta_train
26565     +        );
26567     +        %em_reporter_scorecard(
26568     +            indata        = %str(&em_report_modelid._trainsample),
26569     +            indata2       = %str(&em_lib..&em_report_modelid._train),
26570     +            inVariableSet = &EM_USER_tempmeta,
26571     +            name          = &name_to_use,
26572     +            libname       = work,
26573     +            crosstab      = &EM_PROPERTY_CROSSTABS,
26574     +            targetVar     = &scorecard_target,
26575     +            targetVar2    = &rpt_rpm_targetName,
26576     +            targetLevel   = &rpt_rpm_targetLevel,
26577     +            freqVar       = &freqVar,
26578     +            outVarRank    = &EM_USER_VarRank,
26579     +            outScoreCard  = &EM_USER_ScoreCard
26580     +        );
26582     +        proc sort data=&em_lib..&idsnode._variableset
26583     +            out=templabel(keep=&name_to_use label %if &vvnflag eq 1 %then %do; name %end;);
26584     +            by &name_to_use;
26585     +        run;
26587     +        %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 %then %do;
26589     +            proc sort data=&EM_USER_ScoreCard;
26590     +                by displayVar;
26591     +            data &EM_USER_ScoreCard;
26592     +                merge &EM_USER_ScoreCard(in=_a) templabel(rename=(&name_to_use=displayVar label=emrpmtmp_lbael));
26593     +                by displayVar;
26594     +                if _a;
26595     +                %if &vvnflag eq 1 %then %do;
26596     +                    if ^missing(name)  then displayvar=name;
26597     +                %end;
26598     +                if ^missing(emrpmtmp_lbael) then displayvar=emrpmtmp_lbael;
26599     +                drop emrpmtmp_lbael name;
26600     +            run;
26602     +        %end;
26604     +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 %then %do;
26606     +            proc sort data=&EM_USER_VarRank;
26607     +                by variable;
26608     +            data &EM_USER_VarRank;
26609     +                merge &EM_USER_VarRank(in=_a) templabel(rename=(&name_to_use=variable));
26610     +                by variable;
26611     +                if _a;
26612     +                if missing(label) then do;
26613     +                    label = variable;
26614     +                    %if &vvnflag eq 1 %then %do;
26615     +                        if ^missing(name) then label=name;
26616     +                    %end;
26617     +                end;
26618     +            proc sort data=&EM_USER_VarRank;
26619     +                by descending rank;
26620     +            run;
26622     +        %end;
26624     +        %if %sysfunc(exist(&EM_USER_VarRank)) ne 0 and &EM_PROPERTY_VARRANKING eq Y %then %do;
26625     +            /* generate gtable like listing of variable importance */
26626     +            ods path(prepend) work.templat(update);
26627     +            proc template;
26628     +                define statgraph Rules / store=work.templat ;
26629     +                    begingraph / designheight=470px;
26630     +                        %if "&EM_REPORT_TITLE" ne ""
26631     +                            %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
26632     +                            %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
26633     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
26634     +                        layout lattice / columns=2 rowdatarange=union columnweights=(0.9 0.1) columngutter=0;
26635     +                            rowaxes; rowaxis; endrowaxes;
26636     +                            layout overlay / xaxisopts=(display=(line));
26637     +                                barchart x=label y=worth / orient=horizontal;
26638     +                            endlayout;
26639     +                        endlayout;
26640     +                    endgraph;
26641     +                end;
26642     +            run;
26643     +            proc sgrender data=&EM_USER_VARRANK template=Rules; run;
26644     +        %end;
26645     +    %end;
26646     +    %else %do;
26648     +        %if &rpt_rpm_isHP eq 1
26649     +            %then %let scorecard_lib = &rpt_rpm_datalib;
26650     +            %else %let scorecard_lib = work;
26652     +        ods &EM_REPORT_FORMAT exclude all;
26653     +        ods listing;
26654     +        %hpdm_scorecard(
26655     +            indata        = %str(&em_lib..&em_report_modelID._train),
26656     +            inVariableSet = &EM_USER_tempmeta,
26657     +            name          = &name_to_use,
26658     +            libname       = &scorecard_lib,
26659     +            crosstab      = &EM_PROPERTY_CROSSTABS,
26660     +            targetVar     = &scorecard_target,
26661     +            targetVar2    = &rpt_rpm_targetName,
26662     +            targetLevel   = &rpt_rpm_targetLevel,
26663     +            freqVar       = &freqVar,
26664     +            outVarRank    = &EM_USER_VarRank,
26665     +            outScoreCard  = &EM_USER_ScoreCard
26666     +        );
26667     +        ods listing close;
26668     +        ods &EM_REPORT_FORMAT select all;
26670     +        /* 3.4 - Variable Ranking from PROC HPREDUCE */
26672     +        %if &EM_PROPERTY_VARRANKING eq Y %then %do;
26673     +            ods &EM_REPORT_FORMAT text=" ";
26674     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
26675     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvarranking_title, NOQUOTE))";
26676     +            proc print data=&EM_USER_VARRANK noobs;
26677     +                var number variable;
26678     +            run;
26679     +        %end;
26680     +    %end;
26681     + %end;
26684     +/* RPM-5. Cumulative Lift chart *********************************************************************/
26686     +%if &EM_PROPERTY_LIFTCHART eq Y %then %do;
26688     +    %let em_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
26690     +    %if %sysfunc(exist(&em_rank)) %then %do;
26692     +        %EM_GETNAME(key=LIFT, type=DATA);
26693     +        data &EM_USER_LIFT;
26694     +            set &em_rank end=eof;
26695     +            if eof then call symput("_tarexists_", strip(target));
26697     +                 if upcase(strip(datarole)) eq 'TRAIN'    then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_roletrain_value,    NOQUOTE))";
26698     +            else if upcase(strip(datarole)) eq 'RAW'      then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_roleraw_value,      NOQUOTE))";
26699     +            else if upcase(strip(datarole)) eq 'VALIDATE' then datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_rolevalidate_value, NOQUOTE))";
26700     +            datarole = strip(datarole);
26701     +        run;
26703     +        %let em_class=&em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
26705     +        %if (%sysfunc(exist(&em_class)) and "&rpt_rpm_targetLevel" ne "INTERVAL" )
26706     +        %then %do;
26707     +            %let this_title = rpt_rptcumliftchart_title;
26708     +            %let this_plotY = liftc;
26709     +        %end;
26710     +        %else %do;
26711     +            %let this_title = rpt_rptmeanpredresp_title;
26712     +            %let this_plotY = _MEANP_;
26713     +        %end;
26715     +        ods path(prepend) work.templat(update);
26716     +        proc template;
26717     +            define statgraph liftplot / store=work.templat;
26718     +                begingraph / designheight=470px;
26719     +                    %if "&EM_REPORT_TITLE" ne ""
26720     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
26721     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
26722     +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, &this_title, NOQUOTE))";
26723     +                    layout overlay;
26724     +                        seriesplot x=decile y=&this_plotY
26725     +                            / group =datarole lineattrs=(pattern=solid) name='lift';
26726     +                        discretelegend 'lift' ;
26727     +                    endlayout;
26728     +                endgraph;
26729     +            end;
26730     +        run;
26732     +        proc sgrender data=&EM_USER_LIFT
26733     +            %if "&_tarexists_" ne "." %then %do; (where=(target="&rpt_rpm_targetName")) %end;
26734     +            template=liftplot;
26735     +        run;
26736     +    %end;
26737     +%end;
26739     +/* RPM-6. Cumulative captured response chart *********************************************************/
26741     +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
26743     +    %EM_GETNAME(key=CAPRESPONSE, type=DATA);
26745     +    %let em_report_rank = &em_lib..%sysfunc(trim(&em_report_modelid))_emrank;
26747     +    %if %sysfunc(exist(&em_report_rank)) %then %do;
26749     +        %let em_report_class = &em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
26751     +        %if (%sysfunc(exist(&em_report_class)) and "&rpt_rpm_targetLevel" ne "INTERVAL" ) %then %do;
26753     +            /* generate % values and create categorical x values for plotting purposes */
26754     +            data &EM_USER_CAPRESPONSE;
26755     +                set &em_report_rank end=eof;
26756     +                length baseCat bestCat capCat decCat liftCat liftCCat $5;
26757     +                format basecapcp bestcapcp capcp decilep PERCENT6.0;
26758     +                basecapcp = basecapc / 100;  baseCat= put(basecapcp, PERCENT6.0 -L);
26759     +                bestcapcp = bestcapc / 100;  bestCat= put(bestcapcp, PERCENT6.0 -L);
26760     +                capcp     = capc / 100;      capCat = put(capcp, PERCENT6.0 -L);
26761     +                decilep   = decile / 100;    decCat = put(decilep, PERCENT6.0 -L);
26762     +                liftCat = lift;
26763     +                liftCCat= liftC;
26764     +                if eof then call symput("_tarexists_", strip(target));
26765     +            run;
26767     +            /* create template for Captured Response Plot */
26769     +            ods path(prepend) work.templat(update);
26770     +            proc template;
26771     +                define statgraph reg_emrank / store=work.templat;
26772     +                    begingraph / designheight=470px;
26773     +                    %if "&EM_REPORT_TITLE" ne ""
26774     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
26775     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
26776     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelgains_title, NOQUOTE))";
26777     +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE)) yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumcaptresponse_vlabel, NOQUOTE))");
26778     +                            seriesplot x=deccat y=basecapcp / lineattrs=(pattern=solid) name='base'  legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbase_vlabel, NOQUOTE))";
26779     +                            seriesplot x=deccat y=bestcapcp / lineattrs=(pattern=solid) name='best'  legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbest_vlabel, NOQUOTE))";
26780     +                            seriesplot x=deccat y=capcp     / lineattrs=(pattern=solid) name='model' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26781     +                            innermargin / align=bottom;
26782     +                                blockplot x=deccat block=liftCcat / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumlift_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26783     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
26784     +                                blockplot x=deccat block=liftcat  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptlift_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26785     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
26786     +                                blockplot x=deccat block=capcat   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26787     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
26788     +                                blockplot x=deccat block=bestcat  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptbest_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26789     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata2 altfillattrs=graphdata2;
26790     +                                blockplot x=deccat block=deccat   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26791     +                                                                    repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault altfillattrs=graphdatadefault;
26792     +                            endinnermargin;
26793     +                            * discretelegend "base" "best" "model" / across=1 location=inside halign=right valign=bottom;
26794     +                        endlayout;
26795     +                    endgraph;
26796     +                end;
26797     +            run;
26798     +        %end;
26799     +        %else %do;
26801     +            /* generate % values and create categorical x values for plotting purposes */
26802     +            data &EM_USER_CAPRESPONSE;
26803     +                set &em_report_rank end=eof;
26804     +                length decCat $5;
26805     +                format  decilep PERCENT6.0;
26806     +                decilep = decile / 100;
26807     +                decCat = put(decilep, PERCENT6.0 -L);
26808     +                if eof then call symput("_tarexists_", strip(target));
26809     +            run;
26811     +            /* create template for Captured Response Plot */
26812     +            ods path(prepend) work.templat(update);
26813     +            proc template;
26814     +                define statgraph reg_emrank / store=work.templat;
26815     +                    begingraph / designheight=470px ;
26816     +                    %if "&EM_REPORT_TITLE" ne ""
26817     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
26818     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
26819     +                        entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptmodelgainspred_title, NOQUOTE))";
26820     +                        layout overlay / cycleattrs=true xaxisopts=(display=(LINE)) yaxisopts=(label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredresp_vlabel, NOQUOTE))");
26821     +                            seriesplot x=deccat y=_meanp_ / lineattrs=(pattern=solid) name='mean' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_mean_vlabel, NOQUOTE))";
26822     +                            seriesplot x=deccat y=_minp_ / lineattrs=(pattern=solid) name='min' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_minimum_vlabel, NOQUOTE))";
26823     +                            seriesplot x=deccat y=_maxp_     / lineattrs=(pattern=solid) name='max' legendlabel="%sysfunc(sasmsg(sashelp.dmine, rpt_maximum_vlabel, NOQUOTE))";
26824     +                            innermargin / align=bottom;
26825     +                                blockplot x=deccat block=_targetmean_  / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmean_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26826     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
26827     +                                blockplot x=deccat block=_targetmin_   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmin_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26828     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
26829     +                                blockplot x=deccat block=_targetmax_   / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rpttargetmax_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26830     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
26831     +                                blockplot x=deccat block=_meanp_       / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmean_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26832     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata5 altfillattrs=graphdata5;
26833     +                                blockplot x=deccat block=_minp_        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmin_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26834     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata4 altfillattrs=graphdata4;
26835     +                                blockplot x=deccat block=_maxp_        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpredmax_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26836     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdata3 altfillattrs=graphdata3;
26837     +                                blockplot x=deccat block=deccat        / label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptdecile_vlabel, NOQUOTE))" valuehalign=center filltype=alternate
26838     +                                                                         repeatedvalues=true valueattrs=(size=7) VALUEFITPOLICY=SHRINK  fillattrs=graphdatadefault altfillattrs=graphdatadefault;
26839     +                            endinnermargin;
26840     +                            * discretelegend "mean" "min" "max" / across=1 location=inside halign=left valign=bottom;
26841     +                        endlayout;
26842     +                    endgraph;
26843     +                end;
26844     +            run;
26845     +        %end;
26847     +        /* render plot */
26849     +        %let validflag=0;
26850     +        data tempvalid;
26851     +            set &EM_USER_CAPRESPONSE(where=(datarole="VALIDATE"));
26852     +        run;
26854     +        %let dsid = %sysfunc(open(work.tempvalid));
26855     +        %if &dsid %then %do;
26856     +            %let validobs = %sysfunc(attrn(&dsid, NOBS));
26857     +            %if &validobs gt 0 %then %let validflag = 1;
26858     +        %end;
26859     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26861     +        proc sgrender data=&EM_USER_CAPRESPONSE
26862     +            %if "&_tarexists_" ne "." %then %do; (where=(target="&rpt_rpm_targetName"))%end;
26863     +            template=reg_emrank;
26864     +            %if &validflag eq 1
26865     +                %then %do; where datarole="VALIDATE"; %end;
26866     +                %else %do; where datarole="TRAIN";    %end;
26867     +        run;
26868     +    %end;
26869     +%end;
26872     +/* RPM-7. ROC CHART ******************************************************************************************/
26874     +%if ((&RPM_REPORT_MDLCOMP ne ) or (&em_report_modelid ne )) and (&EM_PROPERTY_BASICOUTPUT eq Y) %then %do;
26876     +    %let em_report_roc = &em_lib..&RPM_REPORT_MDLCOMP._emroc;
26877     +    %let em_report_hpassess = &em_lib..%sysfunc(trim(&em_report_modelid))_hpassess;
26878     +    %let em_report_hpstats  = &em_lib..%sysfunc(trim(&em_report_modelid))_hpreportstats;
26880     +    %EM_GETNAME(key=ROC, type=DATA);
26881     +    %let plot_KS  = 0;
26882     +    %let plot_ROC = 0;
26883     +    %let train_X  = 0; %let train_Y  = 0; %let train_KS = 0;
26884     +    %let valid_X  = 0; %let valid_Y  = 0; %let valid_KS = 0;
26886     +    %if %sysfunc(exist(&em_report_roc)) %then %do;
26888     +        proc sql noprint;
26889     +            select count(*) into :validroc from &em_report_roc where datarole eq "VALIDATE";
26890     +        quit;
26892     +        /* make the ROC table */
26893     +        data &EM_USER_ROC;
26894     +            length group $32 diff 8;
26895     +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26896     +            set &em_report_roc;
26897     +            if strip(model)='_Baseline_'
26898     +                then group='Baseline';
26899     +                else group=Datarole;
26900     +            where (strip(model) ='_Baseline_' and DataRole='TRAIN') or (strip(model)= "&em_report_modelid" and DataRole in('TRAIN','VALIDATE'));
26901     +            diff = sensitivity-oneminusspecificity;
26902     +        run;
26904     +        /* get KS statistics */
26906     +        proc sql noprint;
26907     +            create table ks_stat as
26908     +                select distinct datarole, max(diff) as ks from &EM_USER_ROC group by datarole;
26909     +            select round(ks, 0.00001) into :train_ks
26910     +                from ks_stat where datarole eq 'TRAIN';
26911     +            select round(ks, 0.00001) into :valid_ks
26912     +                from ks_stat where datarole eq 'VALIDATE';
26913     +            select oneMinusSpecificity, sensitivity into :train_x, :train_y
26914     +                from &EM_USER_ROC where datarole eq 'TRAIN' and round(diff, 0.00001) eq &train_ks;
26915     +            select oneMinusSpecificity, sensitivity into :valid_x, :valid_y
26916     +                from &EM_USER_ROC where datarole eq 'VALIDATE' and round(diff, 0.00001) eq &valid_ks;
26917     +        quit;
26919     +        %let plot_KS = 1;
26920     +        %let plot_ROC = 1;
26921     +    %end;
26922     +    %else %if %sysfunc(exist(&em_report_hpassess)) and "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
26924     +        /* make the ROC table */
26926     +        proc sql noprint;
26927     +            select count(*) into :validroc from &em_report_hpassess where datarole eq "VALIDATE";
26928     +        quit;
26930     +        data &EM_USER_ROC;
26931     +            length group $32;
26932     +            group='Baseline';
26933     +            sensitivity = 0; oneminusspecificity = 0; output;
26934     +            sensitivity = 1; oneminusspecificity = 1; output;
26935     +        run;
26937     +        data &EM_USER_ROC;
26938     +            length group $32;
26939     +            set &em_report_hpassess(in=in1 rename=(one_minus_specificity=oneminusspecificity)) &EM_USER_ROC;
26940     +            if in1 then group=datarole;
26941     +            label group="&em_report_modeldesc %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
26942     +        run;
26944     +        /* get KS statistics */
26946     +        %if %sysfunc(exist(&em_report_hpstats)) %then %do;
26948     +             data _null_;
26949     +                set &em_report_hpstats;
26950     +                if upcase(stat) eq 'KSREF' then call symput('train_X', put(train,best24.));
26951     +                if upcase(stat) eq 'KSR'   then call symput('train_KS',round(train,0.00001));
26952     +                %if &validroc ge 1 %then %do;
26953     +                    if upcase(stat) eq 'KSREF' then call symput('valid_X', put(validate,best24.));
26954     +                    if upcase(stat) eq 'KSR'   then call symput('valid_KS',round(validate,0.00001));
26955     +                %end;
26956     +            run;
26958     +            data _null_;
26959     +                tmp=&train_X+&train_KS/100; call symput('train_Y',put(tmp,best24.));
26960     +                tmp=&valid_X+&valid_KS/100; call symput('valid_Y',put(tmp,best24.));
26961     +            run;
26963     +            %if &train_Y gt 0 %then %let plot_KS = 1;
26964     +            %let plot_ROC = 1;
26965     +        %end;
26966     +    %end;
26968     +    %if &plot_ROC eq 1 %then %do;
26970     +        /* add coordinates for ref lines */
26971     +        data refline;
26972     +            length oneminusspecificity sensitivity x y 8 datarole $8 group $32 text $60;
26973     +            %if &train_Y gt 0 %then %do;
26974     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'; group='TRAIN';
26975     +                text=""; x=.; y=.; output;
26976     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_X; datarole='TRAIN'; group='TRAIN';
26977     +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_trainks_vlabel, NOQUOTE))","&train_KS"); x=&TRAIN_X; y=&TRAIN_X - 0.05; output;
26978     +                oneminusspecificity=&TRAIN_X; sensitivity=&TRAIN_Y; datarole='TRAIN'; group='TRAIN';
26979     +                text=""; x=.; y=.; output;
26980     +            %end;
26981     +            %if &validroc ge 1 and &valid_Y gt 0 %then %do;
26982     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y; datarole='VALIDATE'; group='VALIDATE';
26983     +                text=""; x=.; y=.; output;
26984     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_X; datarole='VALIDATE'; group='VALIDATE';
26985     +                text=catx(' = ',"%sysfunc(sasmsg(sashelp.dmine, rpt_validks_vlabel, NOQUOTE))","&valid_KS"); x=&VALID_X; y=&VALID_X - 0.05; output;
26986     +                oneminusspecificity=&VALID_X; sensitivity=&VALID_Y; datarole='VALIDATE'; group='VALIDATE';
26987     +                text=""; x=.; y=.; output;
26988     +            %end;
26989     +        data &EM_USER_ROC;
26990     +           set &EM_USER_ROC refline;
26991     +           if group eq 'TRAIN'    then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel, NOQUOTE))";
26992     +           if group eq 'VALIDATE' then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel, NOQUOTE))";
26993     +           if group eq 'Baseline' then group = "%sysfunc(sasmsg(sashelp.dmine, rpt_baselineroc_value, NOQUOTE))";
26994     +        run;
26996     +        /* plot ROC chart */
26997     +        ods path(prepend) work.templat(update);
26998     +        proc template;
26999     +            define statgraph rocplot / store=work.templat;
27000     +                begingraph / designheight=470px;
27001     +                    %if "&EM_REPORT_TITLE" ne ""
27002     +                        %then %do; entrytitle "&EM_REPORT_TITLE"; %end;
27003     +                        %else %do; entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_reporttitleone_title, NOQUOTE))"; %end;
27004     +                    entrytitle "%sysfunc(sasmsg(sashelp.dmine, rpt_rptroc_title, NOQUOTE))";
27005     +                    layout overlay;
27006     +                        seriesplot x=oneminusspecificity y=sensitivity / group =group lineattrs=(pattern=solid) name='series';
27007     +                        %if &plot_ks eq 1 %then %do;
27008     +                            scatterplot x=x y=y / group=group datalabel=text  datalabelattrs=(weight=bold) markerattrs=(size=0px);
27009     +                        %end;
27010     +                        discretelegend 'series' / title="&em_report_modeldesc  %sysfunc(sasmsg(sashelp.dmine, rpt_rptmodel_vlabel, NOQUOTE))";
27011     +                    endlayout;
27012     +                endgraph;
27013     +            end;
27014     +        run;
27016     +        proc sort data=&EM_USER_ROC; by group oneminusspecificity; run;
27017     +        proc sgrender data=&EM_USER_ROC template=rocplot; run;
27018     +        title1; title2;
27019     +    %end;
27020     +%end;
27022     +/* RPM-8. Scorecard *****************************************************************************************/
27024     +%if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
27026     +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 0 %then %do;
27028     +        %let ColPercNum = 0;
27029     +        %let sdsid = %sysfunc(open(&EM_USER_SCORECARD));
27030     +        %let colPercnum = %sysfunc(varnum(&sdsid, colPercent));
27031     +        %if &sdsid %then %let sdsid = %sysfunc(close(&sdsid));
27033     +        %let tmpstr1 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_scpoints, NOQUOTE));
27034     +        %let tmpstr2 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_overall, NOQUOTE));
27035     +        %let tmpstr3 = %sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_singleN, NOQUOTE));
27037     +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL" and &colPercnum gt 0
27038     +        %then %do;
27040     +            ods &EM_REPORT_FORMAT text=" ";
27041     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
27042     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
27044     +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
27045     +                class displayvar rowVariable varvalue &rpt_rpm_targetName / missing;
27046     +                var allfreq allPercent scorepoints colpercent frequency;
27047     +                keylabel sum=" ";
27048     +                table displayvar*varvalue,
27049     +                    (scorepoints="&tmpstr1" allfreq="&tmpstr2 &tmpstr3" allpercent="&tmpstr2 %" )
27050     +                    &rpt_rpm_targetName*(frequency="&tmpstr3" colPercent="%" )
27051     +                    / indent=3 rtspace=32 style=[outputwidth=100%];
27052     +            run; quit;
27053     +        %end;
27054     +        %else %do;
27056     +            ods &EM_REPORT_FORMAT text=" ";
27057     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
27058     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrmpscorecard_title, NOQUOTE))";
27060     +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
27061     +                class displayvar / missing;
27062     +                keylabel sum=" ";
27063     +                class varvalue / missing;
27064     +                var scorepoints;
27065     +                table displayvar*varvalue, (scorepoints="&tmpstr1")*sum
27066     +                    / misstext = " " indent = 3 rtspace=32;
27067     +            run; quit;
27068     +         %end;
27069     +    %end;
27071     +    /* this part definitely need review mxx*/
27072     +    %if %sysfunc(exist(&EM_USER_ScoreCard)) ne 0 and &runHP eq 1 %then %do;
27074     +        %if &EM_PROPERTY_CROSSTABS eq Y and "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
27075     +            ods &EM_REPORT_FORMAT text=" ";
27076     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
27077     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptscorecard_crosstab_title, NOQUOTE))";
27078     +            proc tabulate data=&EM_USER_SCORECARD order=data noseps;
27079     +                class displayvar rowVariable displayLvl &rpt_rpm_targetName / MISSING;
27080     +                var allfreq allPercent scorepoints colpercent frequency;
27081     +                keylabel sum=" ";
27082     +                table displayvar * displayLvl, (scorepoints="Scorecard Points" allfreq="Overall N" allpercent="Overall %" )
27083     +                    &rpt_rpm_targetName*(frequency="N" colPercent="%" )
27084     +                    / indent=3 rtspace=32 style=[outputwidth=100%];
27085     +            run; quit;
27086     +        %end;
27087     +        %else %do;
27088     +            ods &EM_REPORT_FORMAT text=" ";
27089     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
27090     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptrpmscorecard_title, NOQUOTE))";
27091     +            proc tabulate data = &EM_USER_SCORECARD order=data noseps;
27092     +                class displayvar / MISSING;
27093     +                keylabel sum=" ";
27094     +                class displayLvl / missing;
27095     +                var SCOREPOINTS;
27096     +                table displayvar * displayLvl, (scorepoints="Scorecard Points")  * sum / misstext = " "
27097     +                      indent = 3 rtspace=32 style=[outputwidth=50%];
27098     +            run; quit;
27099     +        %end;
27100     +    %end;
27101     +%end;
27103     +%if &RPM_REPORT_SCORENODE ne %then %do;
27105     +    /* RPM-9. Classification matrix *********************************************************************/
27107     +    %if &EM_PROPERTY_CLASSIFICATION eq Y %then %do;
27109     +        %let em_report_class = &em_lib..%sysfunc(trim(&em_report_modelid))_emclassification;
27111     +        %if %sysfunc(exist(&em_report_class)) %then %do;
27113     +            %EM_GETNAME(key=MISCLASS, type=DATA);
27114     +            data &EM_USER_MISCLASS;
27115     +                set &em_report_class;
27116     +                where _TYPE_="PREDICTION" AND TARGET="&rpt_rpm_targetName";
27117     +            run;
27119     +            %let numobs=0;
27120     +            %let dsid = %sysfunc(open(&EM_USER_MISCLASS));
27121     +            %let numobs = %sysfunc(attrn(&dsid, NOBS));
27122     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27124     +            %if (%sysfunc(exist(&em_USER_MISCLASS)) and &numobs gt 0) %then %do;
27126     +                ods &EM_REPORT_FORMAT text=" ";
27127     +                %if "%nrbquote(&rpt_rpm_targetLabel)" ne "" %then %do;
27128     +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
27129     +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, %nrstr(&rpt_rpm_targetLabel)))";
27130     +                %end;
27131     +                %else %do;
27132     +                    ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
27133     +                    ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptclassmatrix_title, NOQUOTE, &rpt_rpm_targetName))";
27134     +                %end;
27136     +                proc tabulate data=&EM_USER_MISCLASS order=data noseps;
27137     +                    keylabel sum=" ";
27138     +                    class from into datarole;
27139     +                    var pct_col;
27140     +                    table from , (datarole*into='Predicted') * pct_col="" / style=[outputwidth=50%];
27141     +                run; quit;
27142     +            %end;
27143     +        %end;
27144     +    %end;
27146     +    /* RPM-10. Fit Statistics **************************************************************************/
27148     +    %if &EM_PROPERTY_FITSTAT eq Y %then %do;
27150     +        %let fitdat1 =&em_lib..&RPM_REPORT_MDLCOMP._emreportfit;
27151     +        %let fitdat2 =&em_lib..&em_report_modelid._emreportfit;
27153     +        /* prefer to use HPREPORTSTATS table from the modeling nodel */
27155     +        %if %sysfunc(exist(&em_lib..&em_report_modelid._hpreportstats)) %then %do;
27157     +            %EM_GETNAME(key=REPORTFIT, type=DATA);
27159     +            data &EM_USER_REPORTFIT;
27160     +                set &em_lib..&em_report_modelid._hpreportstats;
27161     +            run;
27163     +            %let validfit=0;
27164     +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
27165     +            %if &dsid %then %do;
27166     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
27167     +                %if &validnum %then %let validfit = 1;
27168     +            %end;
27169     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27171     +            ods &EM_REPORT_FORMAT text=" ";
27172     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
27173     +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
27175     +            proc print data=&EM_USER_REPORTFIT label noobs style=[outputwidth=50%];
27176     +                %if &validfit eq 1 %then %do;
27177     +                    var Label Train Validate;
27178     +                    format Train 12.4 Validate 12.4;
27179     +                %end;
27180     +                %else %do;
27181     +                    var Label Train;
27182     +                    format Train 12.4;
27183     +                %end;
27184     +            run;
27185     +        %end;
27186     +        %else %if %sysfunc(exist(&fitdat1)) or %sysfunc(exist(&fitdat2)) %then %do;
27188     +            %EM_GETNAME(key=REPORTFIT, type=DATA);
27190     +            data &EM_USER_REPORTFIT;
27191     +                length Label $40;
27192     +                label Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, NOQUOTE))";
27193     +                %if %sysfunc(exist(&fitdat1)) eq 1
27194     +                    %then %do; set &fitdat1; %end;
27195     +                    %else %do; set &fitdat2.(rename=(stat=fitstat)); %end;
27197     +                if FitStat='_LIFT_'  then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptlift10_vlabel, NOQUOTE))";
27198     +                if FitStat='_LIFTC_' then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumlift10_vlabel, NOQUOTE))";
27199     +                if FitStat='_CAP_'  then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcaptresp10_vlabel, NOQUOTE))";
27200     +                if FitSTat='_CAPC_' then Label="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcumcaptresp10_vlabel, NOQUOTE))";
27201     +                if FitSTat='_NOBS_' then Label="%sysfunc(sasmsg(sashelp.dmine, stat_nobs_vlabel, NOQUOTE))";
27202     +                if FitSTat='_MISC_' then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_misc_vlabel, NOQUOTE))";
27203     +                if FitSTat='_MAX_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_max_vlabel, NOQUOTE))";
27204     +                if FitSTat='_SSE_'  then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_sse_vlabel, NOQUOTE))";
27205     +                if FitSTat='_ASE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_ase, NOQUOTE))";
27206     +                if FitSTat='_RASE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_rase_vlabel, NOQUOTE))";
27207     +                if FitSTat='_DIV_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_div_vlabel, NOQUOTE))";
27208     +                if FitSTat='_DFT_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dft, NOQUOTE))";
27209     +                if FitSTat='_AIC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_aic, NOQUOTE))";
27210     +                if FitSTat='_MSE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_mse, NOQUOTE))";
27211     +                if FitSTat='_RMSE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rmse, NOQUOTE))";
27212     +                if FitSTat='_AVERR_' then Label = "%sysfunc(sasmsg(sashelp.dmine, stat_averr_vlabel, NOQUOTE))";
27213     +                if FitSTat='_DFE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfe, NOQUOTE))";
27214     +                if FitSTat='_DFM_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_dfm, NOQUOTE))";
27215     +                if FitSTat='_ERR_'  then Label= "%sysfunc(sasmsg(sashelp.dmine, stat_err_vlabel, NOQUOTE))";
27216     +                if FitSTat='_FPE_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_fpe, NOQUOTE))";
27217     +                if FitSTat='_NW_'   then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_nw, NOQUOTE))";
27218     +                if FitSTat='_RFPE_' then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_rfpe, NOQUOTE))";
27219     +                if FitSTat='_SBC_'  then Label = "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_label_sbc, NOQUOTE))";
27220     +            run;
27222     +            %let validfit=0;
27223     +            %let dsid = %sysfunc(open(&EM_USER_REPORTFIT));
27224     +            %if &dsid %then %do;
27225     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
27226     +                %if &validnum %then %let validfit = 1;
27227     +            %end;
27228     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27230     +            ods &EM_REPORT_FORMAT text=" ";
27231     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
27232     +            ods proclabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_modelfitstat_title, NOQUOTE))";
27234     +            proc print data=
27235     +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
27236     +                %then %do;
27237     +                    &EM_USER_REPORTFIT(where=(MODEL="&em_report_modelId" AND TARGET="&rpt_rpm_targetName"))
27238     +                %end;
27239     +                %else %do;
27240     +                    &EM_USER_REPORTFIT(where=(TARGET="&rpt_rpm_targetName"))
27241     +                %end;
27242     +                label noobs style=[outputwidth=50%];
27243     +                %if &validfit eq 1 %then %do;
27244     +                    var Label Train Validate;
27245     +                    format Train 12.4 Validate 12.4;
27246     +                    label
27247     +                        train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , NOQUOTE))"
27248     +                        validate = "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel , NOQUOTE))"
27249     +                    ;
27250     +                %end;
27251     +                %else %do;
27252     +                    var Label Train;
27253     +                    format Train 12.4;
27254     +                    label train = "%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , NOQUOTE))";
27255     +                %end;
27256     +                %if %sysfunc(exist(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit)) eq 1
27257     +                %then %do;
27258     +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_', '_ASE_', '_AUR_', '_GINI_', 'KS',
27259     +                                      '_KS_PROB_CUTOFF', '_LIFT_', '_LIFTC_', '_CAP_', '_CAPC_', '_AIC_', '_AVERR_',
27260     +                                      '_MAX_','_MSE_', '_RASE_', '_RMSE_', '_SBC_', '_SSE_') and TRAIN ne .;
27261     +                %end;
27262     +                %else %do;
27263     +                    where FitStat in ('_NOBS_', '_MISC_', '_LOSS_', '_ALOSS_', '_ASE_', '_AIC_', '_AVERR_', '_MAX_',
27264     +                                      '_MSE_', '_RASE_', '_RMSE_', '_SBC_', '_SSE_') and TRAIN ne .;
27265     +                %end;
27266     +            run;
27267     +        %end;
27268     +    %end;
27270     +    /* RPM-11. Model Comparison Table */
27272     +    %if &EM_PROPERTY_COMPAREMDL eq Y and RPM_REPORT_MDLCOMP ne %then %do;
27274     +        %EM_GETNAME(KEY=COMPAREMDL, TYPE=DATA);
27276     +        %let em_report_mdlOutfit = &em_lib..&RPM_REPORT_MDLCOMP._emoutfit;
27278     +        %if %sysfunc(exist(&em_report_mdlOutfit)) %then %do;
27280     +            /* determine model selection criterion - to included in print */
27281     +            %em_modelprops(dgmid=&em_lib, modelid=&RPM_REPORT_MDLCOMP, output=%nrbquote(work.modelprop));
27283     +            %let selectcrit = ;
27284     +            data _null_;
27285     +                set work.modelprop(where=(NAME="ModelCriteria")) end=eof;
27286     +                if eof then call symput('selectcrit', VALUE);
27287     +            run;
27289     +            %let selectstat=;
27290     +            %let choice = USE="Y";
27291     +            %let dsid = %sysfunc(open(&em_report_mdlOutfit(where=(&choice))));
27292     +            %if &dsid %then %do;
27293     +                %let obs = %sysfunc(fetchobs(&dsid, 1));
27294     +                %let selectstat = %sysfunc(VARNAME(&dsid, 6));
27295     +            %end;
27296     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27298     +            %let validflag=0;
27299     +            %let dsid = %sysfunc(open(&em_lib..&RPM_REPORT_MDLCOMP._emreportfit));
27300     +            %if &dsid %then %do;
27301     +                %let validnum = %sysfunc(VARNUM(&dsid, VALIDATE));
27302     +                %if &validnum %then %let validflag = 1;
27303     +            %end;
27304     +            %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27306     +            data &EM_USER_COMPAREMDL;
27307     +                set &em_report_mdlOutfit;
27308     +                keep use model modelDescription &selectstat
27309     +                %if "&rpt_rpm_targetLevel" ne "INTERVAL" %then %do;
27310     +                    %if &selectstat ne _LIFT_ %then %do; _LIFT_ %end;
27311     +                    %if &validflag eq 1 %then %do;
27312     +                        %if &selectstat ne _VLIFT_ %then %do; _VLIFT_ %end;
27313     +                    %end;
27314     +                    %if &selectstat ne _AIC_ %then %do; _AIC_  %end;
27315     +                %end;
27316     +                %else %do;
27317     +                    %if &selectstat ne _ASE_ %then %do; _ASE_ %end;
27318     +                    %if &validflag eq 1 %then %do;
27319     +                        %if &selectstat ne _VASE_ %then %do; _VASE_ %end;
27320     +                    %end;
27321     +                %end;
27322     +                ;
27323     +            run;
27325     +            ods &EM_REPORT_FORMAT text=" ";
27326     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcomparemdl_title, NOQUOTE, &selectcrit))";
27327     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptcomparemdl_title, NOQUOTE, &selectcrit))";
27329     +            proc print data=&EM_USER_COMPAREMDL label noobs style=[outputwidth=50%]; run;
27330     +        %end;
27331     +    %end;
27333     +    /* RPM-12. Project Info */
27335     +    %if &EM_PROPERTY_BASICOUTPUT eq Y %then %do;
27337     +        %let pos = %index(&em_nodedir, Workspaces);
27338     +        %if &pos %then %do;
27340     +            %let projpath = %nrbquote(%sysfunc(trim(%sysfunc(substr(&em_nodedir, 1, %eval(&pos-2))))));
27341     +            %let reverse = %nrbquote(%sysfunc(reverse(&projpath)));
27342     +            %let pos2 = %index(&reverse, &em_dsep);
27343     +            %let len = %length(&projpath);
27344     +            %let projname = %nrbquote(%substr(&projpath, %eval(2+ &len-&pos2)));
27345     +            %let projname =%nrbquote(%sysfunc(tranwrd(%nrstr(&projname), %str(%"),"")));
27346     +            %let wsname  = %nrbquote(%sysfunc(tranwrd(%nrstr(&em_wsname), %str(%"),"")));
27348     +            %EM_GETNAME(key=PROJINFO, type=DATA);
27349     +            data &EM_USER_PROJINFO;
27350     +                length stat $200 value $200;
27351     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name, NOQUOTE))";
27352     +                value="&projname";
27353     +                output;
27355     +                stat="%sysfunc(sasmsg(sashelp.dmine, views_descriptions_diagram, NOQUOTE))";
27356     +                value="&wsname";
27357     +                output;
27359     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_rptpath_title, NOQUOTE))";
27360     +                value="&projpath";
27361     +                output;
27363     +                %let createTime = %sysfunc(left(%sysfunc(putn(%sysfunc(dateTime()), NLDATM24.0))));
27364     +                stat="%sysfunc(sasmsg(sashelp.dmine, rpt_crdate_vlabel, NOQUOTE))";
27365     +                value="&createTime";
27366     +                output;
27368     +                label stat="%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))"
27369     +                      value="%sysfunc(sasmsg(sashelp.dmine, rpt_rptvalue_vlabel, NOQUOTE))";
27371     +            run;
27373     +            ods &EM_REPORT_FORMAT text=" ";
27374     +            ods &EM_REPORT_FORMAT text="%sysfunc(sasmsg(sashelp.dmine, rpt_rptprojinfo_title, NOQUOTE))";
27375     +            ods proclabel ="%sysfunc(sasmsg(sashelp.dmine, rpt_rptprojinfo_title, NOQUOTE))";
27377     +            proc print data=&EM_USER_PROJINFO noobs label style=[outputwidth=50%]; run;
27378     +        %end;
27379     +    %end;
27380     +%end;
27382     +%skip:
27384     +%mend em_report_summary;
27387     +%macro em_reporter_scorecard(
27388     +/**----------------------------------------------------------------------**/
27389     +/*  EM_REPORTER_SCORECARD                                                 */
27390     +/*    generate scorecard report for EM RPM flows. currently this is an    */
27391     +/*    interval macro for RPM and does not perform any argument checking.  */
27392     +/**----------------------------------------------------------------------**/
27393     +inData           = ,     /* input training data set                       */
27394     +inData2          = ,
27395     +inVariableSet    = ,     /* input variable metadata, must have the three  */
27396     +                         /* columns: level, role and &name                */
27397     +name             = name, /* variable name column in the metadata          */
27398     +libname          = work, /* libname to save the temporary binned data     */
27399     +crosstab         = Y,    /* create cross-tabulation or not. Default = Y   */
27400     +targetVar        = ,     /* target variable for regressions and scores    */
27401     +targetVar2       = ,     /* target variable for cross-tabulations         */
27402     +targetLevel      = ,     /* target level                                  */
27403     +freqVar          = ,     /* frequency variable                            */
27404     +outVarRank       = ,     /* output dataset for variable ranking (HPREDUCE)*/
27405     +outScorecard     =       /* output dataset for scorecard report           */
27406     +/**----------------------------------------------------------------------**/
27407     +/* Created: 08/20/2012, XXM                                               */
27408     +/**----------------------------------------------------------------------**/
27409     +);
27411     +/**--------------------------------------------------------------------------------------**/
27412     +/** 0. Configurations                                                                    **/
27413     +/**--------------------------------------------------------------------------------------**/
27415     +** get target level;
27416     +%let targetVar   = &targetVar;
27417     +%let targetVar2  = &targetVar2;
27418     +%let targetLevel = &targetLevel;
27420     +** check valid target name and level;    /* TBA */
27422     +** check VariableSet has LEVEL and NAME; /* TBA */
27424     +/**--------------------------------------------------------------------------------------**/
27425     +/** 1. Get the input variables from variable set                                         **/
27426     +/**--------------------------------------------------------------------------------------**/
27428     +%let nom_vars = ;
27429     +%let ord_vars = ;
27430     +%let int_vars = ;
27431     +%let n_nomvars = 0;
27432     +%let n_ordvars = 0;
27433     +%let n_intvars = 0;
27435     +data _null_;
27436     +    set &inVariableSet(where=(LEVEL in ('NOMINAL', 'BINARY') and upcase(&name) ne "&targetVar")) end=eof;
27437     +    call symput('nom_vars'!!strip(put(_N_,BEST.)), strip(&name));
27438     +    if eof then call symput('n_nomvars', strip(put(_N_,BEST.)));
27439     +data _null_;
27440     +    set &inVariableSet(where=(LEVEL='ORDINAL' and upcase(&name) ne "&targetVar")) end=eof;
27441     +    call symput('ord_vars'!!strip(put(_N_,BEST.)), strip(&name));
27442     +    if eof then call symput('n_ordvars', strip(put(_N_,BEST.)));
27443     +data _null_;
27444     +    set &inVariableSet(where=(LEVEL='INTERVAL' and upcase(&name) ne "&targetVar")) end=eof;
27445     +    call symput('int_vars'!!strip(put(_N_,BEST.)), strip(&name));
27446     +    if eof then call symput('n_intvars', strip(put(_N_,BEST.)));
27447     +run;
27449     +%let n_svars = %eval(&n_nomvars+&n_ordvars+&n_intvars);
27451     +%if ((&n_nomvars gt 0) OR (&n_ordvars gt 0) OR (&n_intvars gt 0)) %then %do;
27453     +    /**----------------------------------------------------------------------------------**/
27454     +    /** 2. PROC ARBOR                                                                    **/
27455     +    /**----------------------------------------------------------------------------------**/
27457     +    proc arbor data=&indata
27458     +        alpha=1 leafsize=5 mincatsize=5 maxbranch=8 maxdepth=1 NORULELIMIT
27459     +        maxrules=&n_svars maxsurrs=0 missing=USEINSEARCH exhaustive=5000
27460     +    ;
27461     +        %if &n_nomvars gt 0 %then %do;
27462     +            input %do i=1 %to &n_nomvars; &&nom_vars&i %end; / level = nominal;
27463     +        %end;
27464     +        %if &n_ordvars gt 0 %then %do;
27465     +            input %do i=1 %to &n_ordvars; &&ord_vars&i %end; / level = ordinal;
27466     +        %end;
27467     +        %if &n_intvars gt 0 %then %do;
27468     +            input %do i=1 %to &n_intvars; &&int_vars&i %end; / level = interval;
27469     +        %end;
27470     +        %if &freqvar ne %then %do; freq &freqvar; %end;
27471     +        target &targetVar / level=&targetLevel;
27472     +        save importance=importance rules=rules;
27473     +    run;
27475     +    /**----------------------------------------------------------------------------------**/
27476     +    /** 2. get VarRank output table                                                      **/
27477     +    /**----------------------------------------------------------------------------------**/
27479     +    /* keep only the top 50 input variables - based on rank */
27481     +    data &outVarRank(where=(rank le 50));
27482     +        length variable $32 worth 8;
27483     +        set rules;
27484     +        by rank;
27485     +        retain variable worth;
27486     +        label variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))";
27487     +        keep variable rank worth;
27489     +        if STAT="VARIABLE" then variable=Character_value;
27490     +        if STAT="WORTH" then worth=Numeric_value;
27491     +        if last.rank then output;
27492     +    run;
27494     +    data &outVarRank;
27495     +        set &outVarRank;
27496     +        if worth=. then do;
27497     +            worth = 0.00;
27498     +            rank  = _N_;
27499     +        end;
27500     +    run;
27502     +    /* selected interval and class input variables */
27503     +    proc sql noprint;
27504     +        create table tempclass(drop=&name) as
27505     +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
27506     +                on upcase(a.variable) eq upcase(b.&name)
27507     +            where level ne "INTERVAL"
27508     +            order by a.variable
27509     +        ;
27510     +        create table tempinterval(drop=&name) as
27511     +            select a.*, b.*  from &outVarRank as a left join &inVariableSet as b
27512     +                on upcase(a.variable) eq upcase(b.&name)
27513     +            where level eq "INTERVAL"
27514     +            order by a.variable
27515     +        ;
27516     +    quit;
27518     +    /* create array of class variables names */
27519     +    %let class_vars=;
27520     +    %let n_classvars=0;
27521     +    data _null_;
27522     +        set tempclass end=eof;
27523     +        call symput('class_vars'!!strip(put(_N_,BEST.)), strip(variable));
27524     +        if eof then call symput('n_classvars', strip(put(_N_,BEST.)));
27525     +    run;
27527     +    /**----------------------------------------------------------------------------------**/
27528     +    /** 3. Get Bining information                                                        **/
27529     +    /**----------------------------------------------------------------------------------**/
27531     +    %let dsid = %sysfunc(open(work.rules));
27532     +    %let numobs = %sysfunc(attrn(&dsid, NOBS));
27533     +    %let numvars = %sysfunc(attrn(&dsid, NVARS));
27534     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27536     +    %if %sysfunc(exist(&outVarRank)) and (&numobs gt 0) and (&numvars gt 0) %then %do;
27538     +        data rules;
27539     +            set rules;
27540     +            where STAT in ('VARIABLE', 'INTERVAL', 'MISSING');
27541     +            numeric_value = round(numeric_value, 0.001);
27542     +        proc sort data=rules;
27543     +            by rank numeric_value;
27544     +        run;
27546     +        data binning_rules;
27547     +            length origVar $32;
27548     +            set rules;
27549     +            by rank;
27550     +            retain origVar oldLB;
27551     +            keep origVar LB UB;
27553     +            if STAT="VARIABLE" then origVar = Character_value;
27554     +            if first.rank then oldLB=.;
27555     +            if STAT="INTERVAL" then do;
27556     +                LB = oldLB;
27557     +                UB = Numeric_value;
27558     +                oldLB=UB;
27559     +                output;
27560     +            end;
27561     +            if last.rank then do;
27562     +                LB=oldLB;
27563     +                UB = .;
27564     +                output;
27565     +            end;
27566     +        run;
27568     +        /* names for binning */
27569     +        proc sql noprint;
27570     +            create table tempbinnames(drop=variable) as
27571     +                select distinct origVar, role from binning_rules as a inner join tempinterval as b
27572     +                  on a.OrigVar eq b.variable;
27573     +        quit;
27575     +        /* get name server */
27576     +        proc dmdb data=tempbinnames outtable=tempbinnames nameserver;
27577     +            names origVar;
27578     +            prefix BIN_;
27579     +        run;
27581     +        /* merge binned names back to temp */
27582     +        proc sql noprint;
27583     +            create table binning_rules_names as
27584     +                select a.*, b.bin as binVar from binning_rules as a right join tempbinnames as b
27585     +                    on a.origVar eq b.origVar
27586     +                order by a.origVar, a.LB, a.UB;
27587     +        quit;
27589     +        /* create array of bin variables names */
27590     +        %let bin_vars=;
27591     +        %let n_binvars=0;
27592     +        data _null_;
27593     +            set tempbinnames end=eof;
27594     +            call symput('bin_vars'!!strip(put(_N_,BEST.)), strip(bin));
27595     +            if eof then call symput('n_binvars', strip(put(_N_,BEST.)));
27596     +        run;
27598     +    /**----------------------------------------------------------------------------------**/
27599     +    /** 4. Bin the interval variables                                                    **/
27600     +    /**    note that binned is used for DMREG, binned_full is used for CROSSTAB          **/
27601     +    /**----------------------------------------------------------------------------------**/
27603     +    data binned;
27604     +        set &indata;
27606     +        %if &n_binvars gt 0 %then %do;
27607     +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
27608     +        %end;
27610     +        %let dsid = %sysfunc(open(binning_rules_names));
27611     +        %if &dsid %then %do;
27612     +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
27613     +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
27614     +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
27615     +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
27617     +            %let obs     = %sysfunc(fetch(&dsid));
27618     +            %do %while(&obs=0);
27619     +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
27620     +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
27621     +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
27622     +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
27624     +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
27625     +                    %let count = 1;
27626     +                    if &origvar < &ub then &binvar = "&count: low - &ub";
27627     +                %end;
27628     +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
27629     +                    %let count = %eval(&count+1);
27630     +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
27631     +                %end;
27632     +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
27633     +                    %let count = 1;
27634     +                    &binvar = "&count: low - high";
27635     +                %end;
27636     +                %else %do;
27637     +                    %let count = %eval(&count+1);
27638     +                    else if &origvar < &ub AND &origvar >= &lb then &binvar = "&count: &lb - &ub";
27639     +                %end;
27641     +                %let obs = %sysfunc(fetch(&dsid));
27642     +            %end;
27643     +        %end;
27644     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27645     +    run;
27647     +    data binned_full;
27648     +        set &indata2;
27650     +        %if &n_binvars gt 0 %then %do;
27651     +            length %do i=1 %to &n_binvars; &&bin_vars&i %end; $50;
27652     +        %end;
27654     +        %let dsid = %sysfunc(open(binning_rules_names));
27655     +        %if &dsid %then %do;
27656     +            %let orignum = %sysfunc(VARNUM(&dsid, origVar));
27657     +            %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
27658     +            %let lbnum   = %sysfunc(VARNUM(&dsid, LB));
27659     +            %let ubnum   = %sysfunc(VARNUM(&dsid, UB));
27661     +            %let obs     = %sysfunc(fetch(&dsid));
27662     +            %do %while(&obs=0);
27663     +                %let origvar = %sysfunc(getvarc(&dsid, &orignum));
27664     +                %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
27665     +                %let lb   = %sysfunc(getvarn(&dsid, &lbnum));
27666     +                %let ub   = %sysfunc(getvarn(&dsid, &ubnum));
27668     +                %if "&lb" eq "." AND "&ub" ne "." %then %do;
27669     +                    %let count = 1;
27670     +                    if &origvar < &ub then &binvar = "&count: low - &ub";
27671     +                %end;
27672     +                %else %if "&lb" ne "." AND "&ub" eq "." %then %do;
27673     +                    %let count = %eval(&count+1);
27674     +                    else if &origvar >= &lb then &binvar = "&count: &lb - high";
27675     +                %end;
27676     +                %else %if "&lb" eq "." AND "&ub" eq "." %then %do;
27677     +                    %let count = 1;
27678     +                    &binvar = "&count: low - high";
27679     +                %end;
27680     +                %else %do;
27681     +                    %let count = %eval(&count+1);
27682     +                    else if &origvar < &ub AND &origvar >= &lb then &binvar = "&count: &lb - &ub";
27683     +                %end;
27685     +                %let obs     = %sysfunc(fetch(&dsid));
27686     +            %end;
27687     +        %end;
27688     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27689     +    run;
27691     +    /**----------------------------------------------------------------------------------**/
27692     +    /** 5. Generate scores                                                               **/
27693     +    /**----------------------------------------------------------------------------------**/
27695     +    proc dmdb batch data=binned dmdbcat=score_dmdb maxlevel=513 classout=_classout;
27696     +        class
27697     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
27698     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
27699     +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
27700     +        ;
27701     +        %if &freqvar ne %then %do; freq &freqvar; %end;
27702     +        %if "&targetLevel" eq  "INTERVAL" %then %do; var &targetVar; %end;
27703     +        target &targetVar;
27704     +    run; quit;
27706     +    proc dmreg data=binned dmdbcat=score_dmdb outest=coeff_est outterms=outterms noprint descending;
27707     +        class
27708     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
27709     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
27710     +            %if "&targetLevel" ne "INTERVAL" %then %do; &targetVar %end;
27711     +        ;
27712     +        %if &freqvar ne %then %do; freq &freqvar; %end;
27713     +        model &targetVar =
27714     +            %if &n_classvars gt 0 %then %do; %do i=1 %to &n_classvars; &&class_vars&i %end; %end;
27715     +            %if &n_binvars gt 0   %then %do; %do i=1 %to &n_binvars;   &&bin_vars&i   %end; %end;
27716     +            / coding=glm
27717     +        ;
27718     +    run;
27720     +    proc sql noprint;
27721     +        create table _score_tmp1 as
27722     +            select *, min(coefficient) as min_est,
27723     +                case when calculated min_est = coefficient then 0
27724     +                     else coefficient-calculated min_est
27725     +                end as est1
27726     +            from outterms
27727     +            where variable ne 'Intercept'
27728     +            group by variable
27729     +        ;
27730     +        create table _score_tmp2 as
27731     +            select *, max(est1) as max_est1, count(*) as counter
27732     +            from _score_tmp1
27733     +            group by variable
27734     +        ;
27735     +        create table &outScorecard(rename=(classlevel=value)) as
27736     +            select *, sum(max_est1/counter) as sum_max,
27737     +                case when est1=max_est1 then 1 else 0 end as max_cat,
27738     +                round(1000*((est1) / calculated sum_max)) as score
27739     +            from _score_tmp2
27740     +            order by variable, classlevel
27741     +        ;
27742     +        create table _classout2(rename=(name=variable level=value)) as
27743     +            select a.*, b.format
27744     +                from _classout as a left join &inVariableSet(keep=&name format) as b
27745     +                on a.name eq b.&name
27746     +            order by a.name, a.level
27747     +        ;
27748     +    quit;
27750     +    data &outScorecard;
27751     +        merge &outScorecard(in=_a) _classout2;
27752     +        by variable value;
27753     +        if _a;
27754     +        value = tranwrd(value, "'", "''");
27755     +        rename frequency   = AllFreq
27756     +               freqpercent = AllPercent;
27757     +        label  score       = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecardpoints_vlabel, NOQUOTE))"
27758     +               frequency   = "%sysfunc(sasmsg(sashelp.dmine, rpt_numObs_vlabel, NOQUOTE))"
27759     +               freqpercent = "%sysfunc(sasmsg(sashelp.dmine, rpt_rptperctobs_vlabel, NOQUOTE))";
27760     +    run;
27762     +    /* replace binned named with original var name instead */
27764     +    proc sort data=tempbinnames; by bin; run;
27766     +    data &outScorecard;
27767     +        merge &outScorecard(in=_a) tempbinnames(rename=(bin=variable origvar=displayVar)) ;
27768     +        by variable;
27769     +        if _a;
27770     +        if displayVar="" then displayVar=variable;
27771     +    run;
27773     +    /**----------------------------------------------------------------------------------**/
27774     +    /** 6. Generate crosstabs                                                            **/
27775     +    /**----------------------------------------------------------------------------------**/
27777     +    %if "&targetLevel" ne "INTERVAL" %then %do;
27779     +        ods &EM_REPORT_FORMAT exclude all;
27780     +        ods listing;
27782     +        data _null_;
27783     +            set &outScorecard end=eof;
27784     +            by variable;
27785     +            if _n_=1          then call execute("proc freq data=work.binned_full order=formatted addnames;");
27786     +            if first.variable then call execute("table "||variable||" * &targetVar2 / missing;");
27787     +            if eof then do;
27788     +                %if &freqvar ne %then %do; call execute("weight &freqvar;"); %end;
27789     +                call execute("ods output crosstabfreqs=tempfreq;");
27790     +                call execute("run;");
27791     +            end;
27792     +        run;
27794     +        data _null_;
27795     +            set &outScorecard end=eof;
27796     +            by variable value;
27798     +            if _n_=1 then do;
27799     +                call execute("data crosstabs;");
27800     +                call execute("  length varvalue $200 displayVar $32;");
27801     +                call execute("  set tempfreq(where=(_type_='11'));");
27802     +            end;
27804     +            if type="N" AND format eq "" then do;
27805     +                call execute("if "||Variable||" = "||value||" then do;");
27806     +            end;
27807     +            else do;
27808     +                if format ne ""
27809     +                    then call execute("%DMNORMCP(put("||variable||","||format||"), _normvar);");
27810     +                    else call execute("%DMNORMCP("||variable||", _normvar);");
27811     +                call execute("if strip(_normvar) = '"||strip(value)||"' then do;");
27812     +            end;
27814     +            call execute("  varvalue='"||strip(value)||"';");
27815     +            call execute("  scorepoints="||score||";");
27816     +            call execute("  allfreq="||allfreq||";");
27817     +            call execute("  allpercent="||allpercent||";");
27818     +            call execute("  displayVar='"||displayVar||"';");
27819     +            call execute("end;");
27821     +            if eof then call execute("run;");
27822     +        run;
27824     +        ods &EM_REPORT_FORMAT select all;
27825     +        ods listing close;
27827     +        proc sort data=crosstabs; by rowVariable varvalue; run;
27829     +        data &outScoreCard;
27830     +            set crosstabs;
27831     +            by rowVariable varvalue;
27832     +            if missing(scorepoints) then delete;
27833     +            if ^first.varvalue then do;
27834     +                 scorepoints=.;
27835     +                 allfreq=.;
27836     +                 allpercent=.;
27837     +            end;
27838     +            keep displayvar rowVariable varValue &targetVar2 scorepoints frequency colPercent allfreq allpercent ;
27839     +        run;
27840     +    %end;
27841     +    %else %do;
27842     +        data &outScoreCard;
27843     +            set &outScoreCard;
27844     +            rename value=varvalue score=scorepoints;
27845     +        run;
27846     +    %end;
27847     +%end;
27849     +/*    proc datasets lib=work nolist;*/
27850     +/*    run; quit;*/
27851     +%end;
27853     +%mend em_reporter_scorecard;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.em_gettrainpath.source' ;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_GETTRAINPATH.SOURCE.
27854     +%macro EM_GETTRAINPATH(NODEID=, OUTPATH=);
27855     +   proc display c=sashelp.emcore.pathscorecode.scl;
27856     +   run;
27857     +%mend EM_GETTRAINPATH;
27858     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_CREATE):   filename temp catalog 'sashelp.emutil.reporter_tagset_template.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_TAGSET_TEMPLATE.SOURCE.
27859     +Ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   Ods path(prepend) work.templat(update);
27860     +
27861     +/* emgraph.tpl */
27862     +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
27863     +define tagset tagsets.gtl / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define tagset tagsets.gtl / store=work.templat;
27864     +parent=tagsets.odsgraph;
MPRINT(EM_REPORT_CREATE):   parent=tagsets.odsgraph;
27865     +%let  map =<>%nrstr(&)%str(%')%str(%");
27866     +map="&map";
MPRINT(EM_REPORT_CREATE):   map="<>&'"";
27867     +mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
MPRINT(EM_REPORT_CREATE):   mapsub = '/&lt;/&gt;/&amp;/&#39;/&quot;/';
27868     +nobreakspace = ' ' no_byte_order_mark = yes;
MPRINT(EM_REPORT_CREATE):   nobreakspace = ' ' no_byte_order_mark = yes;
27869     +split = '<br/>';
MPRINT(EM_REPORT_CREATE):   split = '<br/>';
27870     +output_type = 'xml';
MPRINT(EM_REPORT_CREATE):   output_type = 'xml';
27871     +indent=2;
MPRINT(EM_REPORT_CREATE):   indent=2;
27872     +
27873     +define event options_set;
MPRINT(EM_REPORT_CREATE):   define event options_set;
27874     +    do / if $options['X'];
MPRINT(EM_REPORT_CREATE):   do / if $options['X'];
27875     +         set $xvar $options['X'];
MPRINT(EM_REPORT_CREATE):   set $xvar $options['X'];
27876     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27877     +         unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
27878     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27879     +
27880     +    do / if $options['Y'];
MPRINT(EM_REPORT_CREATE):   do / if $options['Y'];
27881     +         set $yvar $options['Y'];
MPRINT(EM_REPORT_CREATE):   set $yvar $options['Y'];
27882     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27883     +         unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
27884     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27885     +
27886     +    do / if $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['CATEGORY'];
27887     +         set $category $options['CATEGORY'];
MPRINT(EM_REPORT_CREATE):   set $category $options['CATEGORY'];
27888     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27889     +         unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
27890     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27891     +
27892     +    do / if $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['RESPONSE'];
27893     +         set $response $options['RESPONSE'];
MPRINT(EM_REPORT_CREATE):   set $response $options['RESPONSE'];
27894     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27895     +         unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
27896     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27897     +
27898     +    do / if $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITUPPER'];
27899     +         set $limitupper $options['LIMITUPPER'];
MPRINT(EM_REPORT_CREATE):   set $limitupper $options['LIMITUPPER'];
27900     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27901     +         unset $limitupper;
MPRINT(EM_REPORT_CREATE):   unset $limitupper;
27902     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27903     +
27904     +    do / if $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LIMITLOWER'];
27905     +         set $limitlower $options['LIMITLOWER'];
MPRINT(EM_REPORT_CREATE):   set $limitlower $options['LIMITLOWER'];
27906     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27907     +         unset $limitlower;
MPRINT(EM_REPORT_CREATE):   unset $limitlower;
27908     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27909     +
27910     +    do / if $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['WIDTH'];
27911     +         set $graphwidth $options['WIDTH'];
MPRINT(EM_REPORT_CREATE):   set $graphwidth $options['WIDTH'];
27912     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27913     +         unset $graphwidth;
MPRINT(EM_REPORT_CREATE):   unset $graphwidth;
27914     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27915     +
27916     +    do / if $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['HEIGHT'];
27917     +         set $graphheight $options['HEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $graphheight $options['HEIGHT'];
27918     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27919     +         unset $graphheight;
MPRINT(EM_REPORT_CREATE):   unset $graphheight;
27920     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27921     +
27922     +    do / if $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ROWS'];
27923     +         set $rows $options['ROWS'];
MPRINT(EM_REPORT_CREATE):   set $rows $options['ROWS'];
27924     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27925     +         unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
27926     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27927     +
27928     +    do / if $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLUMNS'];
27929     +         set $columns $options['COLUMNS'];
MPRINT(EM_REPORT_CREATE):   set $columns $options['COLUMNS'];
27930     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27931     +         unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
27932     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27933     +
27934     +    do / if $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE'];
27935     +         set $title $options['TITLE'];
MPRINT(EM_REPORT_CREATE):   set $title $options['TITLE'];
27936     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27937     +         unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title;
27938     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27939     +
27940     +    do / if $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE2'];
27941     +         set $title2 $options['TITLE2'];
MPRINT(EM_REPORT_CREATE):   set $title2 $options['TITLE2'];
27942     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27943     +         unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title2;
27944     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27945     +
27946     +do / if $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE3'];
27947     +         set $title3 $options['TITLE3'];
MPRINT(EM_REPORT_CREATE):   set $title3 $options['TITLE3'];
27948     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27949     +         unset $title3;
MPRINT(EM_REPORT_CREATE):   unset $title3;
27950     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27951     +
27952     +do / if $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   do / if $options['TITLE4'];
27953     +         set $title4 $options['TITLE4'];
MPRINT(EM_REPORT_CREATE):   set $title4 $options['TITLE4'];
27954     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27955     +         unset $title4;
MPRINT(EM_REPORT_CREATE):   unset $title4;
27956     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27957     +
27958     +    do / if $options['ID'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ID'];
27959     +         set $id $options['ID'];
MPRINT(EM_REPORT_CREATE):   set $id $options['ID'];
27960     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27961     +         unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
27962     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27963     +
27964     +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
27965     +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
27966     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27967     +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27968     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27969     +
27970     +    do / if $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PARENT'];
27971     +         set $parent $options['PARENT'];
MPRINT(EM_REPORT_CREATE):   set $parent $options['PARENT'];
27972     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27973     +         unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
27974     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27975     +
27976     +    do / if $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ABOVETEXT'];
27977     +         set $abovetext $options['ABOVETEXT'];
MPRINT(EM_REPORT_CREATE):   set $abovetext $options['ABOVETEXT'];
27978     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27979     +         unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
27980     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27981     +
27982     +    do / if $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['BELOWTEXT'];
27983     +         set $belowtext $options['BELOWTEXT'];
MPRINT(EM_REPORT_CREATE):   set $belowtext $options['BELOWTEXT'];
27984     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27985     +         unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
27986     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27987     +
27988     +    do / if $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LINKWIDTH'];
27989     +         set $linkwidth $options['LINKWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $linkwidth $options['LINKWIDTH'];
27990     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27991     +         unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
27992     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27993     +
27994     +    do / if $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODECOLOR'];
27995     +         set $nodecolor $options['NODECOLOR'];
MPRINT(EM_REPORT_CREATE):   set $nodecolor $options['NODECOLOR'];
27996     +    else;
MPRINT(EM_REPORT_CREATE):   else;
27997     +         unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
27998     +    done;
MPRINT(EM_REPORT_CREATE):   done;
27999     +
28000     +    do / if $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODESIZE'];
28001     +         set $nodesize $options['NODESIZE'];
MPRINT(EM_REPORT_CREATE):   set $nodesize $options['NODESIZE'];
28002     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28003     +         unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
28004     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28005     +
28006     +    do / if $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['NODETEXT'];
28007     +         set $nodetext $options['NODETEXT'];
MPRINT(EM_REPORT_CREATE):   set $nodetext $options['NODETEXT'];
28008     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28009     +         unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
28010     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28011     +
28012     +    do / if $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PFDITEMS'];
28013     +         set $pfditems $options['PFDITEMS'];
MPRINT(EM_REPORT_CREATE):   set $pfditems $options['PFDITEMS'];
28014     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28015     +         unset $pfditems;
MPRINT(EM_REPORT_CREATE):   unset $pfditems;
28016     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28017     +
28018     +    do / if $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDSTYLE'];
28019     +         set $gridstyle $options['GRIDSTYLE'];
MPRINT(EM_REPORT_CREATE):   set $gridstyle $options['GRIDSTYLE'];
28020     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28021     +         unset $gridstyle;
MPRINT(EM_REPORT_CREATE):   unset $gridstyle;
28022     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28023     +
28024     +    do / if $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDHEIGHT'];
28025     +         set $gridheight $options['GRIDHEIGHT'];
MPRINT(EM_REPORT_CREATE):   set $gridheight $options['GRIDHEIGHT'];
28026     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28027     +         unset $gridheight;
MPRINT(EM_REPORT_CREATE):   unset $gridheight;
28028     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28029     +
28030     +    do / if $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   do / if $options['GRIDWIDTH'];
28031     +         set $gridwidth $options['GRIDWIDTH'];
MPRINT(EM_REPORT_CREATE):   set $gridwidth $options['GRIDWIDTH'];
28032     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28033     +         unset $gridwidth;
MPRINT(EM_REPORT_CREATE):   unset $gridwidth;
28034     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28035     +
28036     +    do / if $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   do / if $options['ISGRIDVISIBLE'];
28037     +         set $isGridVisible $options['ISGRIDVISIBLE'];
MPRINT(EM_REPORT_CREATE):   set $isGridVisible $options['ISGRIDVISIBLE'];
28038     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28039     +         unset $isGridVisible;
MPRINT(EM_REPORT_CREATE):   unset $isGridVisible;
28040     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28041     +
28042     +    do / if $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   do / if $options['LAYOUTACTIVATED'];
28043     +         set $layoutActivated $options['LAYOUTACTIVATED'];
MPRINT(EM_REPORT_CREATE):   set $layoutActivated $options['LAYOUTACTIVATED'];
28044     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28045     +         unset $layoutActivated;
MPRINT(EM_REPORT_CREATE):   unset $layoutActivated;
28046     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28047     +
28048     +    do / if $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   do / if $options['PIELABELDISPLAY'];
28049     +         set $pieLabelDisplay $options['PIELABELDISPLAY'];
MPRINT(EM_REPORT_CREATE):   set $pieLabelDisplay $options['PIELABELDISPLAY'];
28050     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28051     +         unset $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   unset $pieLabelDisplay;
28052     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28053     +
28054     +    do / if $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORLIST'];
28055     +         set $colorlist $options['COLORLIST'];
MPRINT(EM_REPORT_CREATE):   set $colorlist $options['COLORLIST'];
28056     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28057     +         unset $colorlist;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
28058     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28059     +
28060     +    do / if $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   do / if $options['COLORINDEX'];
28061     +         set $colorindex $options['COLORINDEX'];
MPRINT(EM_REPORT_CREATE):   set $colorindex $options['COLORINDEX'];
28062     +    else;
MPRINT(EM_REPORT_CREATE):   else;
28063     +         unset $colorindex;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
28064     +    done;
MPRINT(EM_REPORT_CREATE):   done;
28065     +
28066     +end;
MPRINT(EM_REPORT_CREATE):   end;
28067     +
28068     +define event doc;
MPRINT(EM_REPORT_CREATE):   define event doc;
28069     +   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $silkindex 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
28070     +   eval $level 0;
28071     +end;
MPRINT(EM_REPORT_CREATE):   end;
28072     +
28073     +define event GraphStyle;
MPRINT(EM_REPORT_CREATE):   define event GraphStyle;
28074     +   pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28075     +   trigger StatXMLDecl;
MPRINT(EM_REPORT_CREATE):   trigger StatXMLDecl;
28076     +   put '<SASReport version="1.0" xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
MPRINT(EM_REPORT_CREATE):   put '<SASReport version="1.0" xmlns:style="http://www.sas.com/sasreportmodel/styles">' CR;
28077     +   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
MPRINT(EM_REPORT_CREATE):   put '<style:Scheme name="StatGraphScheme" version="9.2">' CR;
28078     +   trigger StatGraphScheme start;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme start;
28079     +   trigger StatDataDefaultScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataDefaultScheme;
28080     +   trigger StatTwoColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorRampScheme;
28081     +   trigger StatTwoColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTwoColorAltRampScheme;
28082     +   trigger StatThreeColorRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorRampScheme;
28083     +   trigger StatThreeColorAltRampScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatThreeColorAltRampScheme;
28084     +   trigger StatAxisLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAxisLineScheme;
28085     +   trigger StatReferenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatReferenceScheme;
28086     +   trigger StatGridLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatGridLineScheme;
28087     +   trigger StatOutlineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlineScheme;
28088     +   trigger StatBorderLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBorderLineScheme;
28089     +   trigger StatTitleTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatTitleTextScheme;
28090     +   trigger StatFootnoteTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFootnoteTextScheme;
28091     +   trigger StatDataTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatDataTextScheme;
28092     +   trigger StatLabelTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLabelTextScheme;
28093     +   trigger StatValueTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatValueTextScheme;
28094     +   trigger StatUnicodeTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatUnicodeTextScheme;
28095     +   trigger StatBackFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBackFillScheme;
28096     +   trigger StatWallFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatWallFillScheme;
28097     +   trigger StatFloorFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFloorFillScheme;
28098     +   trigger StatLegendFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatLegendFillScheme;
28099     +   trigger StatHeaderFillScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHeaderFillScheme;
28100     +   trigger StatOutlierScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatOutlierScheme;
28101     +   trigger StatFitScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFitScheme;
28102     +   trigger StatFit2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatFit2Scheme;
28103     +   trigger StatPredictionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionScheme;
28104     +   trigger StatConfidenceScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidenceScheme;
28105     +   trigger StatConfidence2Scheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConfidence2Scheme;
28106     +   trigger StatPredictionLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatPredictionLimitsScheme;
28107     +   trigger StatErrorScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatErrorScheme;
28108     +   trigger StatBoxMedianScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMedianScheme;
28109     +   trigger StatBoxMeanScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxMeanScheme;
28110     +   trigger StatBoxWhiskerScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxWhiskerScheme;
28111     +   trigger StatBoxScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBoxScheme;
28112     +   trigger StatHistogramScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatHistogramScheme;
28113     +   trigger StatBandScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBandScheme;
28114     +   trigger StatContourScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatContourScheme;
28115     +   trigger StatEllipseScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatEllipseScheme;
28116     +   trigger StatAnnoLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoLineScheme;
28117     +   trigger StatAnnoTextScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoTextScheme;
28118     +   trigger StatAnnoShapeScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAnnoShapeScheme;
28119     +   trigger StatSelectionScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatSelectionScheme;
28120     +   trigger StatConnectLineScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatConnectLineScheme;
28121     +   trigger StatMissingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatMissingScheme;
28122     +   trigger StatControlLimitsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatControlLimitsScheme;
28123     +   trigger StatRunTestScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatRunTestScheme;
28124     +   trigger StatStarsScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatStarsScheme;
28125     +   trigger StatClippingScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatClippingScheme;
28126     +   trigger StatBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatBlockScheme;
28127     +   trigger StatAltBlockScheme;
MPRINT(EM_REPORT_CREATE):   trigger StatAltBlockScheme;
28128     +   trigger GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle1;
28129     +   trigger GraphDataStyle2 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle2 / if !$stopDataStyles;
28130     +   trigger GraphDataStyle3 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle3 / if !$stopDataStyles;
28131     +   trigger GraphDataStyle4 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle4 / if !$stopDataStyles;
28132     +   trigger GraphDataStyle5 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle5 / if !$stopDataStyles;
28133     +   trigger GraphDataStyle6 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle6 / if !$stopDataStyles;
28134     +   trigger GraphDataStyle7 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle7 / if !$stopDataStyles;
28135     +   trigger GraphDataStyle8 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle8 / if !$stopDataStyles;
28136     +   trigger GraphDataStyle9 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle9 / if !$stopDataStyles;
28137     +   trigger GraphDataStyle10 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle10 / if !$stopDataStyles;
28138     +   trigger GraphDataStyle11 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle11 / if !$stopDataStyles;
28139     +   trigger GraphDataStyle12 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle12 / if !$stopDataStyles;
28140     +   trigger GraphDataStyle13 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle13 / if !$stopDataStyles;
28141     +   trigger GraphDataStyle14 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle14 / if !$stopDataStyles;
28142     +   trigger GraphDataStyle15 / if !$stopDataStyles;
MPRINT(EM_REPORT_CREATE):   trigger GraphDataStyle15 / if !$stopDataStyles;
28143     +   trigger StatGraphScheme finish;
MPRINT(EM_REPORT_CREATE):   trigger StatGraphScheme finish;
28144     +   put '</style:Scheme>' CR;
MPRINT(EM_REPORT_CREATE):   put '</style:Scheme>' CR;
28145     +   unset $stopDataStyles;
MPRINT(EM_REPORT_CREATE):   unset $stopDataStyles;
28146     +end;
MPRINT(EM_REPORT_CREATE):   end;
28147     +
28148     +%macro dataStyleAttrs(index);
28149     +    do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
28150     +        set $stopDataStyles 'true';
28151     +        break;
28152     +    done;
28153     +    put '<style:Style context="GraphDataStyle' &index '"';
28154     +    putq " color=" COLOR;
28155     +    putq " altColor=" CONTRASTCOLOR;
28156     +    putq " fillColor=" COLOR;
28157     +    putq " textColor=" CONTRASTCOLOR;
28158     +    putq " lineStyle=" LINESTYLE;
28159     +    putq " lineColor=" CONTRASTCOLOR;
28160     +    putq " markerSymbol=" MARKERSYMBOL;
28161     +    putq " markerColor=" CONTRASTCOLOR;
28162     +    put "/>" NL;
28163     +%mend;
28164     +
28165     + define event GraphDataStyle1;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle1;
28166     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28167     +    style=GraphData1;
MPRINT(EM_REPORT_CREATE):   style=GraphData1;
28168     +    %dataStyleAttrs(1);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 1 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28169     + end;
MPRINT(EM_REPORT_CREATE):   end;
28170     + define event GraphDataStyle2;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle2;
28171     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28172     +    style=GraphData2;
MPRINT(EM_REPORT_CREATE):   style=GraphData2;
28173     +    %dataStyleAttrs(2);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 2 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28174     + end;
MPRINT(EM_REPORT_CREATE):   end;
28175     +define event GraphDataStyle3;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle3;
28176     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28177     +    style=GraphData3;
MPRINT(EM_REPORT_CREATE):   style=GraphData3;
28178     +    %dataStyleAttrs(3);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 3 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28179     + end;
MPRINT(EM_REPORT_CREATE):   end;
28180     + define event GraphDataStyle4;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle4;
28181     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28182     +    style=GraphData4;
MPRINT(EM_REPORT_CREATE):   style=GraphData4;
28183     +    %dataStyleAttrs(4);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 4 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28184     + end;
MPRINT(EM_REPORT_CREATE):   end;
28185     + define event GraphDataStyle5;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle5;
28186     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28187     +    style=GraphData5;
MPRINT(EM_REPORT_CREATE):   style=GraphData5;
28188     +    %dataStyleAttrs(5);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 5 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28189     + end;
MPRINT(EM_REPORT_CREATE):   end;
28190     + define event GraphDataStyle6;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle6;
28191     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28192     +    style=GraphData6;
MPRINT(EM_REPORT_CREATE):   style=GraphData6;
28193     +    %dataStyleAttrs(6);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 6 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28194     + end;
MPRINT(EM_REPORT_CREATE):   end;
28195     + define event GraphDataStyle7;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle7;
28196     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28197     +    style=GraphData7;
MPRINT(EM_REPORT_CREATE):   style=GraphData7;
28198     +    %dataStyleAttrs(7);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 7 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28199     + end;
MPRINT(EM_REPORT_CREATE):   end;
28200     + define event GraphDataStyle8;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle8;
28201     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28202     +    style=GraphData8;
MPRINT(EM_REPORT_CREATE):   style=GraphData8;
28203     +    %dataStyleAttrs(8);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 8 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28204     + end;
MPRINT(EM_REPORT_CREATE):   end;
28205     + define event GraphDataStyle9;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle9;
28206     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28207     +    style=GraphData9;
MPRINT(EM_REPORT_CREATE):   style=GraphData9;
28208     +    %dataStyleAttrs(9);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 9 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28209     + end;
MPRINT(EM_REPORT_CREATE):   end;
28210     + define event GraphDataStyle10;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle10;
28211     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28212     +    style=GraphData10;
MPRINT(EM_REPORT_CREATE):   style=GraphData10;
28213     +    %dataStyleAttrs(10);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 10 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28214     + end;
MPRINT(EM_REPORT_CREATE):   end;
28215     + define event GraphDataStyle11;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle11;
28216     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28217     +    style=GraphData11;
MPRINT(EM_REPORT_CREATE):   style=GraphData11;
28218     +    %dataStyleAttrs(11);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 11 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28219     + end;
MPRINT(EM_REPORT_CREATE):   end;
28220     + define event GraphDataStyle12;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle12;
28221     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28222     +    style=GraphData12;
MPRINT(EM_REPORT_CREATE):   style=GraphData12;
28223     +    %dataStyleAttrs(12);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 12 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28224     + end;
MPRINT(EM_REPORT_CREATE):   end;
28225     + define event GraphDataStyle13;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle13;
28226     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28227     +    style=GraphData13;
MPRINT(EM_REPORT_CREATE):   style=GraphData13;
28228     +    %dataStyleAttrs(13);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 13 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28229     + end;
MPRINT(EM_REPORT_CREATE):   end;
28230     + define event GraphDataStyle14;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle14;
28231     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28232     +    style=GraphData14;
MPRINT(EM_REPORT_CREATE):   style=GraphData14;
28233     +    %dataStyleAttrs(14);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 14 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28234     + end;
MPRINT(EM_REPORT_CREATE):   end;
28235     + define event GraphDataStyle15;
MPRINT(EM_REPORT_CREATE):   define event GraphDataStyle15;
28236     +    pure_style;
MPRINT(EM_REPORT_CREATE):   pure_style;
28237     +    style=GraphData15;
MPRINT(EM_REPORT_CREATE):   style=GraphData15;
28238     +    %dataStyleAttrs(15);
MPRINT(DATASTYLEATTRS):   do / if !any(LINESTYLE, CONTRASTCOLOR, MARKERSYMBOL, COLOR);
MPRINT(DATASTYLEATTRS):   set $stopDataStyles 'true';
MPRINT(DATASTYLEATTRS):   break;
MPRINT(DATASTYLEATTRS):   done;
MPRINT(DATASTYLEATTRS):   put '<style:Style context="GraphDataStyle' 15 '"';
MPRINT(DATASTYLEATTRS):   putq " color=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " altColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " fillColor=" COLOR;
MPRINT(DATASTYLEATTRS):   putq " textColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " lineStyle=" LINESTYLE;
MPRINT(DATASTYLEATTRS):   putq " lineColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   putq " markerSymbol=" MARKERSYMBOL;
MPRINT(DATASTYLEATTRS):   putq " markerColor=" CONTRASTCOLOR;
MPRINT(DATASTYLEATTRS):   put "/>" NL;
MPRINT(EM_REPORT_CREATE):  ;
28239     + end;
MPRINT(EM_REPORT_CREATE):   end;
28240     +
28241     +define event BeginGraph;
MPRINT(EM_REPORT_CREATE):   define event BeginGraph;
28242     +putlog "BeginGraph";
MPRINT(EM_REPORT_CREATE):   putlog "BeginGraph";
28243     +   trigger GraphStyle;
MPRINT(EM_REPORT_CREATE):   trigger GraphStyle;
28244     +   put '<View>' CR;
MPRINT(EM_REPORT_CREATE):   put '<View>' CR;
28245     +   put '<StatGraph';
MPRINT(EM_REPORT_CREATE):   put '<StatGraph';
28246     +   put ' version="9.2_S2DVR"';
MPRINT(EM_REPORT_CREATE):   put ' version="9.2_S2DVR"';
28247     +   putq " designHeight=" $graphheight;
MPRINT(EM_REPORT_CREATE):   putq " designHeight=" $graphheight;
28248     +   putq " designWidth=" $graphwidth;
MPRINT(EM_REPORT_CREATE):   putq " designWidth=" $graphwidth;
28249     +   put ' style:style="StatGraphStyle';
MPRINT(EM_REPORT_CREATE):   put ' style:style="StatGraphStyle';
28250     +   put anchor '"';
MPRINT(EM_REPORT_CREATE):   put anchor '"';
28251     +   put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
28252     +   set $graph_started "true";
MPRINT(EM_REPORT_CREATE):   set $graph_started "true";
28253     +   eval $level 0;
MPRINT(EM_REPORT_CREATE):   eval $level 0;
28254     +end;
MPRINT(EM_REPORT_CREATE):   end;
28255     +
28256     +define event LayoutOverlay;
MPRINT(EM_REPORT_CREATE):   define event LayoutOverlay;
28257     +   start:
28258     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
28259     +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
28260     +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
28261     +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
28262     +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
28263     +      put '<LayoutOverlay>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutOverlay>' CR;
28264     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
28265     +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
28266     +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
28267     +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutOverlay>' CR;
28268     +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
28269     +   finish:
28270     +      put '</LayoutOverlay>' CR;
28271     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
28272     +      trigger EndGraph / if $level=0;
28273     +end;
MPRINT(EM_REPORT_CREATE):   end;
28274     +
28275     +define event LayoutRegion;
MPRINT(EM_REPORT_CREATE):   define event LayoutRegion;
28276     +   start:
28277     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
28278     +      put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title '</EntryItem></EntryTitle>' CR / if $title;
28279     +      put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title2 '</EntryItem></EntryTitle>' CR / if $title2;
28280     +      put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title3'</EntryItem></EntryTitle>' CR / if $title3;
28281     +      put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
MPRINT(EM_REPORT_CREATE):   put '<EntryTitle><EntryItem>' $title4 '</EntryItem></EntryTitle>' CR / if $title4;
28282     +      put '<LayoutRegion>' CR;
MPRINT(EM_REPORT_CREATE):   put '<LayoutRegion>' CR;
28283     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title2;
28284     +      unset $title;
MPRINT(EM_REPORT_CREATE):   unset $title3;
28285     +      unset $title2;
MPRINT(EM_REPORT_CREATE):   unset $title4;
28286     +      unset $title3;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutRegion>' CR;
28287     +      unset $title4;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
28288     +   finish:
28289     +      put '</LayoutRegion>' CR;
28290     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
28291     +      trigger EndGraph / if $level=0;
28292     +end;
MPRINT(EM_REPORT_CREATE):   end;
28293     +
28294     +define event LayoutLattice;
MPRINT(EM_REPORT_CREATE):   define event LayoutLattice;
28295     +   start:
28296     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
28297     +      put '<LayoutLattice';
MPRINT(EM_REPORT_CREATE):   put '<LayoutLattice';
28298     +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
28299     +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
28300     +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
28301     +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
28302     +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
28303     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutLattice>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
28304     +   finish:
28305     +      put '</LayoutLattice>' CR;
28306     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
28307     +      trigger EndGraph / if $level=0;
28308     +end;
MPRINT(EM_REPORT_CREATE):   end;
28309     +
28310     +define event LayoutGridded;
MPRINT(EM_REPORT_CREATE):   define event LayoutGridded;
28311     +   start:
28312     +      trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   start: trigger BeginGraph / if !$graph_started;
28313     +      put '<LayoutGridded';
MPRINT(EM_REPORT_CREATE):   put '<LayoutGridded';
28314     +      putq " rows=" $rows;
MPRINT(EM_REPORT_CREATE):   putq " rows=" $rows;
28315     +      putq " columns=" $columns;
MPRINT(EM_REPORT_CREATE):   putq " columns=" $columns;
28316     +      put '>' CR;
MPRINT(EM_REPORT_CREATE):   put '>' CR;
28317     +      unset $rows;
MPRINT(EM_REPORT_CREATE):   unset $rows;
28318     +      unset $columns;
MPRINT(EM_REPORT_CREATE):   unset $columns;
28319     +      eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   eval $level $level+1;
MPRINT(EM_REPORT_CREATE):   finish: put '</LayoutGridded>' CR;
MPRINT(EM_REPORT_CREATE):   eval $level $level-1;
28320     +   finish:
28321     +      put '</LayoutGridded>' CR;
28322     +      eval $level $level-1;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
28323     +      trigger EndGraph / if $level=0;
28324     +end;
MPRINT(EM_REPORT_CREATE):   end;
28325     +
28326     +define event EndGraph;
MPRINT(EM_REPORT_CREATE):   define event EndGraph;
28327     +   put '</StatGraph>' CR;
MPRINT(EM_REPORT_CREATE):   put '</StatGraph>' CR;
28328     +   put '</View>' CR;
MPRINT(EM_REPORT_CREATE):   put '</View>' CR;
28329     +   put "</SASReport>" CR;
MPRINT(EM_REPORT_CREATE):   put "</SASReport>" CR;
28330     +   unset $graph_started;
MPRINT(EM_REPORT_CREATE):   unset $graph_started;
28331     +end;
MPRINT(EM_REPORT_CREATE):   end;
28332     +
28333     +define event ScatterPlot;
MPRINT(EM_REPORT_CREATE):   define event ScatterPlot;
28334     +   put '<ScatterPlot';
MPRINT(EM_REPORT_CREATE):   put '<ScatterPlot';
28335     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
28336     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
28337     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28338     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
28339     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
28340     +end;
MPRINT(EM_REPORT_CREATE):   end;
28341     +
28342     +define event SeriesPlot;
MPRINT(EM_REPORT_CREATE):   define event SeriesPlot;
28343     +   put '<SeriesPlot';
MPRINT(EM_REPORT_CREATE):   put '<SeriesPlot';
28344     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
28345     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
28346     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28347     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
28348     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
28349     +end;
MPRINT(EM_REPORT_CREATE):   end;
28350     +
28351     +define event BandPlot;
MPRINT(EM_REPORT_CREATE):   define event BandPlot;
28352     +   put '<BandPlot';
MPRINT(EM_REPORT_CREATE):   put '<BandPlot';
28353     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
28354     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
28355     +   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if $limitupper;
MPRINT(EM_REPORT_CREATE):   put ' limitUpper="StatGraphDataIDX#' $limitupper '"' / if $limitupper;
28356     +   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if $limitlower;
MPRINT(EM_REPORT_CREATE):   put ' limitLower="StatGraphDataIDX#' $limitlower '"' / if $limitlower;
28357     +   putq " lineAttrs=" $style;
MPRINT(EM_REPORT_CREATE):   putq " lineAttrs=" $style;
28358     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28359     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
28360     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
28361     +end;
MPRINT(EM_REPORT_CREATE):   end;
28362     +
28363     +define event Pie;
MPRINT(EM_REPORT_CREATE):   define event Pie;
28364     +   put '<Pie';
MPRINT(EM_REPORT_CREATE):   put '<Pie';
28365     +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
28366     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
28367     +   putq " pieLabelComponents=" $pieLabelDisplay;
MPRINT(EM_REPORT_CREATE):   putq " pieLabelComponents=" $pieLabelDisplay;
28368     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28369     +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
28370     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
28371     +end;
MPRINT(EM_REPORT_CREATE):   end;
28372     +
28373     +define event Bar;
MPRINT(EM_REPORT_CREATE):   define event Bar;
28374     +   put '<Bar';
MPRINT(EM_REPORT_CREATE):   put '<Bar';
28375     +   put ' category="StatGraphDataIDX#' $category '"' / if $category;
MPRINT(EM_REPORT_CREATE):   put ' category="StatGraphDataIDX#' $category '"' / if $category;
28376     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
28377     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28378     +   unset $category;
MPRINT(EM_REPORT_CREATE):   unset $category;
28379     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $response;
28380     +end;
MPRINT(EM_REPORT_CREATE):   end;
28381     +
28382     +define event Histogram;
MPRINT(EM_REPORT_CREATE):   define event Histogram;
28383     +   put '<Histogram';
MPRINT(EM_REPORT_CREATE):   put '<Histogram';
28384     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
28385     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28386     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
28387     +end;
MPRINT(EM_REPORT_CREATE):   end;
28388     +
28389     +define event DecisionTree;
MPRINT(EM_REPORT_CREATE):   define event DecisionTree;
28390     +   put '<DecisionTree';
MPRINT(EM_REPORT_CREATE):   put '<DecisionTree';
28391     +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
28392     +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
28393     +   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
MPRINT(EM_REPORT_CREATE):   put ' aboveText="StatGraphDataIDX#' $abovetext '"' / if $abovetext;
28394     +   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
MPRINT(EM_REPORT_CREATE):   put ' belowText="StatGraphDataIDX#' $belowtext '"' / if $belowtext;
28395     +   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
MPRINT(EM_REPORT_CREATE):   put ' linkWidth="StatGraphDataIDX#' $linkwidth '"' / if $linkwidth;
28396     +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
28397     +   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
MPRINT(EM_REPORT_CREATE):   put ' nodeText="StatGraphDataIDX#' $nodetext '"' / if $nodetext;
28398     +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
28399     +   put ' fitToRegion="true"';
MPRINT(EM_REPORT_CREATE):   put ' fitToRegion="true"';
28400     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28401     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
28402     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
28403     +   unset $abovetext;
MPRINT(EM_REPORT_CREATE):   unset $abovetext;
28404     +   unset $belowtext;
MPRINT(EM_REPORT_CREATE):   unset $belowtext;
28405     +   unset $linkwidth;
MPRINT(EM_REPORT_CREATE):   unset $linkwidth;
28406     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
28407     +   unset $nodetext;
MPRINT(EM_REPORT_CREATE):   unset $nodetext;
28408     +end;
MPRINT(EM_REPORT_CREATE):   end;
28409     +
28410     +define event Icicle;
MPRINT(EM_REPORT_CREATE):   define event Icicle;
28411     +   put '<Icicle';
MPRINT(EM_REPORT_CREATE):   put '<Icicle';
28412     +   put ' id="StatGraphDataIDX#' $id '"' / if $id;
MPRINT(EM_REPORT_CREATE):   put ' id="StatGraphDataIDX#' $id '"' / if $id;
28413     +   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
MPRINT(EM_REPORT_CREATE):   put ' parent="StatGraphDataIDX#' $parent '"' / if $parent;
28414     +   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
MPRINT(EM_REPORT_CREATE):   put ' nodeSize="StatGraphDataIDX#' $nodesize '"' / if $nodesize;
28415     +   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
MPRINT(EM_REPORT_CREATE):   put ' nodeColor="StatGraphDataIDX#' $nodecolor '"' / if $nodecolor;
28416     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28417     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
28418     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
28419     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
28420     +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
28421     +end;
MPRINT(EM_REPORT_CREATE):   end;
28422     +
28423     +define event PFD;
MPRINT(EM_REPORT_CREATE):   define event PFD;
28424     +   put '<PFD';
MPRINT(EM_REPORT_CREATE):   put '<PFD';
28425     +   putq " id=" $id / if $id;
MPRINT(EM_REPORT_CREATE):   putq " id=" $id / if $id;
28426     +   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
MPRINT(EM_REPORT_CREATE):   put ' pfditems="StatGraphDataIDX#' $pfdItems '"' / if $pfdItems;
28427     +   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
MPRINT(EM_REPORT_CREATE):   putq " isGridVisible=" $isgridvisible / if $isgridvisible;
28428     +   putq " gridHeight=" $gridheight / if $gridheight;
MPRINT(EM_REPORT_CREATE):   putq " gridHeight=" $gridheight / if $gridheight;
28429     +   putq " gridWidth=" $gridwidth / if $gridwidth;
MPRINT(EM_REPORT_CREATE):   putq " gridWidth=" $gridwidth / if $gridwidth;
28430     +   putq " gridStyle=" $gridstyle / if $gridstyle;
MPRINT(EM_REPORT_CREATE):   putq " gridStyle=" $gridstyle / if $gridstyle;
28431     +   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
MPRINT(EM_REPORT_CREATE):   putq " layoutActivated=" $layoutActivated / if $layoutActivated;
28432     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28433     +   unset $id;
MPRINT(EM_REPORT_CREATE):   unset $id;
28434     +   unset $parent;
MPRINT(EM_REPORT_CREATE):   unset $parent;
28435     +   unset $nodecolor;
MPRINT(EM_REPORT_CREATE):   unset $nodecolor;
28436     +   unset $nodesize;
MPRINT(EM_REPORT_CREATE):   unset $nodesize;
28437     +end;
MPRINT(EM_REPORT_CREATE):   end;
28438     +
28439     +define event HeatMap;
MPRINT(EM_REPORT_CREATE):   define event HeatMap;
28440     +   trigger BeginGraph / if !$graph_started;
MPRINT(EM_REPORT_CREATE):   trigger BeginGraph / if !$graph_started;
28441     +   put '<HeatmapClassic';
MPRINT(EM_REPORT_CREATE):   put '<HeatmapClassic';
28442     +   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
MPRINT(EM_REPORT_CREATE):   put ' x="StatGraphDataIDX#' $xvar '"' / if $xvar;
28443     +   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
MPRINT(EM_REPORT_CREATE):   put ' y="StatGraphDataIDX#' $yvar '"' / if $yvar;
28444     +   put ' response="StatGraphDataIDX#' $response '"' / if $response;
MPRINT(EM_REPORT_CREATE):   put ' response="StatGraphDataIDX#' $response '"' / if $response;
28445     +   putq ' colorList=' $colorlist / if $colorlist;
MPRINT(EM_REPORT_CREATE):   putq ' colorList=' $colorlist / if $colorlist;
28446     +   putq ' colorIndex=' $colorindex / if $colorindex;
MPRINT(EM_REPORT_CREATE):   putq ' colorIndex=' $colorindex / if $colorindex;
28447     +   put '/>' CR;
MPRINT(EM_REPORT_CREATE):   put '/>' CR;
28448     +   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   trigger EndGraph / if $level=0;
MPRINT(EM_REPORT_CREATE):   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $yvar;
28449     +   unset $xvar;
MPRINT(EM_REPORT_CREATE):   unset $response;
28450     +   unset $yvar;
MPRINT(EM_REPORT_CREATE):   unset $colorlist;
28451     +   unset $response;
MPRINT(EM_REPORT_CREATE):   unset $colorindex;
28452     +   unset $colorlist;
28453     +   unset $colorindex;
28454     +end;
MPRINT(EM_REPORT_CREATE):   end;
28455     +
28456     +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: TAGSET 'Tagsets.Gtl' has been saved to: WORK.TEMPLAT
28457     +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.32 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
28458     +
28459     +
28460     +
28461     +
28462     +
28463     +
28464     +/* data_template.sas */
28465     +proc template;
MPRINT(EM_REPORT_CREATE):   proc template;
28466     +define statgraph dataonly / store=work.templat;
MPRINT(EM_REPORT_CREATE):   define statgraph dataonly / store=work.templat;
28467     +dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9 var10;
MPRINT(EM_REPORT_CREATE):   dynamic dummy1 dummy2 var1 var2 var3 var4 var5 var6 var7 var8 var9 var10;
28468     +begingraph;
MPRINT(EM_REPORT_CREATE):   begingraph;
28469     +if (0)
28470     +layout overlay;
MPRINT(EM_REPORT_CREATE):   if (0) layout overlay;
28471     +   scatterplot x=dummy1 y=dummy2 /
28472     +      rolename=(a=var1 b=var2 c=var3 d=var4 e=var5 f=var6 g=var7 h=var8 i=var9 j=var10);
MPRINT(EM_REPORT_CREATE):   scatterplot x=dummy1 y=dummy2 / rolename=(a=var1 b=var2 c=var3 d=var4 e=var5 f=var6 g=var7 h=var8 i=var9 j=var10);
28473     +endlayout;
MPRINT(EM_REPORT_CREATE):   endlayout;
28474     +endif;
MPRINT(EM_REPORT_CREATE):   endif;
28475     +endgraph;
MPRINT(EM_REPORT_CREATE):   endgraph;
28476     +end;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STATGRAPH 'Dataonly' has been saved to: WORK.TEMPLAT
28477     +run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
28478     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_REPORT_CREATE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Report")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='REPORT';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPORT");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "REPORT";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "pdf";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_PATH):   proc display c=sashelp.emutil.path.scl;
MPRINT(EM_PATH):   run;
 
28479      data emreportpath;
MPRINT(EM_PATH):   data emreportpath;
28480      length nodelabel $32 component $32;
MPRINT(EM_PATH):   length nodelabel $32 component $32;
28481      nodelabel="Ids";
MPRINT(EM_PATH):   nodelabel="Ids";
28482      component="DataSource";
MPRINT(EM_PATH):   component="DataSource";
28483      output;
MPRINT(EM_PATH):   output;
28484      nodelabel="Part";
MPRINT(EM_PATH):   nodelabel="Part";
28485      component="Partition";
MPRINT(EM_PATH):   component="Partition";
28486      output;
MPRINT(EM_PATH):   output;
28487      nodelabel="Varsel";
MPRINT(EM_PATH):   nodelabel="Varsel";
28488      component="VariableSelection";
MPRINT(EM_PATH):   component="VariableSelection";
28489      output;
MPRINT(EM_PATH):   output;
28490      nodelabel="Trans";
MPRINT(EM_PATH):   nodelabel="Trans";
28491      component="Transform";
MPRINT(EM_PATH):   component="Transform";
28492      output;
MPRINT(EM_PATH):   output;
28493      nodelabel="BINNING";
MPRINT(EM_PATH):   nodelabel="BINNING";
28494      component="Binning";
MPRINT(EM_PATH):   component="Binning";
28495      output;
MPRINT(EM_PATH):   output;
28496      nodelabel="Impt";
MPRINT(EM_PATH):   nodelabel="Impt";
28497      component="Impute";
MPRINT(EM_PATH):   component="Impute";
28498      output;
MPRINT(EM_PATH):   output;
28499      nodelabel="Neural";
MPRINT(EM_PATH):   nodelabel="Neural";
28500      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28501      output;
MPRINT(EM_PATH):   output;
28502      nodelabel="Neural2";
MPRINT(EM_PATH):   nodelabel="Neural2";
28503      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28504      output;
MPRINT(EM_PATH):   output;
28505      nodelabel="Neural3";
MPRINT(EM_PATH):   nodelabel="Neural3";
28506      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28507      output;
MPRINT(EM_PATH):   output;
28508      nodelabel="Neural5";
MPRINT(EM_PATH):   nodelabel="Neural5";
28509      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28510      output;
MPRINT(EM_PATH):   output;
28511      nodelabel="Neural6";
MPRINT(EM_PATH):   nodelabel="Neural6";
28512      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28513      output;
MPRINT(EM_PATH):   output;
28514      nodelabel="Neural4";
MPRINT(EM_PATH):   nodelabel="Neural4";
28515      component="NeuralNetwork";
MPRINT(EM_PATH):   component="NeuralNetwork";
28516      output;
MPRINT(EM_PATH):   output;
28517      nodelabel="CNTRL";
MPRINT(EM_PATH):   nodelabel="CNTRL";
28518      component="";
MPRINT(EM_PATH):   component="";
28519      output;
MPRINT(EM_PATH):   output;
28520      nodelabel="MdlComp";
MPRINT(EM_PATH):   nodelabel="MdlComp";
28521      component="ModelCompare";
MPRINT(EM_PATH):   component="ModelCompare";
28522      output;
MPRINT(EM_PATH):   output;
28523      run;
MPRINT(EM_PATH):   run;
 
NOTE: The data set WORK.EMREPORTPATH has 14 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_PATH):
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data emreportpath;
MPRINT(EM_REPORT_CREATE):   set emreportpath;
MPRINT(EM_REPORT_CREATE):   rename nodelabel=nodeid;
MPRINT(EM_REPORT_CREATE):   nodeIndex = _n_;
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: There were 14 observations read from the data set WORK.EMREPORTPATH.
NOTE: The data set WORK.EMREPORTPATH has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   *** create new style template to address fonts in ods text;
MPRINT(EM_REPORT_CREATE):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_CREATE):   proc template ;
MPRINT(EM_REPORT_CREATE):   define style styles.em_style / store=work.templat;
MPRINT(EM_REPORT_CREATE):   parent= styles.LISTING;
MPRINT(EM_REPORT_CREATE):   style usertext from usertext / foreground=black font_size=10 pt font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemtitle from systemtitle / color=colors("systitlefg") backgroundcolor=colors("systitlebg") fontsize=10 pt font_face="Arial" font_weight=bold ;
MPRINT(EM_REPORT_CREATE):   style systemfooter from systemfooter / color=colors("systitlefg") backgroundcolor=colors("systitlebg") font_face="Arial" ;
MPRINT(EM_REPORT_CREATE):   style GraphFonts from GraphFonts / 'GraphTitleFont' = ("Arial", 10 pt) 'GraphTitle1Font' = ("Arial", 10 pt) 'GraphLabelFont' = ("Arial", 8 pt) 'GraphFootnoteFont' = ("Arial", 6 pt) 'GraphValueFont' = ("Arial", 6 pt)
'GraphDataFont' = ("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style Fonts from Fonts/ 'TitleFont' = ("Arial", 10 pt) 'TitleFont2' = ("Arial", 10 pt) 'StrongFont' = ("Arial", 6 pt) 'EmphasisFont' = ("Arial", 6 pt) 'headingFont' = ("Arial", 6 pt) 'headingEmphasisFont' = ("Arial", 6 pt)
'FixedEmphasisFont' = ("Arial", 6 pt) 'FixedStrongFont' = ("Arial", 6 pt) 'FixedHeadingFont' = ("Arial", 6 pt) 'FixedFont' = ("Arial", 6 pt) 'BatchFixedFont' = ("Arial", 6 pt) 'docFont' = ("Arial", 6 pt) ;
MPRINT(EM_REPORT_CREATE):   style GraphTitleText from GraphTitleText / font_face="Arial";
MPRINT(EM_REPORT_CREATE):   style data from data / font_size=6 pt;
MPRINT(EM_REPORT_CREATE):   style header from header / font_size=8 pt;
MPRINT(EM_REPORT_CREATE):   style rowheader from header;
MPRINT(EM_REPORT_CREATE):   end;
NOTE: STYLE 'Styles.Em_style' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   run;
MPRINT(EM_REPORT_CREATE):   quit;
MPRINT(EM_REPORT_CREATE):   *** options for page layout;
MPRINT(EM_REPORT_CREATE):   options nodate nocenter number ls=97 ;
MPRINT(EM_REPORT_CREATE):   *** get file name;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   *** turn off LISTING and turn on the specified destination;
MPRINT(EM_REPORT_CREATE):   ods listing close;
MPRINT(EM_REPORT_CREATE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_CREATE):   ods PDF file="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf" style=styles.em_style startpage=NO
uniform NOTOC ;
NOTE: Writing ODS PDF output to DISK destination
      "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf", printer "PDF".
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this
      session.
MPRINT(EM_REPORT_CREATE):   *** titles and footnotes;
MPRINT(EM_REPORT_CREATE):   ods PDF text=" ";
MPRINT(EM_REPORT_CREATE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   ods proclabel "Report Information";
MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_CREATE):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   data _null_;
MPRINT(EM_REPORT_CREATE):   file print ;
MPRINT(EM_REPORT_CREATE):   put "User       = sakerb01" ;
MPRINT(EM_REPORT_CREATE):   put "Date       = 16:36:56  November 02" ;
MPRINT(EM_REPORT_CREATE):   put "Project    = Project_3 " ;
MPRINT(EM_REPORT_CREATE):   put "Diagram    = Diagram_3" / ;
MPRINT(EM_REPORT_CREATE):   put "Start Node = Report";
MPRINT(EM_REPORT_CREATE):   put "Node label = Reporter" ;
MPRINT(EM_REPORT_CREATE):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_CREATE):   put "Showall    = N" /;
MPRINT(EM_REPORT_CREATE):   put "Format     = PDF" ;
MPRINT(EM_REPORT_CREATE):   put "Style      = LISTING" /;
MPRINT(EM_REPORT_CREATE):   run ;
 
NOTE: 10 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("PFD");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "PFD";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "xml";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):  ;
MPRINT(EM_REPORT_WORKSPACE_XML):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Report\PFD.xml" encoding="utf-8" NOBOM;
MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "&", "&amp;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "<", "&lt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, ">", "&gt;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, "'", "&#39;");
MPRINT(EM_REPORT_WORKSPACE_XML):   label = tranwrd(label, '"', '&quot;');
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats('<PFDNode x="',X,'" y="',Y,'" id="',NODEID,'"
title="',LABEL,'"></PFDNode>');
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;
 
NOTE: The file X is:
 
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\PFD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=02Nov2015:16:36:56,
      Create Time=02Nov2015:16:36:56
 
NOTE: 16 records were written to the file X.
      The minimum record length was 59.
      The maximum record length was 86.
NOTE: There were 16 observations read from the data set EMWS1.EM_NODEID.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):   data _null_;
MPRINT(EM_REPORT_WORKSPACE_XML):   file x mod;
MPRINT(EM_REPORT_WORKSPACE_XML):   set EMWS1.EM_DGRAPH(where=(TO ne ""));
MPRINT(EM_REPORT_WORKSPACE_XML):   length string $400;
MPRINT(EM_REPORT_WORKSPACE_XML):   string = cats("<PFDLink id='",_N_,"' fromId='",FROM,"'
toId='",TO,"'></PFDLink>");
MPRINT(EM_REPORT_WORKSPACE_XML):   put string;
MPRINT(EM_REPORT_WORKSPACE_XML):   run;
 
NOTE: The file X is:
 
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\PFD.xml,
      RECFM=V,LRECL=131068,File Size (bytes)=1188,
      Last Modified=02Nov2015:16:36:56,
      Create Time=02Nov2015:16:36:56
 
NOTE: 21 records were written to the file X.
      The minimum record length was 51.
      The maximum record length was 59.
NOTE: There were 21 observations read from the data set EMWS1.EM_DGRAPH.
      WHERE TO not = ' ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_XML):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_MAKEDS):   data xmldata(keep=PFDItemList);
MPRINT(EM_REPORT_MAKEDS):   infile xmlref recfm=v lrecl=86 length=len;
MPRINT(EM_REPORT_MAKEDS):   length PFDItemList $256;
MPRINT(EM_REPORT_MAKEDS):   input record $varying5000. len;
MPRINT(EM_REPORT_MAKEDS):   recordNum+1;
MPRINT(EM_REPORT_MAKEDS):   do start=1 to len by 256 ;
MPRINT(EM_REPORT_MAKEDS):   end=start+256;
MPRINT(EM_REPORT_MAKEDS):   *put recordNum= start= end=;
MPRINT(EM_REPORT_MAKEDS):   PFDItemList=substr(record,start,end);
MPRINT(EM_REPORT_MAKEDS):   output;
MPRINT(EM_REPORT_MAKEDS):   end;
MPRINT(EM_REPORT_MAKEDS):   run;
 
NOTE: The infile XMLREF is:
 
      Filename=C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\PFD.xml,
      RECFM=V,LRECL=344,File Size (bytes)=2407,
      Last Modified=02Nov2015:16:36:56,
      Create Time=02Nov2015:16:36:56
 
NOTE: 37 records were read from the infile XMLREF.
      The minimum record length was 51.
      The maximum record length was 86.
NOTE: The data set WORK.XMLDATA has 37 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   data temp;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   set EMWS1.EM_NODEID;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   if X = -1 AND Y= - 1 then delete;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.EM_NODEID.
NOTE: The data set WORK.TEMP has 16 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF exclude SGRENDER;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl file="C:\Users\sakerb01\Desktop\SAS EM
12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\view.xml"
data="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Report\data.xml" encoding="utf-8" style=styles.em_style;
NOTE: Writing TAGSETS.GTL Data file: C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\data.xml
NOTE: Writing TAGSETS.GTL Body file: C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\view.xml
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgrender data=work.xmldata template=dataonly;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   dynamic var1="PFDItemList";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
WARNING: TAGSETS.GTL destination does not support images. Using the default format.
NOTE: There were 37 observations read from the data set WORK.XMLDATA.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.10 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(start) options(title
="SAS Enterprise Miner Report" title2="Process Flow Diagram");
BeginGraph
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=PFD options(pfditems="PFDItemList"
id="pfdView1");
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl event=LayoutRegion(finish);
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods tagsets.gtl close;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods PDF select ALL ;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   ods proclabel = "Process Flow Diagram";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   proc sgsilk viewxml="C:\Users\sakerb01\Desktop\SAS EM 12.3
Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\view.xml"
dataxml="C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Report\data.xml";
MPRINT(EM_REPORT_WORKSPACE_RENDER):   run;
 
NOTE: PROCEDURE SGSILK used (Total process time):
      real time           9.17 seconds
      cpu time            0.53 seconds
 
 
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title1;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title2;
MPRINT(EM_REPORT_WORKSPACE_RENDER):   title3;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   proc sql noprint;
MPRINT(EM_REPORT_CREATE):   select count(*) into :EM_REPORT_NODENUM from emreportpath where
nodeID ne " ";
MPRINT(EM_REPORT_CREATE):   select strip(nodeID) into :EM_REPORT_NODELIST separated by ' ' from
emreportpath where nodeID ne " " order by nodeIndex;
NOTE: The query as specified involves ordering by an item that doesn't appear in its SELECT
      clause.
MPRINT(EM_REPORT_CREATE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Ids")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='IDS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
28524      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28525      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28525    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28525    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
28526      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
28527      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28528      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
28529      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
28530      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28531      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28532      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28533      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28534      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28535      output;
MPRINT(EM_GETTRAINPATH):   output;
28536      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Ids"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Ids";
MPRINT(EM_REPORT_NODE):   put "Node label = All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Ids\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
28537      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28538      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28539      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28539    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28539    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28540      Name = 'DataSource';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSource';
28541      Value = "%nrbquote(allhomeequityloanscoringdata)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "allhomeequityloanscoringdata";
28542      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28543      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28544      Name = 'Scope';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Scope';
28545      Value = "%nrbquote(LOCAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOCAL";
28546      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28547      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28548      Name = 'Role';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Role';
28549      Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
28550      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28551      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28552      Name = 'Library';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Library';
28553      Value = "%nrbquote(SAMPSIO)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SAMPSIO";
28554      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28555      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28556      Name = 'Table';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Table';
28557      Value = "%nrbquote(DMAHMEQ)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DMAHMEQ";
28558      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28559      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28560      Name = 'NCols';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NCols';
28561      Value = "%nrbquote(13)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "13";
28562      Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
28563      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28564      Name = 'NObs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NObs';
28565      Value = "%nrbquote(5960)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5960";
28566      Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
28567      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28568      Name = 'NBytes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NBytes';
28569      Value = "%nrbquote(656384)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "656384";
28570      Default = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Default = ".";
28571      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28572      Name = 'Segment';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Segment';
28573      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28574      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28575      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28576      Name = 'DataSourceRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSourceRole';
28577      Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
28578      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28579      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28580      Name = 'OutputType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OutputType';
28581      Value = "%nrbquote(VIEW)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VIEW";
28582      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28583      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28584      Name = 'ComputeStatistics';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ComputeStatistics';
28585      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28586      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28587      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28588      Name = 'DataSelection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DataSelection';
28589      Value = "%nrbquote(DATASOURCE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DATASOURCE";
28590      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28591      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28592      Name = 'NewTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NewTable';
28593      Value = "%nrbquote( )";
MPRINT(EM_REPORT_PROPERTIES):   Value = " ";
28594      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28595      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28596      Name = 'MetaAdvisor';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MetaAdvisor';
28597      Value = "%nrbquote(BASIC)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "BASIC";
28598      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28599      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28600      Name = 'ApplyIntervalLevelLowerLimit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyIntervalLevelLowerLimit';
28601      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28602      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28603      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28604      Name = 'IntervalLowerLimit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalLowerLimit';
28605      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28606      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28607      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28608      Name = 'ApplyMaxPercentMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyMaxPercentMissing';
28609      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28610      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28611      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28612      Name = 'MaxPercentMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxPercentMissing';
28613      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28614      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28615      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28616      Name = 'ApplyMaxClassLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyMaxClassLevels';
28617      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28618      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28619      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28620      Name = 'MaxClassLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxClassLevels';
28621      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28622      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28623      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28624      Name = 'IdentifyEmptyColumns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IdentifyEmptyColumns';
28625      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28626      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28627      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28628      Name = 'VariableValidation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VariableValidation';
28629      Value = "%nrbquote(STRICT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STRICT";
28630      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28631      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28632      Name = 'NewVariableRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NewVariableRole';
28633      Value = "%nrbquote(REJECT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "REJECT";
28634      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28635      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28636      Name = 'DropMapVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DropMapVariables';
28637      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28638      Default = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "Y";
28639      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28640      Name = 'DsId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsId';
28641      Value = "%nrbquote(allhomeequityloanscoringdata)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "allhomeequityloanscoringdata";
28642      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28643      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28644      Name = 'DsSampleName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleName';
28645      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28646      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28647      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28648      Name = 'DsSampleSizeType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleSizeType';
28649      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28650      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28651      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28652      Name = 'DsSampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsSampleSize';
28653      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
28654      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28655      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28656      Name = 'DsCreatedBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsCreatedBy';
28657      Value = "%nrbquote(sakerb01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "sakerb01";
28658      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28659      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28660      Name = 'DsCreateDate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsCreateDate';
28661      Value = "%nrbquote(1762095899.8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1762095899.8";
28662      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28663      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28664      Name = 'DsModifiedBy';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsModifiedBy';
28665      Value = "%nrbquote(sakerb01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "sakerb01";
28666      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28667      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28668      Name = 'DsModifyDate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsModifyDate';
28669      Value = "%nrbquote(1762095899.9)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1762095899.9";
28670      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28671      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28672      Name = 'DsScope';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DsScope';
28673      Value = "%nrbquote(LOCAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "LOCAL";
28674      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28675      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28676      Name = 'Sample';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Sample';
28677      Value = "%nrbquote(D)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "D";
28678      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28679      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28680      Name = 'SampleSizeType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizeType';
28681      Value = "%nrbquote(PERCENT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PERCENT";
28682      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28683      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28684      Name = 'SampleSizePercent';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizePercent';
28685      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
28686      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28687      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28688      Name = 'SampleSizeObs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SampleSizeObs';
28689      Value = "%nrbquote(10000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10000";
28690      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28691      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28692      Name = 'DBPassThrough';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DBPassThrough';
28693      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28694      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28695      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28696      Name = 'Description';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Description';
28697      Value = "%nrbquote(All: Home-Equity Loan Scoring Data)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "All: Home-Equity Loan Scoring Data";
28698      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28699      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28700      Name = 'Data';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Data';
28701      Value = "%nrbquote(SAMPSIO.DMAHMEQ)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "SAMPSIO.DMAHMEQ";
28702      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28703      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28704      Name = 'CMeta';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CMeta';
28705      Value = "%nrbquote(WORK.M1OJX73O)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "WORK.M1OJX73O";
28706      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28707      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28708      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 42 observations and 3 variables.
3 The SAS System
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
28709      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28710      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28711      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 42 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28712      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28713      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28714      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28714    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28715      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28716      Value = "DataSource";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DataSource";
28717      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28718      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28719      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28720      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28721      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 42 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 43 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data
Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 28 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 28 and _n_ le 42 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-14*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 43 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 14 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 14 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 14 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 14 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 14 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc transpose data=EMWS1.Ids_EMTMETADEFAULT out=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   var _all_;
MPRINT(EM_REPORT_DATASOURCE):   format crdate NLDATM24.0 modate NLDATM24.0;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: Numeric variables in the input data set will be converted to character in the output data
      set.
NOTE: There were 1 observations read from the data set EMWS1.IDS_EMTMETADEFAULT.
NOTE: The data set WORK.TEMP_SOURCE has 15 observations and 2 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):   data temp_source;
MPRINT(EM_REPORT_DATASOURCE):   set temp_source;
MPRINT(EM_REPORT_DATASOURCE):   rename col1 = value;
MPRINT(EM_REPORT_DATASOURCE):   col1 = right(col1);
MPRINT(EM_REPORT_DATASOURCE):   format label $64.;
MPRINT(EM_REPORT_DATASOURCE):   label col1 = "Value" label = "Attribute" ;
MPRINT(EM_REPORT_DATASOURCE):   *** get the localized label column;
MPRINT(EM_REPORT_DATASOURCE):   _name_=upcase(_name_) ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMNAME" then label="Data Name" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMTYPE" then label="Data Type" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MEMLABEL" then label="Data Label" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "TYPEMEM" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ENGINE" then label="Engine" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "CRDATE" then label="Date Created" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "MODATE" then label="Date Modified" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NOBS" then label="Number Rows" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NCOLS" then label="Number Columns" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "NBYTES" then label="Data Size" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "ROLE" then label="Role" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "USEEXTERNALDATA" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SAMPLINGRATE" then delete ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "SEGMENT" then label="Segment" ;
MPRINT(EM_REPORT_DATASOURCE):   if _name_ eq "LIBNAME" then label="Data Library" ;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: There were 15 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK.TEMP_SOURCE has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Data Attributes";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data Data
Attributes";
MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=temp_source
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "LABEL" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( LABEL=LABEL1 VALUE=VALUE1))
_tmpms_dat2(rename=( LABEL=LABEL2 VALUE=VALUE2)) _tmpms_dat3(rename=( LABEL=LABEL3
VALUE=VALUE3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set temp_source;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep LABEL VALUE numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 4 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 4 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 12 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-4*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMP_SOURCE.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 4 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 4 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var LABEL1 VALUE1 LABEL2 VALUE2 LABEL3 VALUE3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):  ;
MPRINT(EM_REPORT_DATASOURCE):   proc delete data=temp_source;
MPRINT(EM_REPORT_DATASOURCE):   run;
 
NOTE: Deleting WORK.TEMP_SOURCE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATASOURCE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Ids_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Ids_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.IDS_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=EMWS1.Ids_variableset out=_tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;
 
NOTE: There were 13 observations read from the data set EMWS1.IDS_VARIABLESET.
NOTE: The data set WORK._TMPVL_VS has 13 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   update _tmpvl_pdv _tmpvl_vs;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   label type = "Type" format = "Format" creator = "Creator" family =
"Family" label = "Label" ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: There were 13 observations read from the data set WORK._TMPVL_VS.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=All: Home-Equity Loan Scoring Data";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variables List";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=All: Home-Equity Loan Scoring Data
Variables List";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdv noobs label contents='';
MPRINT(EM_REPORT_VARS):   var name label role level type length format creator;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey6
MPRINT(EM_REPORT_NODE):   from EMWS1.Ids_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Ids_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IDS_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype = DATA EMSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Part")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='PART';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
28722      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28723      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28723    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28723    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
28724      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
28725      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28726      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
28727      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
28728      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28729      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28730      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28731      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28732      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28733      output;
MPRINT(EM_GETTRAINPATH):   output;
28734      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
28735      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
28736      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
28737      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
28738      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28739      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28740      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
28741      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28742      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28743      output;
MPRINT(EM_GETTRAINPATH):   output;
28744      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Part"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Part";
MPRINT(EM_REPORT_NODE):   put "Node label = Data Partition";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Part\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
28745      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28746      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28747      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28747    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28747    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28748      Name = 'Method';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Method';
28749      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28750      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28751      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28752      Name = 'TrainPct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainPct';
28753      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28754      Default = "%nrbquote(40)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "40";
28755      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28756      Name = 'ValidatePct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ValidatePct';
28757      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28758      Default = "%nrbquote(30)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "30";
28759      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28760      Name = 'TestPct';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TestPct';
28761      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
28762      Default = "%nrbquote(30)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "30";
28763      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28764      Name = 'RandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandomSeed';
28765      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
28766      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28767      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28768      Name = 'OutputType';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'OutputType';
28769      Value = "%nrbquote(DATA)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DATA";
28770      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28771      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28772      Name = 'IntervalDistribution';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IntervalDistribution';
28773      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28774      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28775      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28776      Name = 'ClassDistribution';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClassDistribution';
28777      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28778      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28779      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28780      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28781      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28782      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28783      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 8 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28784      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28785      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28786      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28786    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28787      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28788      Value = "Partition";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Partition";
28789      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28790      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28791      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28792      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28793      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 8 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 9 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Data Partition Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 3 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 3 and _n_ le 6 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 6 and _n_ le 9 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-3*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 9 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 3 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 3 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 3 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 3 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Part_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Part_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.PART_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Data Partition";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Data Partition Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Part_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Part" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_CMETA_TRAIN.
      WHERE UPCASE(creator)='Part';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
NOTE: Deleting WORK._TMPVL_VS (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey11
MPRINT(EM_REPORT_NODE):   from EMWS1.Part_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA INTRVLSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Part_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.PART_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = LATTICE CLASSSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Varsel")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='VARSEL';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
28794      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28795      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28795    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28795    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
28796      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
28797      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28798      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
28799      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
28800      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28801      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28802      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28803      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28804      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28805      output;
MPRINT(EM_GETTRAINPATH):   output;
28806      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
28807      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
28808      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
28809      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
28810      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28811      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28812      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
28813      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28814      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28815      output;
MPRINT(EM_GETTRAINPATH):   output;
28816      nodelabel="Varsel";
MPRINT(EM_GETTRAINPATH):   nodelabel="Varsel";
28817      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
28818      description="Variable selection  Class";
MPRINT(EM_GETTRAINPATH):   description="Variable selection  Class";
28819      component="VariableSelection";
MPRINT(EM_GETTRAINPATH):   component="VariableSelection";
28820      tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
28821      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28822      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
28823      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28824      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28825      output;
MPRINT(EM_GETTRAINPATH):   output;
28826      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Varsel"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Variable Selection";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Varsel";
MPRINT(EM_REPORT_NODE):   put "Node label = Variable Selection";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Varsel";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Varsel\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
28827      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28828      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28829      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28829    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28829    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28830      Name = 'TargetModel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetModel';
28831      Value = "%nrbquote(RSQUARE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "RSQUARE";
28832      Default = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "DEFAULT";
28833      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28834      Name = 'HideRejectedVars';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideRejectedVars';
28835      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28836      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28837      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28838      Name = 'MaxMissingPercent';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMissingPercent';
28839      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
28840      Default = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "50";
28841      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28842      Name = 'MaxLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLevel';
28843      Value = "%nrbquote(100)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "100";
28844      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28845      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28846      Name = 'RejectUnusedInputVars';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RejectUnusedInputVars';
28847      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28848      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28849      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28850      Name = 'ByPassVars';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ByPassVars';
28851      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28852      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28853      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28854      Name = 'ByPassVarsRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ByPassVarsRole';
28855      Value = "%nrbquote(INPUT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "INPUT";
28856      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28857      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28858      Name = 'HideUnusedInputVars';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideUnusedInputVars';
28859      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28860      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28861      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28862      Name = 'UseAov16';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseAov16';
28863      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28864      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28865      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28866      Name = 'UseInteractions';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseInteractions';
28867      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
28868      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28869      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28870      Name = 'UseGroups';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseGroups';
28871      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28872      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28873      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28874      Name = 'MinR2';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinR2';
28875      Value = "%nrbquote(0.005)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.005";
28876      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28877      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28878      Name = 'StopR2';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StopR2';
28879      Value = "%nrbquote(0.0005)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.0005";
28880      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28881      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28882      Name = 'MaxRows';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxRows';
28883      Value = "%nrbquote(3000)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3000";
28884      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28885      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28886      Name = 'Passes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Passes';
28887      Value = "%nrbquote(6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "6";
28888      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28889      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28890      Name = 'ChiSquare';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ChiSquare';
28891      Value = "%nrbquote(3.84)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3.84";
28892      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28893      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28894      Name = 'Bins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Bins';
28895      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
28896      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28897      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28898      Name = 'SASSPDS';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SASSPDS';
28899      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28900      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28901      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28902      Name = 'PrintOption';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrintOption';
28903      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28904      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28905      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28906      Name = 'VarselLabel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VarselLabel';
28907      Value = "%nrbquote(VARSELLABEL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VARSELLABEL";
28908      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28909      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28910      Name = 'RoleUnusedVars';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RoleUnusedVars';
28911      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
28912      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28913      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28914      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28915      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
28916      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
28917      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28918      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
28919      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28920      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28920    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
28921      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
28922      Value = "VariableSelection";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VariableSelection";
28923      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
28924      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28925      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28926      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
28927      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Variable Selection";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Variable Selection Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 7 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 7 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 22 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 7 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Varsel_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Varsel_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.VARSEL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Variable Selection";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Variable Selection Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Varsel_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Varsel" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.VARSEL_CMETA_TRAIN.
      WHERE UPCASE(creator)='Varsel';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Varsel_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Varsel_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey17
MPRINT(EM_REPORT_NODE):   from EMWS1.Varsel_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA VARIABLESELECTION
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Variable Selection";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Selection";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Variable Selection Variable Selection";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Varsel_RESULTEDVARS(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 13 observations read from the data set EMWS1.VARSEL_RESULTEDVARS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA OUTGVAR
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = DATA OUTAOV16
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA OUTGINT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = BAR R2VALUES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Variable Selection";
MPRINT(EM_REPORT_SGPLOT):   title3 "R2 Values";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.Varsel_R2DS;
MPRINT(EM_REPORT_SGPLOT):   vbar EFFECT / missing response=R2;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;
 
NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           3.42 seconds
      cpu time            0.28 seconds
 
NOTE: There were 13 observations read from the data set EMWS1.VARSEL_R2DS.
 
MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = BAR EFFECTSINMODEL
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Variable Selection";
MPRINT(EM_REPORT_SGPLOT):   title3 "Effects in the Model";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.Varsel_EFFECTDS;
MPRINT(EM_REPORT_SGPLOT):   vbar EFFECT / missing response=R2;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;
 
NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           0.73 seconds
      cpu time            0.25 seconds
 
NOTE: There were 5 observations read from the data set EMWS1.VARSEL_EFFECTDS.
 
MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = DTREE TREE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 16 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = ICICLE ICICLE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 20));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=20;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==20 : Viewtype = DATA LEAFSTATS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Varsel_emreport(where=(id eq 21));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.VARSEL_EMREPORT.
      WHERE id=21;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==21 : Viewtype = BAR VARIMPORTANCE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Trans")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='TRANS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
28928      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
28929      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
28929    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
28929    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
28930      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
28931      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
28932      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
28933      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
28934      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28935      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28936      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28937      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28938      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28939      output;
MPRINT(EM_GETTRAINPATH):   output;
28940      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
28941      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
28942      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
28943      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
28944      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
28945      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28946      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
28947      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28948      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28949      output;
MPRINT(EM_GETTRAINPATH):   output;
28950      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
28951      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
28952      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
28953      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
28954      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
28955      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
28956      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
28957      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
28958      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
28959      output;
MPRINT(EM_GETTRAINPATH):   output;
28960      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Trans"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Trans";
MPRINT(EM_REPORT_NODE):   put "Node label = Transform Variables";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Trans\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
28961      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
28962      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
28963      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
28963    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
28963    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
28964      Name = 'DefaultMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultMethod';
28965      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28966      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28967      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28968      Name = 'DefaultTargetMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultTargetMethod';
28969      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28970      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28971      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28972      Name = 'DefaultClassMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultClassMethod';
28973      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28974      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28975      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28976      Name = 'DefaultClassTargetMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultClassTargetMethod';
28977      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
28978      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28979      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28980      Name = 'Offset';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Offset';
28981      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
28982      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28983      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28984      Name = 'MinOffset';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinOffset';
28985      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28986      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28987      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28988      Name = 'HideVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideVariable';
28989      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28990      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28991      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28992      Name = 'RejectVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RejectVariable';
28993      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
28994      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
28995      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
28996      Name = 'GroupCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupCutoff';
28997      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
28998      Default = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "0.5";
28999      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29000      Name = 'GroupMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupMissing';
29001      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29002      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29003      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29004      Name = 'EmRandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmRandomSeed';
29005      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
29006      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29007      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29008      Name = 'EmSampleSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleSize';
29009      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29010      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29011      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29012      Name = 'EmSampleMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'EmSampleMethod';
29013      Value = "%nrbquote(FIRSTN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "FIRSTN";
29014      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29015      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29016      Name = 'MissingValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingValue';
29017      Value = "%nrbquote(USEINSEARCH)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "USEINSEARCH";
29018      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29019      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29020      Name = 'SummaryVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SummaryVariables';
29021      Value = "%nrbquote(TRANSFORMED)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRANSFORMED";
29022      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29023      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29024      Name = 'SummaryStatistics';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SummaryStatistics';
29025      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29026      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29027      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29028      Name = 'UseMetaTransform';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseMetaTransform';
29029      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29030      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29031      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29032      Name = 'MissingAsLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingAsLevel';
29033      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29034      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29035      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29036      Name = 'NumberofBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberofBins';
29037      Value = "%nrbquote(VARIABLES)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "VARIABLES";
29038      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29039      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29040      Name = 'MaxOptimalBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxOptimalBins';
29041      Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
29042      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29043      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29044      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
29045      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
29046      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
29047      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29048      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
29049      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29050      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29050    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
29051      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
29052      Value = "Transform";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Transform";
29053      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
29054      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29055      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29056      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
29057      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 7 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 7 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 7 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Trans_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Trans_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.TRANS_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 13 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
NOTE: There were 13 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Trans_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Trans" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_CMETA_TRAIN.
      WHERE UPCASE(creator)='Trans';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey6
MPRINT(EM_REPORT_NODE):   from EMWS1.Trans_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA FORMULA
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA COMPUTED
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = DATA METATRANS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = TEXT USERCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = DATA BESTRSQUARE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Trans_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = DATA STATISTICS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Transform Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Transformations Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Transform Variables Transformations
Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Trans_STATISTICS(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 6 observations read from the data set EMWS1.TRANS_STATISTICS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("BINNING")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='BINNING';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
29058      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
29059      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
29059    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
29059    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
29060      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
29061      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
29062      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
29063      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
29064      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29065      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29066      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29067      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29068      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29069      output;
MPRINT(EM_GETTRAINPATH):   output;
29070      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
29071      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
29072      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
29073      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
29074      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29075      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29076      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29077      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29078      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29079      output;
MPRINT(EM_GETTRAINPATH):   output;
29080      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
29081      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
29082      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
29083      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
29084      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
29085      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29086      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29087      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29088      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29089      output;
MPRINT(EM_GETTRAINPATH):   output;
29090      nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
29091      parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
29092      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
29093      component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
29094      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
29095      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29096      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29097      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29098      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29099      output;
MPRINT(EM_GETTRAINPATH):   output;
29100      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("BINNING"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = BINNING";
MPRINT(EM_REPORT_NODE):   put "Node label = Interactive Binning";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans => BINNING";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\BINNING\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
29101      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29102      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29103      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29103    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
29103    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
29104      Name = 'MissingAsLevel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MissingAsLevel';
29105      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29106      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29107      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29108      Name = 'ApplyLevelRule';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ApplyLevelRule';
29109      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29110      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29111      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29112      Name = 'BinMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'BinMethod';
29113      Value = "%nrbquote(QUANTILE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "QUANTILE";
29114      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29115      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29116      Name = 'NumBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumBins';
29117      Value = "%nrbquote(4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4";
29118      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29119      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29120      Name = 'Freeze';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Freeze';
29121      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29122      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29123      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29124      Name = 'CreateGrouping';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CreateGrouping';
29125      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29126      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29127      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29128      Name = 'CreateMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CreateMethod';
29129      Value = "%nrbquote(OVERWRITE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "OVERWRITE";
29130      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29131      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29132      Name = 'ImportGrouping';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportGrouping';
29133      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29134      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29135      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29136      Name = 'VarSelMethod';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'VarSelMethod';
29137      Value = "%nrbquote(GINI)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "GINI";
29138      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29139      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29140      Name = 'GiniCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GiniCutoff';
29141      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
29142      Default = "%nrbquote(20.0)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "20.0";
29143      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29144      Name = 'GrpMsmnt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GrpMsmnt';
29145      Value = "%nrbquote(ORDINAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ORDINAL";
29146      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29147      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29148      Name = 'MaxVar';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxVar';
29149      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
29150      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29151      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29152      Name = 'ClassGroupRare';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ClassGroupRare';
29153      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29154      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29155      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29156      Name = 'GroupCutoff';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupCutoff';
29157      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
29158      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29159      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29160      Name = 'INTTARGETMETHOD';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'INTTARGETMETHOD';
29161      Value = "%nrbquote(CUTMEAN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "CUTMEAN";
29162      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29163      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29164      Name = 'USERCUTVALUE';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'USERCUTVALUE';
29165      Value = "%nrbquote(0.20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.20";
29166      Default = "%nrbquote(0.2)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "0.2";
29167      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29168      Name = 'RejectIntTarget';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RejectIntTarget';
29169      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29170      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29171      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29172      Name = 'Precision';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Precision';
29173      Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
29174      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29175      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29176      Name = 'ImportData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImportData';
29177      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29178      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29179      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29180      Name = 'GroupMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GroupMissing';
29181      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29182      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29183      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29184      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
29185      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
29186      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
29187      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29188      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
29189      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29190      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29190    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
29191      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
29192      Value = "Binning";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Binning";
29193      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
29194      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29195      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29196      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
29197      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 20 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 7 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 7 and _n_ le 14 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 14 and _n_ le 21 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-7*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 21 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 7 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 7 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 7 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 7 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.BINNING_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.BINNING_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 14 observations read from the data set EMWS1.BINNING_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 14 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
12 OUTPUT;
14 OUTPUT;
NOTE: There were 14 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.BINNING_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "BINNING" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.BINNING_CMETA_TRAIN.
      WHERE UPCASE(creator)='BINNING';
NOTE: The data set WORK._TMPVL_PDVX has 4 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVX has 4 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 4 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Created Variables Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Created Variables
Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pdvxp noobs label contents='';
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDVXP.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey19
MPRINT(EM_REPORT_NODE):   from EMWS1.BINNING_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA EVENTRATESTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = DATA OUTPUTTABLE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Output Variables";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Output Variables";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.BINNING_RESULTSTABLE(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 12 observations read from the data set EMWS1.BINNING_RESULTSTABLE.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==14 : Viewtype = BAR STATPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SGPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SGPLOT):   title2 "Node=Interactive Binning";
MPRINT(EM_REPORT_SGPLOT):   title3 "Statistics Plot";
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=5000;
MPRINT(EM_REPORT_SGPLOT):   proc sgplot data=EMWS1.BINNING_RESULTSTABLE;
MPRINT(EM_REPORT_SGPLOT):   vbar DISPLAY_VAR / missing response=_GINI_;
MPRINT(EM_REPORT_SGPLOT):   xaxis type=discrete ;
MPRINT(EM_REPORT_SGPLOT):   keylegend;
MPRINT(EM_REPORT_SGPLOT):   run;
 
NOTE: PROCEDURE SGPLOT used (Total process time):
      real time           0.59 seconds
      cpu time            0.18 seconds
 
NOTE: There were 12 observations read from the data set EMWS1.BINNING_RESULTSTABLE.
 
MPRINT(EM_REPORT_SGPLOT):   quit;
MPRINT(EM_REPORT_SGPLOT):   ods graphics / discretemax=100;
MPRINT(EM_REPORT_SGPLOT):   title1;
MPRINT(EM_REPORT_SGPLOT):   title2;
MPRINT(EM_REPORT_SGPLOT):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.BINNING_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.BINNING_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = LATTICE EVENTRATE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct DISPLAY_VAR) into :numx from
EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) & (GINIORDER <= 10))));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Interactive Binning";
MPRINT(EM_REPORT_LATTICE):   title3 "Event Rate Plot";
MPRINT(EM_REPORT_LATTICE):   title4 "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel data=EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) &
(GINIORDER <= 10))));
MPRINT(EM_REPORT_LATTICE):   panelby DISPLAY_VAR / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   vbar _GROUP_ / response=EVENTRATE ;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin ;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: Since no format is assigned, the numeric category variable will use the default of BEST6.
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.85 seconds
      cpu time            0.57 seconds
 
NOTE: There were 20 observations read from the data set EMWS1.BINNING_COARSE.
      WHERE (_GINI_>=20) and (GINIORDER<=10);
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Interactive Binning";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Event Rate Plot";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Interactive Binning Event Rate Plot";
MPRINT(EM_REPORT_LATTICE):  ;
MPRINT(EM_REPORT_LATTICE):   proc print data=EMWS1.BINNING_COARSE(where=(((_GINI_ >= 20) &
(GINIORDER <= 10)))) noobs label contents='';
MPRINT(EM_REPORT_LATTICE):   var display_var _label_ _group_ role eventRate;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.BINNING_COARSE.
      WHERE (_GINI_>=20) and (GINIORDER<=10);
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Impt")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='IMPT';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
29198      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
29199      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
29199    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
29199    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
29200      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
29201      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
29202      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
29203      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
29204      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29205      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29206      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29207      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29208      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29209      output;
MPRINT(EM_GETTRAINPATH):   output;
29210      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
29211      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
29212      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
29213      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
29214      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29215      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29216      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29217      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29218      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29219      output;
MPRINT(EM_GETTRAINPATH):   output;
29220      nodelabel="Impt";
MPRINT(EM_GETTRAINPATH):   nodelabel="Impt";
29221      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
29222      description="Imputation";
MPRINT(EM_GETTRAINPATH):   description="Imputation";
29223      component="Impute";
MPRINT(EM_GETTRAINPATH):   component="Impute";
29224      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
29225      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29226      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29227      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29228      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29229      output;
MPRINT(EM_GETTRAINPATH):   output;
29230      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Impt"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Impute";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Impt";
MPRINT(EM_REPORT_NODE):   put "Node label = Impute";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Impt";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Impt\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
29231      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29232      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29233      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29233    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
29233    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
29234      Name = 'MethodInterval';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MethodInterval';
29235      Value = "%nrbquote(MEAN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MEAN";
29236      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29237      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29238      Name = 'MethodClass';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MethodClass';
29239      Value = "%nrbquote(COUNT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "COUNT";
29240      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29241      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29242      Name = 'MethodTargetInterval';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MethodTargetInterval';
29243      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
29244      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29245      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29246      Name = 'MethodTargetClass';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MethodTargetClass';
29247      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
29248      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29249      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29250      Name = 'ABWTuning';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ABWTuning';
29251      Value = "%nrbquote(9)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "9";
29252      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29253      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29254      Name = 'AHUBERTuning';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AHUBERTuning';
29255      Value = "%nrbquote(1.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.5";
29256      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29257      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29258      Name = 'AWAVETuning';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AWAVETuning';
29259      Value = "%nrbquote(6.2831853072)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "6.2831853072";
29260      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29261      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29262      Name = 'SpacingProportion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SpacingProportion';
29263      Value = "%nrbquote(90)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "90";
29264      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29265      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29266      Name = 'DefaultChar';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultChar';
29267      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29268      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29269      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29270      Name = 'DefaultNum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DefaultNum';
29271      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
29272      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29273      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29274      Name = 'RandomSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandomSeed';
29275      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
29276      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29277      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29278      Name = 'Normalize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Normalize';
29279      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29280      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29281      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29282      Name = 'ImputeNoMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ImputeNoMissing';
29283      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29284      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29285      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29286      Name = 'MaxPctMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxPctMissing';
29287      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
29288      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29289      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29290      Name = 'ValidateTestMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ValidateTestMissing';
29291      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29292      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29293      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29294      Name = 'DistributionMissing';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DistributionMissing';
29295      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29296      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29297      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29298      Name = 'LeafSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LeafSize';
29299      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29300      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29301      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29302      Name = 'Maxbranch';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxbranch';
29303      Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
29304      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29305      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29306      Name = 'Maxdepth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxdepth';
29307      Value = "%nrbquote(6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "6";
29308      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29309      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29310      Name = 'MinCatSize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinCatSize';
29311      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29312      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29313      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29314      Name = 'Nrules';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Nrules';
29315      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29316      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29317      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29318      Name = 'Nsurrs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Nsurrs';
29319      Value = "%nrbquote(2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "2";
29320      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29321      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29322      Name = 'Splitsize';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Splitsize';
29323      Value = "%nrbquote(.)";
MPRINT(EM_REPORT_PROPERTIES):   Value = ".";
29324      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29325      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29326      Name = 'Indicator';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Indicator';
29327      Value = "%nrbquote(NONE)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NONE";
29328      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29329      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29330      Name = 'IndicatorRole';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IndicatorRole';
29331      Value = "%nrbquote(REJECTED)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "REJECTED";
29332      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29333      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29334      Name = 'ReplaceVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ReplaceVariable';
29335      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29336      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29337      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29338      Name = 'HideVariable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HideVariable';
29339      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29340      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29341      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29342      Name = 'IndicatorSource';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'IndicatorSource';
29343      Value = "%nrbquote(IMPUTED)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "IMPUTED";
29344      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29345      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29346      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 28 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
29347      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
29348      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
29349      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 28 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 28 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29350      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
29351      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29352      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29352    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
29353      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
29354      Value = "Impute";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Impute";
29355      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
29356      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
29357      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29358      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
29359      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 28 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 29 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Impute";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Impute Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 10 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-10*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 10 and _n_ le 20 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-10*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 20 and _n_ le 30 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-10*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 29 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 10 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 10 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 10 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 10 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 10 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 10 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 9 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 9 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 10 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 10 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 9 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 10 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 10 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Impt_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Impt_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 13 observations read from the data set EMWS1.IMPT_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 12 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
11 OUTPUT;
NOTE: There were 12 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Impute";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Impute Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Impt_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Impt" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
      WHERE UPCASE(creator)='Impt';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Impt_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Impt_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey8
MPRINT(EM_REPORT_NODE):   from EMWS1.Impt_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA IMPUTATION
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Impute";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Imputation Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Impute Imputation Summary";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.Impt_RESULT(obs=100) noobs label contents='';
MPRINT(EM_REPORT_DATA):   run ;
 
NOTE: There were 11 observations read from the data set EMWS1.IMPT_RESULT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Impt_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.IMPT_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = BAR MISSINGDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
29360      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
29361      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
29361    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
29361    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
29362      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
29363      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
29364      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
29365      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
29366      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29367      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29368      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29369      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29370      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29371      output;
MPRINT(EM_GETTRAINPATH):   output;
29372      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
29373      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
29374      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
29375      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
29376      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29377      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29378      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29379      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29380      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29381      output;
MPRINT(EM_GETTRAINPATH):   output;
29382      nodelabel="Varsel";
MPRINT(EM_GETTRAINPATH):   nodelabel="Varsel";
29383      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
29384      description="Variable selection  Class";
MPRINT(EM_GETTRAINPATH):   description="Variable selection  Class";
29385      component="VariableSelection";
MPRINT(EM_GETTRAINPATH):   component="VariableSelection";
29386      tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
29387      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29388      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29389      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29390      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29391      output;
MPRINT(EM_GETTRAINPATH):   output;
29392      nodelabel="Neural";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural";
29393      parent="Varsel";
MPRINT(EM_GETTRAINPATH):   parent="Varsel";
29394      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
29395      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
29396      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
29397      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29398      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29399      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29400      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29401      output;
MPRINT(EM_GETTRAINPATH):   output;
29402      run;
MPRINT(EM_GETTRAINPATH):   run;
 
4 The SAS System
 
NOTE: The data set WORK._TMP_EMRNP has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Varsel => Neural";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
29403      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29404      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29405      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29405    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
29405    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
29406      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
29407      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29408      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29409      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29410      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
29411      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
29412      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29413      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29414      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
29415      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29416      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29417      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29418      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
29419      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29420      Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
29421      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29422      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
29423      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29424      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29425      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29426      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
29427      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29428      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29429      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29430      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
29431      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
29432      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29433      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29434      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
29435      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
29436      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29437      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29438      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
29439      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
29440      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29441      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29442      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
29443      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
29444      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29445      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29446      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
29447      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29448      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29449      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29450      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
29451      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29452      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29453      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29454      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
29455      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
29456      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
29457      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29458      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
29459      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29460      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29461      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29462      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
29463      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29464      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29465      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29466      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
29467      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
29468      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29469      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29470      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
29471      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29472      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29473      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29474      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
29475      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
29476      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29477      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29478      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
29479      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29480      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29481      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29482      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
29483      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29484      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29485      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29486      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
29487      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29488      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29489      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29490      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
29491      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
29492      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29493      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29494      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
29495      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29496      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29497      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29498      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
29499      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
29500      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29501      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29502      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
29503      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29504      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29505      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29506      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
29507      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29508      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29509      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29510      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
29511      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29512      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29513      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29514      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
29515      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29516      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29517      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29518      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
29519      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29520      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29521      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29522      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
29523      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29524      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29525      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29526      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
29527      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29528      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29529      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29530      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
29531      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29532      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29533      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29534      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
29535      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29536      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29537      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29538      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
29539      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29540      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29541      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29542      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
29543      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29544      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29545      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29546      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
29547      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29548      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29549      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29550      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
29551      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29552      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29553      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29554      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
29555      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29556      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29557      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29558      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
29559      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29560      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29561      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29562      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
29563      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29564      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29565      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29566      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
29567      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29568      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29569      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29570      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
29571      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29572      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29573      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29574      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
29575      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29576      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29577      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29578      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
29579      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
29580      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29581      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29582      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
29583      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
29584      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29585      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29586      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
29587      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
29588      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29589      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29590      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
29591      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29592      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29593      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29594      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
29595      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
29596      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29597      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29598      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
29599      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29600      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29601      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29602      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
29603      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
29604      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29605      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29606      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
29607      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
29608      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29609      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29610      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
29611      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
29612      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29613      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29614      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
29615      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
29616      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29617      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29618      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
29619      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
29620      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29621      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29622      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
29623      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29624      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29625      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29626      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
29627      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
29628      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29629      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29630      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
29631      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29632      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29633      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29634      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
29635      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
29636      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
29637      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29638      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
29639      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29640      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29640    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
29641      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
29642      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
29643      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
29644      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29645      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29646      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
29647      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
6 OUTPUT;
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=43;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=43;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.99 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.06 seconds
      cpu time            0.25 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.06 seconds
      cpu time            0.28 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.81 seconds
      cpu time            0.25 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.98 seconds
      cpu time            0.32 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.90 seconds
      cpu time            0.32 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural2")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL2';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
29648      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
29649      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
29649    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
29649    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
29650      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
29651      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
29652      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
29653      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
29654      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29655      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29656      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29657      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29658      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29659      output;
MPRINT(EM_GETTRAINPATH):   output;
29660      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
29661      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
29662      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
29663      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
29664      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29665      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29666      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29667      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29668      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29669      output;
MPRINT(EM_GETTRAINPATH):   output;
29670      nodelabel="Varsel";
MPRINT(EM_GETTRAINPATH):   nodelabel="Varsel";
29671      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
29672      description="Variable selection  Class";
MPRINT(EM_GETTRAINPATH):   description="Variable selection  Class";
29673      component="VariableSelection";
MPRINT(EM_GETTRAINPATH):   component="VariableSelection";
29674      tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
29675      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29676      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29677      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29678      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29679      output;
MPRINT(EM_GETTRAINPATH):   output;
29680      nodelabel="Neural2";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural2";
29681      parent="Varsel";
MPRINT(EM_GETTRAINPATH):   parent="Varsel";
29682      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
29683      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
29684      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
29685      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29686      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29687      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29688      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29689      output;
MPRINT(EM_GETTRAINPATH):   output;
29690      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural2"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural2";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (2)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Varsel => Neural2";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural2\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
29691      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29692      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29693      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29693    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
29693    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
29694      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
29695      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29696      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29697      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29698      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
29699      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
29700      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29701      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29702      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
29703      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29704      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29705      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29706      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
29707      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29708      Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
29709      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29710      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
29711      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29712      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29713      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29714      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
29715      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
29716      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29717      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29718      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
29719      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
29720      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29721      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29722      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
29723      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
29724      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29725      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29726      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
29727      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
29728      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29729      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29730      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
29731      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
29732      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29733      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29734      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
29735      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29736      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29737      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29738      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
29739      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29740      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29741      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29742      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
29743      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
29744      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
29745      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29746      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
29747      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29748      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29749      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29750      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
29751      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29752      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29753      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29754      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
29755      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
29756      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29757      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29758      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
29759      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29760      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29761      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29762      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
29763      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
29764      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29765      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29766      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
29767      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29768      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29769      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29770      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
29771      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29772      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29773      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29774      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
29775      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29776      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29777      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29778      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
29779      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
29780      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29781      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29782      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
29783      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
29784      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29785      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29786      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
29787      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
29788      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29789      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29790      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
29791      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29792      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29793      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29794      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
29795      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29796      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29797      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29798      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
29799      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29800      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29801      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29802      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
29803      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29804      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29805      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29806      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
29807      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29808      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29809      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29810      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
29811      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29812      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29813      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29814      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
29815      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29816      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29817      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29818      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
29819      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29820      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29821      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29822      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
29823      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29824      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29825      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29826      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
29827      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29828      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29829      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29830      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
29831      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
29832      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29833      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29834      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
29835      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29836      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29837      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29838      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
29839      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29840      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29841      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29842      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
29843      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29844      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29845      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29846      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
29847      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29848      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29849      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29850      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
29851      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29852      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29853      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29854      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
29855      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29856      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29857      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29858      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
29859      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
29860      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29861      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29862      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
29863      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
29864      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29865      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29866      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
29867      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
29868      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29869      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29870      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
29871      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
29872      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29873      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29874      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
29875      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
29876      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29877      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29878      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
29879      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29880      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29881      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29882      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
29883      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
29884      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29885      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29886      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
29887      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29888      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29889      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29890      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
29891      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
29892      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29893      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29894      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
29895      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
29896      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29897      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29898      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
29899      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
29900      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29901      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29902      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
29903      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
29904      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29905      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29906      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
29907      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
29908      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29909      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29910      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
29911      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29912      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29913      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29914      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
29915      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
29916      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29917      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29918      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
29919      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
29920      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29921      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29922      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
29923      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
29924      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
29925      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29926      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
29927      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29928      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29928    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
29929      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
29930      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
29931      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
29932      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
29933      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29934      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
29935      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural2_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural2_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
6 OUTPUT;
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural2_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural2" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural2';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural2_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural2_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL2_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural2_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural2_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (2)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=0;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural2_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 12 observations read from the data set EMWS1.NEURAL2_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 12 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.59 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural2_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.86 seconds
      cpu time            0.28 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.78 seconds
      cpu time            0.29 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.81 seconds
      cpu time            0.26 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural2_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL2_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural2_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural2_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL2_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (2)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.70 seconds
      cpu time            0.29 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.74 seconds
      cpu time            0.26 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (2)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (2) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural3")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL3';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
29936      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
29937      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
29937    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
29937    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
29938      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
29939      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
29940      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
29941      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
29942      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29943      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29944      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29945      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29946      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29947      output;
MPRINT(EM_GETTRAINPATH):   output;
29948      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
29949      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
29950      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
29951      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
29952      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
29953      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29954      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29955      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29956      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29957      output;
MPRINT(EM_GETTRAINPATH):   output;
29958      nodelabel="Varsel";
MPRINT(EM_GETTRAINPATH):   nodelabel="Varsel";
29959      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
29960      description="Variable selection  Class";
MPRINT(EM_GETTRAINPATH):   description="Variable selection  Class";
29961      component="VariableSelection";
MPRINT(EM_GETTRAINPATH):   component="VariableSelection";
29962      tooltype="EXPLORE";
MPRINT(EM_GETTRAINPATH):   tooltype="EXPLORE";
29963      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29964      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
29965      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29966      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29967      output;
MPRINT(EM_GETTRAINPATH):   output;
29968      nodelabel="Neural3";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural3";
29969      parent="Varsel";
MPRINT(EM_GETTRAINPATH):   parent="Varsel";
29970      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
29971      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
29972      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
29973      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
29974      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
29975      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
29976      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
29977      output;
MPRINT(EM_GETTRAINPATH):   output;
29978      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural3"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural3";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (3)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Varsel => Neural3";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural3\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
29979      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
29980      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
29981      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
29981    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
29981    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
29982      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
29983      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29984      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29985      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29986      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
29987      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
29988      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29989      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29990      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
29991      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
29992      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29993      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29994      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
29995      Value = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3";
29996      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
29997      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
29998      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
29999      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30000      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30001      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30002      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
30003      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
30004      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30005      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30006      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
30007      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
30008      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30009      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30010      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
30011      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
30012      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30013      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30014      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
30015      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30016      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30017      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30018      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
30019      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
30020      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30021      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30022      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
30023      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30024      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30025      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30026      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
30027      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30028      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30029      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30030      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
30031      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
30032      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
30033      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30034      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
30035      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30036      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30037      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30038      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
30039      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30040      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30041      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30042      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
30043      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30044      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30045      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30046      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
30047      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30048      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30049      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30050      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
30051      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
30052      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30053      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30054      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
30055      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30056      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30057      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30058      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
30059      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30060      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30061      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30062      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
30063      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30064      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30065      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30066      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
30067      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
30068      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30069      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30070      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
30071      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30072      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30073      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30074      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
30075      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
30076      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30077      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30078      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
30079      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30080      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30081      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30082      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
30083      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30084      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30085      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30086      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
30087      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30088      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30089      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30090      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
30091      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30092      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30093      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30094      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
30095      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30096      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30097      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30098      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
30099      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30100      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30101      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30102      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
30103      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30104      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30105      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30106      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
30107      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30108      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30109      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30110      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
30111      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30112      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30113      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30114      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
30115      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30116      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30117      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30118      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
30119      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30120      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30121      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30122      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
30123      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30124      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30125      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30126      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
30127      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30128      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30129      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30130      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
30131      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30132      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30133      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30134      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
30135      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30136      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30137      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30138      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
30139      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30140      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30141      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30142      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
30143      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30144      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30145      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30146      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
30147      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30148      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30149      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30150      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
30151      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30152      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30153      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30154      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
30155      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
30156      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30157      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30158      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
30159      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
30160      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30161      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30162      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
30163      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30164      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30165      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30166      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
30167      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30168      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30169      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30170      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
30171      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
30172      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30173      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30174      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
30175      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30176      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30177      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30178      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
30179      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
30180      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30181      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30182      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
30183      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
30184      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30185      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30186      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
30187      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30188      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30189      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30190      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
30191      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30192      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30193      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30194      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
30195      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30196      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30197      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30198      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
30199      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30200      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30201      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30202      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
30203      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
30204      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30205      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30206      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
30207      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30208      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30209      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30210      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
30211      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
30212      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
30213      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
30214      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
30215      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30216      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30216    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
30217      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
30218      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
30219      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
30220      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
30221      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30222      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
30223      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.13 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural3_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural3_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 6 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
6 OUTPUT;
NOTE: There were 6 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural3_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural3" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural3';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural3_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural3_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL3_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural3_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL3_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural3_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (3)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=6;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=6;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural3_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 22 observations read from the data set EMWS1.NEURAL3_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 22 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 22 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.61 seconds
      cpu time            0.29 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural3_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.56 seconds
      cpu time            0.21 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural3_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL3_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural3_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural3_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL3_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (3)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.79 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (3)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (3) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural5")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL5';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
30224      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
30225      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
30225    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
30225    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
30226      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
30227      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
30228      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
30229      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
30230      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30231      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30232      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30233      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30234      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30235      output;
MPRINT(EM_GETTRAINPATH):   output;
30236      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
30237      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
30238      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
30239      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
30240      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30241      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30242      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
30243      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30244      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30245      output;
MPRINT(EM_GETTRAINPATH):   output;
30246      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
30247      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
30248      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
30249      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
30250      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30251      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30252      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30253      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30254      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30255      output;
MPRINT(EM_GETTRAINPATH):   output;
30256      nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
30257      parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
30258      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
30259      component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
30260      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30261      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30262      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30263      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30264      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30265      output;
MPRINT(EM_GETTRAINPATH):   output;
30266      nodelabel="Neural5";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural5";
30267      parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
30268      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
30269      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
30270      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
30271      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30272      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30273      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30274      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30275      output;
MPRINT(EM_GETTRAINPATH):   output;
30276      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural5"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural5";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (5)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans => BINNING => Neural5";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural5\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
30277      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30278      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30279      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30279    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
30279    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
30280      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
30281      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30282      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30283      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30284      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
30285      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
30286      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30287      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30288      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
30289      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30290      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30291      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30292      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
30293      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
30294      Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
30295      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30296      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
30297      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30298      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30299      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30300      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
30301      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
30302      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30303      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30304      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
30305      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
30306      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30307      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30308      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
30309      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
30310      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30311      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30312      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
30313      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30314      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30315      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30316      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
30317      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
30318      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30319      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30320      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
30321      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30322      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30323      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30324      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
30325      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30326      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30327      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30328      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
30329      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
30330      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
30331      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30332      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
30333      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30334      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30335      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30336      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
30337      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30338      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30339      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30340      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
30341      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30342      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30343      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30344      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
30345      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30346      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30347      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30348      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
30349      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
30350      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30351      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30352      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
30353      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30354      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30355      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30356      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
30357      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30358      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30359      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30360      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
30361      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30362      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30363      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30364      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
30365      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
30366      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30367      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30368      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
30369      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30370      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30371      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30372      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
30373      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
30374      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30375      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30376      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
30377      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30378      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30379      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30380      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
30381      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30382      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30383      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30384      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
30385      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30386      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30387      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30388      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
30389      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30390      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30391      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30392      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
30393      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30394      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30395      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30396      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
30397      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30398      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30399      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30400      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
30401      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30402      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30403      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30404      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
30405      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30406      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30407      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30408      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
30409      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30410      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30411      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30412      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
30413      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30414      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30415      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30416      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
30417      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30418      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30419      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30420      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
30421      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30422      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30423      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30424      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
30425      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30426      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30427      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30428      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
30429      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30430      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30431      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30432      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
30433      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30434      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30435      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30436      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
30437      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30438      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30439      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30440      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
30441      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30442      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30443      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30444      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
30445      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30446      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30447      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30448      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
30449      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30450      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30451      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30452      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
30453      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
30454      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30455      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30456      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
30457      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
30458      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30459      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30460      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
30461      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30462      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30463      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30464      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
30465      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30466      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30467      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30468      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
30469      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
30470      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30471      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30472      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
30473      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30474      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30475      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30476      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
30477      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
30478      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30479      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30480      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
30481      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
30482      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30483      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30484      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
30485      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30486      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30487      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30488      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
30489      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30490      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30491      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30492      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
30493      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30494      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30495      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30496      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
30497      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30498      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30499      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30500      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
30501      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
30502      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30503      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30504      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
30505      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30506      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30507      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30508      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
30509      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
30510      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
30511      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
30512      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
30513      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30514      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30514    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
30515      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
30516      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
30517      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
30518      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
30519      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30520      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
30521      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural5_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural5_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 17 observations read from the data set EMWS1.NEURAL5_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural5_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural5" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural5';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural5_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural5_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL5_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural5_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL5_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural5_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (5)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural5_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 52 observations read from the data set EMWS1.NEURAL5_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 52 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 52 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.59 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
5 The SAS System
 
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural5_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL5_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.65 seconds
      cpu time            0.25 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.71 seconds
      cpu time            0.28 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.71 seconds
      cpu time            0.32 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural5_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL5_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural5_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural5_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL5_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (5)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.32 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.73 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (5)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (5) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural6")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL6';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
30522      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
30523      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
30523    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
30523    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
30524      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
30525      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
30526      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
30527      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
30528      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30529      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30530      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30531      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30532      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30533      output;
MPRINT(EM_GETTRAINPATH):   output;
30534      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
30535      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
30536      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
30537      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
30538      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30539      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30540      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
30541      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30542      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30543      output;
MPRINT(EM_GETTRAINPATH):   output;
30544      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
30545      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
30546      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
30547      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
30548      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30549      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30550      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30551      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30552      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30553      output;
MPRINT(EM_GETTRAINPATH):   output;
30554      nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
30555      parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
30556      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
30557      component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
30558      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30559      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30560      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30561      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30562      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30563      output;
MPRINT(EM_GETTRAINPATH):   output;
30564      nodelabel="Neural6";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural6";
30565      parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
30566      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
30567      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
30568      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
30569      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30570      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30571      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30572      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30573      output;
MPRINT(EM_GETTRAINPATH):   output;
30574      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural6"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural6";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (6)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans => BINNING => Neural6";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural6\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
30575      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30576      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30577      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30577    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
30577    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
30578      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
30579      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30580      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30581      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30582      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
30583      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
30584      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30585      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30586      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
30587      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30588      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30589      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30590      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
30591      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30592      Default = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "3";
30593      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30594      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
30595      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30596      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30597      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30598      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
30599      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
30600      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30601      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30602      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
30603      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
30604      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30605      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30606      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
30607      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
30608      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30609      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30610      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
30611      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30612      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30613      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30614      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
30615      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
30616      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30617      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30618      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
30619      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30620      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30621      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30622      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
30623      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30624      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30625      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30626      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
30627      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
30628      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
30629      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30630      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
30631      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30632      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30633      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30634      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
30635      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30636      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30637      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30638      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
30639      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30640      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30641      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30642      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
30643      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30644      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30645      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30646      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
30647      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
30648      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30649      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30650      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
30651      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30652      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30653      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30654      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
30655      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30656      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30657      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30658      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
30659      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30660      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30661      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30662      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
30663      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
30664      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30665      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30666      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
30667      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30668      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30669      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30670      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
30671      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
30672      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30673      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30674      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
30675      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30676      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30677      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30678      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
30679      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30680      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30681      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30682      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
30683      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30684      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30685      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30686      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
30687      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30688      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30689      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30690      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
30691      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30692      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30693      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30694      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
30695      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30696      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30697      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30698      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
30699      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30700      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30701      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30702      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
30703      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30704      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30705      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30706      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
30707      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30708      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30709      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30710      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
30711      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30712      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30713      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30714      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
30715      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30716      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30717      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30718      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
30719      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30720      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30721      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30722      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
30723      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30724      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30725      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30726      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
30727      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30728      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30729      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30730      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
30731      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30732      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30733      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30734      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
30735      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30736      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30737      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30738      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
30739      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30740      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30741      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30742      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
30743      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30744      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30745      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30746      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
30747      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30748      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30749      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30750      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
30751      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
30752      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30753      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30754      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
30755      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
30756      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30757      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30758      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
30759      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30760      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30761      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30762      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
30763      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30764      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30765      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30766      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
30767      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
30768      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30769      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30770      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
30771      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30772      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30773      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30774      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
30775      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
30776      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30777      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30778      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
30779      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
30780      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30781      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30782      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
30783      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
30784      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30785      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30786      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
30787      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30788      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30789      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30790      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
30791      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30792      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30793      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30794      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
30795      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30796      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30797      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30798      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
30799      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
30800      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30801      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30802      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
30803      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30804      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30805      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30806      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
30807      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
30808      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
30809      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
30810      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
30811      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30812      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30812    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
30813      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
30814      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
30815      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
30816      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
30817      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30818      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
30819      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural6_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural6_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 17 observations read from the data set EMWS1.NEURAL6_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural6_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural6" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural6';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural6_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural6_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL6_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural6_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL6_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural6_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (6)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=2;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural6_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 12 observations read from the data set EMWS1.NEURAL6_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 12 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 12 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.51 seconds
      cpu time            0.25 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural6_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL6_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.71 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.65 seconds
      cpu time            0.28 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.79 seconds
      cpu time            0.36 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural6_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL6_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural6_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural6_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set EMWS1.NEURAL6_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 24 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 24 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (6)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.35 seconds
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.64 seconds
      cpu time            0.26 seconds
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 24 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (6)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (6) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 24 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("Neural4")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='NEURAL4';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
30820      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
30821      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
30821    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
30821    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
30822      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
30823      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
30824      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
30825      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
30826      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30827      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30828      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30829      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30830      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30831      output;
MPRINT(EM_GETTRAINPATH):   output;
30832      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
30833      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
30834      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
30835      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
30836      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
30837      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30838      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
30839      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30840      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30841      output;
MPRINT(EM_GETTRAINPATH):   output;
30842      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
30843      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
30844      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
30845      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
30846      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30847      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30848      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30849      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30850      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30851      output;
MPRINT(EM_GETTRAINPATH):   output;
30852      nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
30853      parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
30854      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
30855      component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
30856      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
30857      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30858      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30859      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30860      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30861      output;
MPRINT(EM_GETTRAINPATH):   output;
30862      nodelabel="Neural4";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural4";
30863      parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
30864      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
30865      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
30866      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
30867      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
30868      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
30869      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
30870      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
30871      output;
MPRINT(EM_GETTRAINPATH):   output;
30872      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("Neural4"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = Neural4";
MPRINT(EM_REPORT_NODE):   put "Node label = Neural Network (4)";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans => BINNING => Neural4";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\Neural4\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
30873      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
30874      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
30875      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
30875    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
30875    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
30876      Name = 'UseEstimates';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'UseEstimates';
30877      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30878      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30879      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30880      Name = 'NetworkArchitecture';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NetworkArchitecture';
30881      Value = "%nrbquote(MLP)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "MLP";
30882      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30883      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30884      Name = 'DirectConnection';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DirectConnection';
30885      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30886      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30887      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30888      Name = 'Hidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Hidden';
30889      Value = "%nrbquote(3)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "3";
30890      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30891      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30892      Name = 'Prelim';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Prelim';
30893      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30894      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30895      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30896      Name = 'PreliminaryRuns';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PreliminaryRuns';
30897      Value = "%nrbquote(5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "5";
30898      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30899      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30900      Name = 'PrelimMaxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxiter';
30901      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
30902      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30903      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30904      Name = 'PrelimMaxTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimMaxTime';
30905      Value = "%nrbquote(1 HOUR)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1 HOUR";
30906      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30907      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30908      Name = 'Maxiter';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxiter';
30909      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
30910      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30911      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30912      Name = 'Maxtime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Maxtime';
30913      Value = "%nrbquote(4 HOURS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "4 HOURS";
30914      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30915      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30916      Name = 'TrainingTechnique';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainingTechnique';
30917      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
30918      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30919      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30920      Name = 'ConvDefaults';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ConvDefaults';
30921      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30922      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30923      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30924      Name = 'AbsConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsConvValue';
30925      Value = "%nrbquote(-1.34078E154)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "-1.34078E154";
30926      Default = "%nrbquote(-7.237006E75)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "-7.237006E75";
30927      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30928      Name = 'AbsFValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFValue';
30929      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30930      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30931      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30932      Name = 'AbsFTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsFTime';
30933      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30934      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30935      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30936      Name = 'AbsGValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGValue';
30937      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
30938      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30939      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30940      Name = 'AbsGTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsGTime';
30941      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30942      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30943      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30944      Name = 'AbsXValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXValue';
30945      Value = "%nrbquote(1E-8)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-8";
30946      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30947      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30948      Name = 'AbsXTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AbsXTime';
30949      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30950      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30951      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30952      Name = 'FConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvValue';
30953      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
30954      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30955      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30956      Name = 'FConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'FConvTime';
30957      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30958      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30959      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30960      Name = 'GConvValue';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvValue';
30961      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
30962      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30963      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30964      Name = 'GConvTime';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'GConvTime';
30965      Value = "%nrbquote(1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1";
30966      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30967      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30968      Name = 'ModelSelectionCriterion';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelSelectionCriterion';
30969      Value = "%nrbquote(PROFIT/LOSS)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "PROFIT/LOSS";
30970      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30971      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30972      Name = 'SuppressOutput';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SuppressOutput';
30973      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30974      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30975      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30976      Name = 'Residuals';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Residuals';
30977      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
30978      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30979      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30980      Name = 'Standardizations';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Standardizations';
30981      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30982      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30983      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30984      Name = 'HiddenUnits';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenUnits';
30985      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
30986      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30987      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30988      Name = 'TrainCode';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TrainCode';
30989      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30990      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30991      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30992      Name = 'PrelimOutest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'PrelimOutest';
30993      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30994      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30995      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
30996      Name = 'Outest';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outest';
30997      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
30998      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
30999      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31000      Name = 'Outfit';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Outfit';
31001      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
31002      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31003      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31004      Name = 'InitialDs';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialDs';
31005      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
31006      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31007      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31008      Name = 'CodefileRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileRes';
31009      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
31010      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31011      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31012      Name = 'CodefileNoRes';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'CodefileNoRes';
31013      Value = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Value = "";
31014      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31015      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31016      Name = 'AddHidden';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AddHidden';
31017      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
31018      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31019      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31020      Name = 'HiddenCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenCombFunction';
31021      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31022      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31023      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31024      Name = 'HiddenActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenActivation';
31025      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31026      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31027      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31028      Name = 'HiddenBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HiddenBias';
31029      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
31030      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31031      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31032      Name = 'TargetCombFunction';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetCombFunction';
31033      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31034      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31035      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31036      Name = 'TargetActivation';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetActivation';
31037      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31038      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31039      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31040      Name = 'TargetError';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetError';
31041      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31042      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31043      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31044      Name = 'TargetBias';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetBias';
31045      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
31046      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31047      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31048      Name = 'InitialSeed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InitialSeed';
31049      Value = "%nrbquote(12345)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "12345";
31050      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31051      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31052      Name = 'RandDist';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandDist';
31053      Value = "%nrbquote(NORMAL)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NORMAL";
31054      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31055      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31056      Name = 'RandScale';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandScale';
31057      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
31058      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31059      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31060      Name = 'RandLoc';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RandLoc';
31061      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
31062      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31063      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31064      Name = 'InputStandardization';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'InputStandardization';
31065      Value = "%nrbquote(STD)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "STD";
31066      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31067      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31068      Name = 'WeightDecay';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'WeightDecay';
31069      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
31070      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31071      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31072      Name = 'Accelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Accelerate';
31073      Value = "%nrbquote(1.2)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.2";
31074      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31075      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31076      Name = 'Decelerate';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Decelerate';
31077      Value = "%nrbquote(0.5)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.5";
31078      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31079      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31080      Name = 'Learn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Learn';
31081      Value = "%nrbquote(0.1)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.1";
31082      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31083      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31084      Name = 'MaxLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxLearn';
31085      Value = "%nrbquote(50)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "50";
31086      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31087      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31088      Name = 'MinLearn';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MinLearn';
31089      Value = "%nrbquote(0.00001)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.00001";
31090      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31091      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31092      Name = 'Momentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Momentum';
31093      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
31094      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31095      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31096      Name = 'MaxMomentum';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'MaxMomentum';
31097      Value = "%nrbquote(1.75)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1.75";
31098      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31099      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31100      Name = 'Tilt';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Tilt';
31101      Value = "%nrbquote(0)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0";
31102      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31103      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31104      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
31105      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
31106      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
31107      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 57 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31108      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
31109      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
31110      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
31110    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
31111      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
31112      Value = "NeuralNetwork";
MPRINT(EM_REPORT_PROPERTIES):   Value = "NeuralNetwork";
31113      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
31114      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31115      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
31116      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
31117      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 57 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 58 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 19 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 19 and _n_ le 38 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 38 and _n_ le 57 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-19*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 58 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 19 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 19 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 19 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 19 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.Neural4_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural4_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 17 observations read from the data set EMWS1.NEURAL4_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 5 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
2 OUTPUT;
NOTE: There were 5 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.Neural4_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "Neural4" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_CMETA_TRAIN.
      WHERE UPCASE(creator)='Neural4';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey21
MPRINT(EM_REPORT_NODE):   from EMWS1.Neural4_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA REPORTFITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data pd;
MPRINT(EM_REPORT_DATA):   set EMWS1.Neural4_EMREPORTFIT ;
MPRINT(EM_REPORT_DATA):   where train ne . ;
MPRINT(EM_REPORT_DATA):   label _NOBS_ = "Sum of Frequencies" _MISC_ = "Misclassification Rate"
_MAX_ = "Maximum Absolute Error" _SSE_ = "Sum of Square Errors" _ASE_ = "Average Squared Error"
_RASE_ = "Root Average Square Error" _DIV_ = "Divisor for ASE" _DFT_ = "Total Degrees of
Freedom" _AIC_ = "Akaike's Information Criterion" _MSE_ = "Mean Squared Error" _RMSE_ = "Root
Mean Squared Error" _AVERR_ = "Average Error Function" _DFE_ = "Degrees of Freedom for Error"
_DFM_ = "Model Degrees of Freedom" _ERR_ = "Error Function" _FPE_ = "Final Prediction Error"
_NW_ = "Number of Weights" _RFPE_ = "Root Final Prediction Error" _SBC_ = "Schwarz's Bayesian
Criterion" ;
MPRINT(EM_REPORT_DATA):   drop stat ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: Variable _NOBS_ is uninitialized.
NOTE: Variable _MISC_ is uninitialized.
NOTE: Variable _MAX_ is uninitialized.
NOTE: Variable _SSE_ is uninitialized.
NOTE: Variable _ASE_ is uninitialized.
NOTE: Variable _RASE_ is uninitialized.
NOTE: Variable _DIV_ is uninitialized.
NOTE: Variable _DFT_ is uninitialized.
NOTE: Variable _AIC_ is uninitialized.
NOTE: Variable _MSE_ is uninitialized.
NOTE: Variable _RMSE_ is uninitialized.
NOTE: Variable _AVERR_ is uninitialized.
NOTE: Variable _DFE_ is uninitialized.
NOTE: Variable _DFM_ is uninitialized.
NOTE: Variable _ERR_ is uninitialized.
NOTE: Variable _FPE_ is uninitialized.
NOTE: Variable _NW_ is uninitialized.
NOTE: Variable _RFPE_ is uninitialized.
NOTE: Variable _SBC_ is uninitialized.
NOTE: There were 21 observations read from the data set EMWS1.NEURAL4_EMREPORTFIT.
      WHERE train not = .;
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Model Fit Statistics";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Model Fit Statistics";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc sort data=pd;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: The data set WORK.PD has 21 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_DATA):   proc print data=pd noobs label contents='';
MPRINT(EM_REPORT_DATA):   label label= "Label of Statistic" ;
MPRINT(EM_REPORT_DATA):   by target targetlabel;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 21 observations read from the data set WORK.PD.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==13 : Viewtype = ITERATIONPLOT ITERATIONPLOT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_ITERATIONPLOT):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_ITERATIONPLOT):   title3 "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   data _null_ ;
MPRINT(EM_REPORT_ITERATIONPLOT):   set EMWS1.Neural4_PLOTDS(obs=2) end=eof;
MPRINT(EM_REPORT_ITERATIONPLOT):   if eof then do ;
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_ase_',_ase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vase_',_vase_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_misc_',_misc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   call symput('_vmisc_',_vmisc_);
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      18:139   21:125   23:123   26:124
NOTE: There were 2 observations read from the data set EMWS1.NEURAL4_PLOTDS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
9 24 22 35
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sql noprint;
MPRINT(EM_REPORT_ITERATIONPLOT):   select count(*) into :nonMiss_vmisc from EMWS1.Neural4_PLOTDS
where _vmisc_ ne .;
MPRINT(EM_REPORT_ITERATIONPLOT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   ods path(prepend) work.templat(update);
MPRINT(EM_REPORT_ITERATIONPLOT):   proc template;
MPRINT(EM_REPORT_ITERATIONPLOT):   define statgraph em.IterationPlot / store=work.templat;
MPRINT(EM_REPORT_ITERATIONPLOT):   begingraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Node=Neural Network (4)";
MPRINT(EM_REPORT_ITERATIONPLOT):   entrytitle "Model Iteration Plots";
MPRINT(EM_REPORT_ITERATIONPLOT):   layout lattice / order=columnmajor rows=1 rowdatarange=data
columngutter=10;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Average Square Error");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_ASE_ / markerattrs=(size=0)
display=all name='train' legendlabel="Train";
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VASE_ / markerattrs=(size=0)
display=all name='validate' legendlabel="Validate";
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay / cycleattrs=true xaxisopts=(griddisplay=on
label="Iteration") yaxisopts=(griddisplay=on label="Misclassification Rate");
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_MISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   seriesplot x=_ITER_ y=_VMISC_ / markerattrs=(size=0)
display=all;
MPRINT(EM_REPORT_ITERATIONPLOT):   referenceline x=1;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   sidebar / align=bottom;
MPRINT(EM_REPORT_ITERATIONPLOT):   layout overlay;
MPRINT(EM_REPORT_ITERATIONPLOT):   discretelegend 'train' 'validate' / down=1 order=columnmajor;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endsidebar;
MPRINT(EM_REPORT_ITERATIONPLOT):   endlayout;
MPRINT(EM_REPORT_ITERATIONPLOT):   endgraph;
MPRINT(EM_REPORT_ITERATIONPLOT):   end;
NOTE: Overwriting existing template/link: Em.IterationPlot
NOTE: STATGRAPH 'Em.IterationPlot' has been saved to: WORK.TEMPLAT
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sort data=EMWS1.Neural4_PLOTDS out=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   by _ITER_;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 36 observations read from the data set EMWS1.NEURAL4_PLOTDS.
NOTE: The data set WORK._TMPRPT_ITERDAT has 36 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   proc sgrender data=_tmprpt_iterdat
template='em.IterationPlot';
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: There were 36 observations read from the data set WORK._TMPRPT_ITERDAT.
NOTE: PROCEDURE SGRENDER used (Total process time):
      real time           0.56 seconds
      cpu time            0.28 seconds
 
 
MPRINT(EM_REPORT_ITERATIONPLOT):   title1;
MPRINT(EM_REPORT_ITERATIONPLOT):   title2;
MPRINT(EM_REPORT_ITERATIONPLOT):   title3;
MPRINT(EM_REPORT_ITERATIONPLOT):   proc delete data=_tmprpt_iterdat;
MPRINT(EM_REPORT_ITERATIONPLOT):   run;
 
NOTE: Deleting WORK._TMPRPT_ITERDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = HISTOGRAM WEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==15 : Viewtype = DATA HISTWEIGHT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==16 : Viewtype = LATTICE CLASSIFICATIONMANY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = PLOT ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.Neural4_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL4_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 40 observations and 35 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 35 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 35 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by target datarole;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_DAT.
NOTE: The data set WORK._TMP_EMRP has 40 observations and 35 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_EMRANK):   title3 "Model Assessment Scores where TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=gain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basegain;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestgain;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.75 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=liftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=baseliftc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestliftc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.71 seconds
      cpu time            0.32 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   proc sgpanel data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   panelby datarole;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=capc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=basecapc;
MPRINT(EM_REPORT_EMRANK):   series x=decile y=bestcapc;
MPRINT(EM_REPORT_EMRANK):   rowaxis grid;
MPRINT(EM_REPORT_EMRANK):   colaxis grid;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.73 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 17 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.Neural4_emreport(where=(id eq 19));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.NEURAL4_EMREPORT.
      WHERE id=19;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.Neural4_emreport(where=(id eq 19)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==19 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_SCOREDIST):   data _tmp_scoredist;
MPRINT(EM_REPORT_SCOREDIST):   set EMWS1.Neural4_EMSCOREDIST(where=(TARGET='bad'));
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set EMWS1.NEURAL4_EMSCOREDIST.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_SCOREDIST has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc contents data=_tmp_scoredist out=_tmp_content(keep=varnum
name) noprint;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 21 observations and 2 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   data _null_;
MPRINT(EM_REPORT_SCOREDIST):   set _tmp_content;
MPRINT(EM_REPORT_SCOREDIST):   name=strip(upcase(name));
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'MODELDESCRIPTION' then call symput('modeldescnum',
put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_LOOP_' then call symput('loopnum', put(varnum,6.));
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_WHERE_' then call symput('has_where', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGET_' then call symput('has_target', '1');
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMEAN_' then call symput('var_targetMean',name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMAX_' then call symput('var_targetMax', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq '_TARGETMIN_' then call symput('var_targetMin', name);
MPRINT(EM_REPORT_SCOREDIST):   if name eq 'PERCENTAGEOFEVENTS' then call symput('is_cat', '1');
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 21 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_SCOREDIST):   title2 "Node=Neural Network (4)";
MPRINT(EM_REPORT_SCOREDIST):   title3 "Score Distributions where TARGET='bad'";
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofevents / legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=percentageofnonevents / legendlabel="Non
Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.68 seconds
      cpu time            0.29 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SG4SCOREDIST):   proc sgpanel data=_tmpdat;
MPRINT(EM_REPORT_SG4SCOREDIST):   panelby datarole;
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofevents /
legendlabel="Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   series x=score y=cumulativepercentageofnonevents /
legendlabel="Non Events";
MPRINT(EM_REPORT_SG4SCOREDIST):   rowaxis grid label="Cumulative Percentage";
MPRINT(EM_REPORT_SG4SCOREDIST):   colaxis grid;
MPRINT(EM_REPORT_SG4SCOREDIST):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           0.68 seconds
      cpu time            0.31 seconds
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
 
MPRINT(EM_REPORT_SG4SCOREDIST):   quit;
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc delete data=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: Deleting WORK._TMPDAT (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_SCOREDIST):   title4;
MPRINT(EM_REPORT_SCOREDIST):   proc sort data=_tmp_scoredist out=_tmpdat;
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMP_SCOREDIST.
NOTE: The data set WORK._TMPDAT has 40 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_SCOREDIST):   title1;
MPRINT(EM_REPORT_SCOREDIST):   title2;
MPRINT(EM_REPORT_SCOREDIST):   title3;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Neural Network (4)";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Score Distributions";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Neural Network (4) Score Distributions";
MPRINT(EM_REPORT_SCOREDIST):  ;
MPRINT(EM_REPORT_SCOREDIST):   proc print data=_tmpdat noobs label contents='';
MPRINT(EM_REPORT_SCOREDIST):   by target datarole;
MPRINT(EM_REPORT_SCOREDIST):   var p_label numberofevents percentageofevents
percentageofnonevents cumulativepercentageofevents cumulativepercentageofnonevents ;
MPRINT(EM_REPORT_SCOREDIST):   run;
 
NOTE: There were 40 observations read from the data set WORK._TMPDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
NOTE: Node report data set (EMWS1.CNTRL_emreport) is not defined.
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_NODE_TEXT):   data _null_ ;
MPRINT(EM_REPORT_NODE_TEXT):   set EMWS1.EM_NODEID ;
MPRINT(EM_REPORT_NODE_TEXT):   where upcase(strip(nodeid)) eq upcase(strip("MdlComp")) ;
MPRINT(EM_REPORT_NODE_TEXT):   call symput("EM_REPORT_NODE_TEXT",strip(tranwrd(label,'"','')));
MPRINT(EM_REPORT_NODE_TEXT):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.EM_NODEID.
      WHERE UPCASE(STRIP(nodeid))='MDLCOMP';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_GETTRAINPATH):   proc display c=sashelp.emcore.pathscorecode.scl;
MPRINT(EM_GETTRAINPATH):   run;
 
31118      data _tmp_emrnp;
MPRINT(EM_GETTRAINPATH):   data _tmp_emrnp;
31119      length Parent $32 nodelabel $32 description $200 tooltype $32 component $32
31119    ! FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
31119    ! accumulatedScoreCode $1;
MPRINT(EM_GETTRAINPATH):   length Parent $32 nodelabel $32 description $200 tooltype $32
component $32 FlowScoreCodeFormat PublishScoreCode $16 PublishScoreCodeFormat $8
accumulatedScoreCode $1;
31120      nodelabel="Ids";
MPRINT(EM_GETTRAINPATH):   nodelabel="Ids";
31121      parent=" ";
MPRINT(EM_GETTRAINPATH):   parent=" ";
31122      description="Input Data Source";
MPRINT(EM_GETTRAINPATH):   description="Input Data Source";
31123      component="DataSource";
MPRINT(EM_GETTRAINPATH):   component="DataSource";
31124      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
31125      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31126      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
31127      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31128      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31129      output;
MPRINT(EM_GETTRAINPATH):   output;
31130      nodelabel="Part";
MPRINT(EM_GETTRAINPATH):   nodelabel="Part";
31131      parent="Ids";
MPRINT(EM_GETTRAINPATH):   parent="Ids";
31132      description="Partition Class";
MPRINT(EM_GETTRAINPATH):   description="Partition Class";
31133      component="Partition";
MPRINT(EM_GETTRAINPATH):   component="Partition";
31134      tooltype="SAMPLE";
MPRINT(EM_GETTRAINPATH):   tooltype="SAMPLE";
31135      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31136      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
31137      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31138      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31139      output;
MPRINT(EM_GETTRAINPATH):   output;
31140      nodelabel="Trans";
MPRINT(EM_GETTRAINPATH):   nodelabel="Trans";
31141      parent="Part";
MPRINT(EM_GETTRAINPATH):   parent="Part";
31142      description="Transform";
MPRINT(EM_GETTRAINPATH):   description="Transform";
31143      component="Transform";
MPRINT(EM_GETTRAINPATH):   component="Transform";
31144      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
31145      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31146      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
31147      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31148      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31149      output;
MPRINT(EM_GETTRAINPATH):   output;
31150      nodelabel="BINNING";
MPRINT(EM_GETTRAINPATH):   nodelabel="BINNING";
31151      parent="Trans";
MPRINT(EM_GETTRAINPATH):   parent="Trans";
31152      description="Extension Class";
MPRINT(EM_GETTRAINPATH):   description="Extension Class";
31153      component="Binning";
MPRINT(EM_GETTRAINPATH):   component="Binning";
31154      tooltype="MODIFY";
MPRINT(EM_GETTRAINPATH):   tooltype="MODIFY";
31155      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31156      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
31157      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31158      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31159      output;
MPRINT(EM_GETTRAINPATH):   output;
31160      nodelabel="Neural4";
MPRINT(EM_GETTRAINPATH):   nodelabel="Neural4";
31161      parent="BINNING";
MPRINT(EM_GETTRAINPATH):   parent="BINNING";
31162      description="Neural";
MPRINT(EM_GETTRAINPATH):   description="Neural";
31163      component="NeuralNetwork";
MPRINT(EM_GETTRAINPATH):   component="NeuralNetwork";
31164      tooltype="MODEL";
MPRINT(EM_GETTRAINPATH):   tooltype="MODEL";
31165      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31166      PublishScoreCode="EMPUBLISHSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMPUBLISHSCORECODE";
31167      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31168      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31169      output;
MPRINT(EM_GETTRAINPATH):   output;
31170      nodelabel="MdlComp";
MPRINT(EM_GETTRAINPATH):   nodelabel="MdlComp";
31171      parent="Neural4";
MPRINT(EM_GETTRAINPATH):   parent="Neural4";
31172      description="Model Compare Class";
MPRINT(EM_GETTRAINPATH):   description="Model Compare Class";
31173      component="ModelCompare";
MPRINT(EM_GETTRAINPATH):   component="ModelCompare";
31174      tooltype="ASSESS";
MPRINT(EM_GETTRAINPATH):   tooltype="ASSESS";
31175      FlowScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   FlowScoreCodeFormat="DATASTEP";
31176      PublishScoreCode="EMFLOWSCORECODE";
MPRINT(EM_GETTRAINPATH):   PublishScoreCode="EMFLOWSCORECODE";
31177      PublishScoreCodeFormat="DATASTEP";
MPRINT(EM_GETTRAINPATH):   PublishScoreCodeFormat="DATASTEP";
31178      accumulatedScoreCode= "N";
MPRINT(EM_GETTRAINPATH):   accumulatedScoreCode= "N";
31179      output;
MPRINT(EM_GETTRAINPATH):   output;
31180      run;
MPRINT(EM_GETTRAINPATH):   run;
 
NOTE: The data set WORK._TMP_EMRNP has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_GETTRAINPATH):
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set _tmp_emrnp end=eof ;
MPRINT(EM_REPORT_NODE):   length path $1000 ;
MPRINT(EM_REPORT_NODE):   retain path ' ';
MPRINT(EM_REPORT_NODE):   if _n_ eq 1 then path = strip(nodelabel) ;
MPRINT(EM_REPORT_NODE):   else path = strip(path) !! " => " !! strip(nodelabel);
MPRINT(EM_REPORT_NODE):   if eof then call symput('print_path', strip(path));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMP_EMRNP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(*) into :EM_REPORT_PREDECESSORS_COUNT from
EMWS1.EM_DGRAPH where upcase(strip(to)) eq upcase(strip("MdlComp"));
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   ods PDF startpage=now;
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="SAS Enterprise Miner Report";
MPRINT(EM_REPORT_NODE):   ods PDF text=" ";
MPRINT(EM_REPORT_NODE):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_NODE):   ods PDF text="Summary";
MPRINT(EM_REPORT_NODE):   data _null_ ;
MPRINT(EM_REPORT_NODE):   file print;
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   put "Node id = MdlComp";
MPRINT(EM_REPORT_NODE):   put "Node label = Model Comparison";
MPRINT(EM_REPORT_NODE):   put "Meta path = Ids => Part => Trans => BINNING => Neural4 =>
MdlComp";
MPRINT(EM_REPORT_NODE):   put "Notes =";
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 4 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
Projects\Project_3\Workspaces\EMWS1\MdlComp\EMNOTES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   length string $1000;
MPRINT(EM_REPORT_NODE):   file PRINT;
MPRINT(EM_REPORT_NODE):   fid = fopen('x');
MPRINT(EM_REPORT_NODE):   do while (^fread(fid));
MPRINT(EM_REPORT_NODE):   rc= fget(fid, string, frlen(fid));
MPRINT(EM_REPORT_NODE):   string = tranwrd(string, "'", "''");
MPRINT(EM_REPORT_NODE):   if string eq '' then string = ' ';
MPRINT(EM_REPORT_NODE):   put string;
MPRINT(EM_REPORT_NODE):   end;
MPRINT(EM_REPORT_NODE):   fid = fclose(fid);
MPRINT(EM_REPORT_NODE):   put " ";
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: 0 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EM_REPORT_PROPERTIES):   proc display cat=sashelp.emutil.prop2Ds.scl;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
31181      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
31182      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
31183      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
31183    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))" DEFAULT =
31183    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_default_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value" DEFAULT = "Default";
31184      Name = 'NumberOfReportedLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberOfReportedLevels';
31185      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
31186      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31187      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31188      Name = 'NormalizeReportingVariables';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NormalizeReportingVariables';
31189      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
31190      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31191      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31192      Name = 'DecileBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'DecileBin';
31193      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
31194      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31195      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31196      Name = 'LiftEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'LiftEpsilon';
31197      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
31198      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31199      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31200      Name = 'ProfitEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ProfitEpsilon';
31201      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
31202      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31203      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31204      Name = 'RoiEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RoiEpsilon';
31205      Value = "%nrbquote(1E-6)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "1E-6";
31206      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31207      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31208      Name = 'ScoreDistBin';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ScoreDistBin';
31209      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
31210      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31211      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31212      Name = 'RocChart';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocChart';
31213      Value = "%nrbquote(Y)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Y";
31214      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31215      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31216      Name = 'RocEpsilon';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RocEpsilon';
31217      Value = "%nrbquote(0.01)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "0.01";
31218      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31219      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31220      Name = 'AssessAllTargetLevels';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'AssessAllTargetLevels';
31221      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
31222      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31223      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31224      Name = 'SelectionData';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionData';
31225      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31226      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31227      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31228      Name = 'HPCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'HPCriteria';
31229      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31230      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31231      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31232      Name = 'SelectionTable';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionTable';
31233      Value = "%nrbquote(TRAIN)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "TRAIN";
31234      Default = "%nrbquote(TABLE)";
MPRINT(EM_REPORT_PROPERTIES):   Default = "TABLE";
31235      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31236      Name = 'SelectionCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionCriteria';
31237      Value = "%nrbquote(DEFAULT)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "DEFAULT";
31238      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31239      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31240      Name = 'SelectionDepth';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'SelectionDepth';
31241      Value = "%nrbquote(10)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "10";
31242      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31243      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31244      Name = 'NumberofBins';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'NumberofBins';
31245      Value = "%nrbquote(20)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "20";
31246      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31247      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31248      Name = 'RecomputeAssess';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'RecomputeAssess';
31249      Value = "%nrbquote(N)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "N";
31250      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31251      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31252      Name = 'TargetName';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetName';
31253      Value = "%nrbquote(bad)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "bad";
31254      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31255      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31256      Name = 'ModelId';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelId';
31257      Value = "%nrbquote(Neural4)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural4";
31258      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31259      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31260      Name = 'ModelDescription';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelDescription';
31261      Value = "%nrbquote(Neural Network (4))";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Neural Network (4)";
31262      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31263      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31264      Name = 'ModelCriteria';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'ModelCriteria';
31265      Value = "%nrbquote(Valid: Misclassification Rate)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Valid: Misclassification Rate";
31266      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31267      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31268      Name = 'StatisticUsed';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'StatisticUsed';
31269      Value = "%nrbquote(_VMISC_)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "_VMISC_";
31270      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31271      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31272      Name = 'TargetLabel';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'TargetLabel';
31273      Value = "%nrbquote(Default or seriously delinquent)";
MPRINT(EM_REPORT_PROPERTIES):   Value = "Default or seriously delinquent";
31274      Default = "%nrbquote()";
MPRINT(EM_REPORT_PROPERTIES):   Default = "";
31275      output;
MPRINT(EM_REPORT_PROPERTIES):   output;
31276      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31277      proc sort data=properties;
MPRINT(EM_REPORT_PROPERTIES):   proc sort data=properties;
31278      by Name;
MPRINT(EM_REPORT_PROPERTIES):   by Name;
31279      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 23 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31280      data temp;
MPRINT(EM_REPORT_PROPERTIES):   data temp;
31281      length Name $32 Value $200 Default $200;
MPRINT(EM_REPORT_PROPERTIES):   length Name $32 Value $200 Default $200;
31282      label NAME = "%sysfunc(sasmsg(sashelp.dmine, rpt_property_vlabel, NOQUOTE))" VALUE =
31282    ! "%sysfunc(sasmsg(sashelp.dmine, rpt_value_vlabel,    NOQUOTE))";
MPRINT(EM_REPORT_PROPERTIES):   label NAME = "Property" VALUE = "Value";
31283      Name = 'Component';
MPRINT(EM_REPORT_PROPERTIES):   Name = 'Component';
31284      Value = "ModelCompare";
MPRINT(EM_REPORT_PROPERTIES):   Value = "ModelCompare";
31285      Default="";
MPRINT(EM_REPORT_PROPERTIES):   Default="";
31286      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: The data set WORK.TEMP has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31287      data properties;
MPRINT(EM_REPORT_PROPERTIES):   data properties;
31288      set temp properties;
MPRINT(EM_REPORT_PROPERTIES):   set temp properties;
31289      run;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMP.
NOTE: There were 23 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK.PROPERTIES has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Properties";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Properties";
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc contents data=work.properties
out=_tmpms_content(keep=name) noprint;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: The data set WORK._TMPMS_CONTENT has 3 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "NAME" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "VALUE" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _null_;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set _tmpms_content;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   name=strip(upcase(name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if name eq "DEFAULT" then call symput('vars2',catx('
',symget('vars2'),name));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPMS_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_dat1(rename=( NAME=NAME1 VALUE=VALUE1
DEFAULT=DEFAULT1)) _tmpms_dat2(rename=( NAME=NAME2 VALUE=VALUE2 DEFAULT=DEFAULT2))
_tmpms_dat3(rename=( NAME=NAME3 VALUE=VALUE3 DEFAULT=DEFAULT3));
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   set work.properties;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   keep NAME VALUE DEFAULT numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 0 and _n_ le 8 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(1-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 8 and _n_ le 16 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(2-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   if _n_ gt 16 and _n_ le 24 then do;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   numrow = _n_-8*(3-1);
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   output _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   end;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 24 observations read from the data set WORK.PROPERTIES.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat1;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: The data set WORK._TMPMS_DAT1 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat2;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: The data set WORK._TMPMS_DAT2 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc sort data=_tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_DAT3 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   data _tmpms_alldat;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   merge _tmpms_dat1 _tmpms_dat2 _tmpms_dat3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   by numrow;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT1.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT2.
NOTE: There were 8 observations read from the data set WORK._TMPMS_DAT3.
NOTE: The data set WORK._TMPMS_ALLDAT has 8 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc print data=_tmpms_alldat noobs label contents='';
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   var NAME1 VALUE1 DEFAULT1 NAME2 VALUE2 DEFAULT2 NAME3
VALUE3 DEFAULT3;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPMS_ALLDAT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   delete _tmpms_:;
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   run;
 
NOTE: Deleting WORK._TMPMS_ALLDAT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_CONTENT (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT1 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT2 (memtype=DATA).
NOTE: Deleting WORK._TMPMS_DAT3 (memtype=DATA).
MPRINT(EM_REPORT_MAKEMULTICOLUMN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):  ;
MPRINT(EM_REPORT_PROPERTIES):   proc delete data=work.properties;
MPRINT(EM_REPORT_PROPERTIES):   run;
 
NOTE: Deleting WORK.PROPERTIES (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_PROPERTIES):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :tmp_numvar from EMWS1.MdlComp_EMTRAINVARIABLE;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdv(drop=use newuse count) ;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_EMTRAINVARIABLE end=eof;
MPRINT(EM_REPORT_VARS):   length use newuse $1;
MPRINT(EM_REPORT_VARS):   label name = "Name" level = "Level" role = "Role" length = "Length" ;
MPRINT(EM_REPORT_VARS):   if use eq "" then use="Y";
MPRINT(EM_REPORT_VARS):   newuse=use;
MPRINT(EM_REPORT_VARS):   if use eq "D" then do;
MPRINT(EM_REPORT_VARS):   if role="REJECT" then newuse="N";
MPRINT(EM_REPORT_VARS):   else if role="INPUT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="CROSSID" then newuse="Y";
MPRINT(EM_REPORT_VARS):   else if role="TEXT" then newuse="Y";
MPRINT(EM_REPORT_VARS):   end ;
MPRINT(EM_REPORT_VARS):   if newuse eq "Y" then do ;
MPRINT(EM_REPORT_VARS):   count+1 ;
MPRINT(EM_REPORT_VARS):   output;
MPRINT(EM_REPORT_VARS):   end;
MPRINT(EM_REPORT_VARS):   if eof then call symput("varcount",put(count,6.)) ;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Variable length is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.MDLCOMP_EMTRAINVARIABLE.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS):   by name;
MPRINT(EM_REPORT_VARS):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdv;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDV has 1 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pds(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdv end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDV.
NOTE: The data set WORK._TMPVL_PDS has 1 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Variable Summary";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Variable Summary";
MPRINT(EM_REPORT_VARS):  ;
MPRINT(EM_REPORT_VARS):   proc print data=_tmpvl_pds noobs label contents='';
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 1 observations read from the data set WORK._TMPVL_PDS.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   data _tmpvl_pdvx;
MPRINT(EM_REPORT_VARS):   set EMWS1.MdlComp_CMETA_TRAIN end=eof ;
MPRINT(EM_REPORT_VARS):   where upcase(creator) eq "MdlComp" ;
MPRINT(EM_REPORT_VARS):   if eof then call symput('pdvxnum',put(_N_,6.));
MPRINT(EM_REPORT_VARS):   label name = "Name" label = "Label" role = "Role" level = "Level" type
= "Type" length = "Length";
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_CMETA_TRAIN.
      WHERE UPCASE(creator)='MdlComp';
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   proc sort data=_tmpvl_pdvx;
MPRINT(EM_REPORT_VARS_FLIP):   by descending role level name;
MPRINT(EM_REPORT_VARS_FLIP):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK._TMPVL_PDVX has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_VARS_FLIP):   data _tmpvl_pdvxp(keep=role level count names ) ;
MPRINT(EM_REPORT_VARS_FLIP):   length role level $16 ;
MPRINT(EM_REPORT_VARS_FLIP):   set _tmpvl_pdvx end=eof ;
WARNING: Length of character variable role has already been set.
         Use the LENGTH statement as the very first statement in the DATA STEP to declare the
         length of a character variable.
MPRINT(EM_REPORT_VARS_FLIP):   length xrole role $32 count 8 names $200 ;
MPRINT(EM_REPORT_VARS_FLIP):   krole= strip(role) !!' * ' !! strip(level) ;
MPRINT(EM_REPORT_VARS_FLIP):   retain xrole ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   retain names ;
MPRINT(EM_REPORT_VARS_FLIP):   if _n_ eq 1 then names=name ;
MPRINT(EM_REPORT_VARS_FLIP):   retain count 0 ending 0 ;
MPRINT(EM_REPORT_VARS_FLIP):   count+1 ;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if xrole ne krole then do ;
MPRINT(EM_REPORT_VARS_FLIP):   count=count-1 ;
MPRINT(EM_REPORT_VARS_FLIP):   put _n_ "OUTPUT;" ;
MPRINT(EM_REPORT_VARS_FLIP):   output ;
MPRINT(EM_REPORT_VARS_FLIP):   xrole=krole ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   count=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=0 ;
MPRINT(EM_REPORT_VARS_FLIP):   end ;
MPRINT(EM_REPORT_VARS_FLIP):   else if _n_ gt 1 then do ;
MPRINT(EM_REPORT_VARS_FLIP):   if length(names) + length(name) lt 196 then names= strip(names)
!! ' ' !! strip(name) ;
MPRINT(EM_REPORT_VARS_FLIP):   else if not ending then do ;
MPRINT(EM_REPORT_VARS_FLIP):   names= strip(names) !! ' ...' ;
MPRINT(EM_REPORT_VARS_FLIP):   ending=1 ;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   end;
MPRINT(EM_REPORT_VARS_FLIP):   role=scan(xrole,1,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   level=scan(xrole,2,'*') ;
MPRINT(EM_REPORT_VARS_FLIP):   if eof and count gt 0 then output ;
MPRINT(EM_REPORT_VARS_FLIP):   label count = "Frequency Count " names = "Name" level = "Level"
role = "Role";
MPRINT(EM_REPORT_VARS_FLIP):   run ;
 
NOTE: There were 0 observations read from the data set WORK._TMPVL_PDVX.
NOTE: The data set WORK._TMPVL_PDVXP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_VARS):   ;
MPRINT(EM_REPORT_VARS):   proc sql noprint;
MPRINT(EM_REPORT_VARS):   select count(*) into :nobs from _tmpvl_pdvxp;
MPRINT(EM_REPORT_VARS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_VARS):   proc datasets lib=work nolist;
MPRINT(EM_REPORT_VARS):   delete _tmpvl_:;
MPRINT(EM_REPORT_VARS):   run;
 
NOTE: Deleting WORK._TMPVL_PDS (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDV (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVX (memtype=DATA).
NOTE: Deleting WORK._TMPVL_PDVXP (memtype=DATA).
MPRINT(EM_REPORT_VARS):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_REPORT_NODE):   ;
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select max(ID) into: numitems from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select count(distinct key) into :allnumkeys from
EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   select distinct key into :allnamekey1-:
MPRINT(LEFT):  allnamekey18
MPRINT(EM_REPORT_NODE):   from EMWS1.MdlComp_emreport;
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 1));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=1;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==1 : Viewtype = PROPERTIES SETTINGS
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 2));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=2;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==2 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 3));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=3;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==3 : Viewtype = DATA VARIABLES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 4));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=4;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==4 : Viewtype = TEXT TOOLLOG
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 5));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=5;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==5 : Viewtype = TEXT TOOLOUTPUT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 6));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=6;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==6 : Viewtype = TEXT TOOLTRAINCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 7));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=7;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==7 : Viewtype = TEXT NOTES
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 8));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=8;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==8 : Viewtype = TEXT FLOWCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 9));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=9;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==9 : Viewtype = TEXT SASCODE
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 10));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=10;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==10 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 11));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=11;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==11 : Viewtype =
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 12));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=12;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==12 : Viewtype = DATA FITSTAT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_DATA):   data _null_ ;
MPRINT(EM_REPORT_DATA):   set EMWS1.MdlComp_EMOUTFIT (obs=2) end=eof ;
MPRINT(EM_REPORT_DATA):   if eof then do ;
MPRINT(EM_REPORT_DATA):   call symput("_misc_" , strip(put(_misc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_vmisc_" , strip(put(_vmisc_,best.))) ;
MPRINT(EM_REPORT_DATA):   call symput("_aur_" , strip(put(_aur_, best.)));
MPRINT(EM_REPORT_DATA):   call symput("_gini_" , strip(put(_gini_, best.)));
MPRINT(EM_REPORT_DATA):   end;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
WARNING: Argument 3 to macro function %SUBSTR is out of range.
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text=" ";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Node=Model Comparison";
MPRINT(EM_REPORT_TABLETEXT):   ods PDF text="Fit Statistics Table";
MPRINT(EM_REPORT_TABLETEXT):   ods proclabel = "Node=Model Comparison Fit Statistics Table";
MPRINT(EM_REPORT_DATA):  ;
MPRINT(EM_REPORT_DATA):   proc print data=EMWS1.MdlComp_EMOUTFIT(obs=100) noobs label
contents='';
MPRINT(EM_REPORT_DATA):   id USE PARENT MODEL MODELDESCRIPTION TARGET TARGETLABEL _CRITERION_ ;
MPRINT(EM_REPORT_DATA):   var _ASE_ _MISC_ KS _VASE_ _VMISC_ VKS ;
MPRINT(EM_REPORT_DATA):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMOUTFIT.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 13));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 6 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=13;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==13 : Viewtype = DATA COMPAREFIT
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 14));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=14;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==14 : Viewtype = LATTICE CLASSIFICATION
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct MODELDESCRIPTION) into :numx from
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numy from
EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "Classification Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='bad' and _TYPE_='PREDICTION'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel
data=EMWS1.MdlComp_EMCLASSIFICATION(where=(TARGET='bad' and _TYPE_='PREDICTION'));
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE MODELDESCRIPTION / columns=3 rows=4
uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   vbar FROM / response=PERCENT group=CORRECTTEXT ;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin ;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.28 seconds
      cpu time            0.40 seconds
 
NOTE: There were 48 observations read from the data set EMWS1.MDLCOMP_EMCLASSIFICATION.
      WHERE (TARGET='bad') and (_TYPE_='PREDICTION');
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 15));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=15;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 15)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==15 : Viewtype = LATTICE ASSESSRANKOVERLAY
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_EMRANK):   data _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   set EMWS1.MdlComp_EMRANK(where=(TARGET='bad'));
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 240 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE TARGET='bad';
NOTE: The data set WORK._TMP_DAT has 240 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc contents data=_tmp_dat out=_tmp_content(keep=name) noprint;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: The data set WORK._TMP_CONTENT has 38 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   data _null_;
MPRINT(EM_REPORT_EMRANK):   set _tmp_content;
MPRINT(EM_REPORT_EMRANK):   name=strip(upcase(name));
MPRINT(EM_REPORT_EMRANK):   format _tmp_list $500.;
MPRINT(EM_REPORT_EMRANK):   _tmp_list = symget('varList');
MPRINT(EM_REPORT_EMRANK):   do k = 1 to 7;
MPRINT(EM_REPORT_EMRANK):   if name eq scan(_tmp_list,k,' ') then call
symput(cats('var_',name),name);
MPRINT(EM_REPORT_EMRANK):   end;
MPRINT(EM_REPORT_EMRANK):   if name eq '_LOOP_' then call symput('has_loop','1');
MPRINT(EM_REPORT_EMRANK):   if name eq '_WHERE_' then call symput('has_where','1');
MPRINT(EM_REPORT_EMRANK):   if name eq 'GAIN' then call symput('is_cat','1');
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 38 observations read from the data set WORK._TMP_CONTENT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sql noprint;
MPRINT(EM_REPORT_EMRANK):   select count(distinct datarole) into :ndataroles from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   select distinct datarole into :drole1-:
MPRINT(LEFT):  drole2
MPRINT(EM_REPORT_EMRANK):   from _tmp_dat;
MPRINT(EM_REPORT_EMRANK):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat(where=(datarole eq "TRAIN")) out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by model decile;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 120 observations read from the data set WORK._TMP_DAT.
      WHERE datarole='TRAIN';
NOTE: The data set WORK._TMP_EMRP has 120 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_EMRANK):   title3 "Multiple Model Assessment Scores where DataRole=TRAIN";
MPRINT(EM_REPORT_EMRANK):   title4 "TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgscatter data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   plot (GAIN LIFTC CAPC _MEANP_ ) * decile / group=model join=()
markerattrs=(size=0) grid ;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGSCATTER used (Total process time):
      real time           0.71 seconds
      cpu time            0.20 seconds
 
NOTE: There were 120 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_EMRANK):   title4;
MPRINT(EM_REPORT_EMRANK):   proc sort data=_tmp_dat(where=(datarole eq "VALIDATE"))
out=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   by model decile;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: There were 120 observations read from the data set WORK._TMP_DAT.
      WHERE datarole='VALIDATE';
NOTE: The data set WORK._TMP_EMRP has 120 observations and 38 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_EMRANK):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_EMRANK):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_EMRANK):   title3 "Multiple Model Assessment Scores where DataRole=VALIDATE";
MPRINT(EM_REPORT_EMRANK):   title4 "TARGET='bad'";
MPRINT(EM_REPORT_EMRANK):   proc sgscatter data=_tmp_emrp;
MPRINT(EM_REPORT_EMRANK):   plot (GAIN LIFTC CAPC _MEANP_ ) * decile / group=model join=()
markerattrs=(size=0) grid ;
MPRINT(EM_REPORT_EMRANK):   run;
 
NOTE: PROCEDURE SGSCATTER used (Total process time):
      real time           0.73 seconds
      cpu time            0.25 seconds
 
NOTE: There were 120 observations read from the data set WORK._TMP_EMRP.
 
MPRINT(EM_REPORT_EMRANK):   quit;
MPRINT(EM_REPORT_EMRANK):   title1;
MPRINT(EM_REPORT_EMRANK):   title2;
MPRINT(EM_REPORT_EMRANK):   title3;
MPRINT(EM_REPORT_EMRANK):   title4;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 16));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 15 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=16;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 16)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
==16 : Viewtype = LATTICE ASSESSRANKGRID
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 17));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 14 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=17;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 17)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==17 : Viewtype = LATTICE ASSESSSCOREDIST
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   set EMWS1.MdlComp_emreport(where=(id eq 18));
MPRINT(EM_REPORT_NODE):   call symput("EM_REPORT_KEY_"!!strip(upcase(key)), strip(value));
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: There were 13 observations read from the data set EMWS1.MDLCOMP_EMREPORT.
      WHERE id=18;
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):   proc sql noprint;
MPRINT(EM_REPORT_NODE):   select distinct value into :EM_REPORT_KEY_Y separated by ' ' from
EMWS1.MdlComp_emreport(where=(id eq 18)) where upcase(key) eq "Y";
MPRINT(EM_REPORT_NODE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
==18 : Viewtype = LATTICE ASSESSROC
MPRINT(EM_REPORT_NODE):   data _null_;
MPRINT(EM_REPORT_NODE):   format type $100. desc $200.;
MPRINT(EM_REPORT_NODE):   type = strip(upcase(symget('EM_REPORT_KEY_VIEWTYPE')));
MPRINT(EM_REPORT_NODE):   desc = strip(upcase(symget('EM_REPORT_KEY_DESCRIPTION')));
MPRINT(EM_REPORT_NODE):   if (type in ('SCATTER') and desc in ('STATPLOT' 'RULEPATHITEM'
'RULEPATHSTAT' 'CONFPLOT' 'INPUTMEAN')) or (type in ('PLOT') and desc in ('SEASON' 'TREND'
'CORRSTAT' 'DECOMP')) or (type in ('HISTOGRAM') and desc in ('WEIGHT' 'MAP' 'ESTIMATEGRID'
'CROSSCCFMAP' 'CROSSCCFNORMMAP')) or (type in ('BAR') and desc in ('VIP' 'ABSESTIMATE'
'ABSSTDESTIMATE' 'PRINCOEFFPLOT')) or (type in ('LATTICE') and desc in ('ESTIMATEGRID'
'ASSESSRANKGRID' 'CORRPLOT')) then call symput('item_skip_code','2');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('CLUSCORR' 'VARCORR')) or (type
in ('BAR') and desc in ('ESTIMATE' 'CORRSTRUCT' 'FITSTATPLOT')) or (type in ('LATTICE') and desc
in ('CHIPLOT' 'WORTH')) then call symput('item_skip_code','3');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','4');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSRANKOVERLAY')) then call
symput('item_skip_code','5');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('EVENTPLOT')) then call
symput('item_skip_code','6');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSSTAT')) then call
symput('EM_REPORT_KEY_VIEWTYPE','DATA');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('ASSESSSCOREDIST')) then call
symput('item_skip_code','7');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('SCOREDIST')) then call
symput('item_skip_code','8');
MPRINT(EM_REPORT_NODE):   if (type in ('LATTICE') and desc in ('CLASSIFICATIONMANY')) then call
symput('item_skip_code','9');
MPRINT(EM_REPORT_NODE):   if (type in ('PLOT') and desc in ('HPDMASSESS')) then call
symput('item_skip_code','10');
MPRINT(EM_REPORT_NODE):   if (type in ('HISTOGRAM') and desc in ('HPWEIGHTS' 'BELIEFS BY VALUE'
'TSDISTANCEMAP')) then call symput('item_skip_code','11');
MPRINT(EM_REPORT_NODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=9in;
MPRINT(EM_REPORT_LATTICE):   proc sql noprint;
MPRINT(EM_REPORT_LATTICE):   select count(distinct DATAROLE) into :numx from
EMWS1.MdlComp_EMROC(where=(TARGET='bad' and EVENT='1'));
MPRINT(EM_REPORT_LATTICE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   proc sort data=EMWS1.MdlComp_EMROC(where=(TARGET='bad' and
EVENT='1')) out=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   by DATAROLE ;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: There were 1193 observations read from the data set EMWS1.MDLCOMP_EMROC.
      WHERE (TARGET='bad') and (EVENT='1');
NOTE: The data set WORK._TMP_PDL has 1193 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_LATTICE):   title1 "SAS Enterprise Miner Report";
MPRINT(EM_REPORT_LATTICE):   title2 "Node=Model Comparison";
MPRINT(EM_REPORT_LATTICE):   title3 "ROC Chart";
MPRINT(EM_REPORT_LATTICE):   title4 "TARGET='bad' and EVENT='1'";
MPRINT(EM_REPORT_LATTICE):   proc sgpanel data=_tmp_pdl;
MPRINT(EM_REPORT_LATTICE):   panelby DATAROLE / uniscale=column ;
MPRINT(EM_REPORT_LATTICE):   series x=ONEMINUSSPECIFICITY y=SENSITIVITY / group=MODELDESCRIPTION
;
MPRINT(EM_REPORT_LATTICE):   colaxis grid fitpolicy=rotatethin;
MPRINT(EM_REPORT_LATTICE):   rowaxis grid;
MPRINT(EM_REPORT_LATTICE):   run;
 
NOTE: PROCEDURE SGPANEL used (Total process time):
      real time           1.62 seconds
      cpu time            0.45 seconds
 
NOTE: There were 1193 observations read from the data set WORK._TMP_PDL.
 
MPRINT(EM_REPORT_LATTICE):   quit;
MPRINT(EM_REPORT_NODE):  ;
MPRINT(EM_REPORT_NODE):   ods graphics / height=4.5in;
MPRINT(EM_REPORT_NODE):   title1;
MPRINT(EM_REPORT_NODE):   title2;
MPRINT(EM_REPORT_NODE):   title3;
MPRINT(EM_REPORT_NODE):   title4;
MPRINT(EM_REPORT_NODE):   title5;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):  ;
MPRINT(EM_REPORT_CREATE):   data _NULL_ ;
MPRINT(EM_REPORT_CREATE):   file print;
MPRINT(EM_REPORT_CREATE):   put "End of Report" ;
MPRINT(EM_REPORT_CREATE):   run;
 
NOTE: 1 lines were written to file PRINT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_CREATE):   title1;
MPRINT(EM_REPORT_CREATE):   title2;
MPRINT(EM_REPORT_CREATE):   title3 ;
MPRINT(EM_REPORT_CREATE):   ods graphics / reset=height;
MPRINT(EM_REPORT_CREATE):   ods listing;
MPRINT(EM_REPORT_CREATE):   ods PDF close;
NOTE: ODS PDF printed 52 pages to C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _
      Projects\Project_3\Workspaces\EMWS1\Report\REPORT.pdf.
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT_RESULTS):   data _null_ ;
MPRINT(EM_REPORT_RESULTS):   call symput('report_date', strip(put(date(), NLDATE.)));
MPRINT(EM_REPORT_RESULTS):   call symput('report_time', strip(put(datetime(), NLTIME.)));
MPRINT(EM_REPORT_RESULTS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT_RESULTS):   data _null_;
MPRINT(EM_REPORT_RESULTS):   file print ;
MPRINT(EM_REPORT_RESULTS):   put "User       = sakerb01" ;
MPRINT(EM_REPORT_RESULTS):   put "Date       = 16:38:22  November 02" ;
MPRINT(EM_REPORT_RESULTS):   put "Project    = Project_3 " ;
MPRINT(EM_REPORT_RESULTS):   put "Diagram    = Diagram_3" / ;
MPRINT(EM_REPORT_RESULTS):   put "Start Node = Report";
MPRINT(EM_REPORT_RESULTS):   put "Node label = Model Comparison" ;
MPRINT(EM_REPORT_RESULTS):   put "Nodes      = PATH" ;
MPRINT(EM_REPORT_RESULTS):   put "Showall    = N" / ;
MPRINT(EM_REPORT_RESULTS):   put "Format     = PDF" ;
MPRINT(EM_REPORT_RESULTS):   put "Graphics   = GIF" ;
MPRINT(EM_REPORT_RESULTS):   put "Style      = LISTING" / ;
MPRINT(EM_REPORT_RESULTS):   run ;
 
NOTE: 11 lines were written to file PRINT.
NOTE: The DATA step printed page 2.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "REPORT";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "FILEVIEWER";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08145078601383;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_REPORT_RESULTS):  ;
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31290      *------------------------------------------------------------*;
31291      * End TRAIN: Report;
31292      *------------------------------------------------------------*;
31293
 
31294      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31295      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
31296      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31297      ;
MPRINT(EM_DIAGRAM):   ;
31298      ;
MPRINT(EM_DIAGRAM):   ;
31299      ;
MPRINT(EM_DIAGRAM):   ;
31300      ;
MPRINT(EM_DIAGRAM):   ;
31301      quit;
MPRINT(EM_DIAGRAM):   quit;
31302      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31303      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
31304      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31305      /*; *"; *'; */
31306      ;
MPRINT(EM_DIAGRAM):   ;
31307      run;
MPRINT(EM_DIAGRAM):   run;
31308      quit;
MPRINT(EM_DIAGRAM):   quit;
31309      /* Reset EM Options */
31310      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
31311      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
31312      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
31313      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
31314      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
31315      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 02, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:38:25" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 02, 2015
Time:                16:38:25
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VKB0OK "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VKB0OK new;
MPRINT(EM_DIAGRAM):   run;
31417      %let EMEXCEPTIONSTRING=;
31418      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31419      * SCORE: Report;
MPRINT(EM_DIAGRAM):   * SCORE: Report;
31420      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31421      %let EM_ACTION = SCORE;
31422      %let syscc = 0;
31423      %macro main;
31424
31425        filename temp catalog 'sashelp.emutil.reporter_macros.source';
31426        %include temp;
31427        filename temp;
31428
31429        %setProperties;
31430
31431        %if %upcase(&EM_ACTION) = CREATE %then %do;
31432          filename temp catalog 'sashelp.emutil.reporter_create.source';
31433          %include temp;
31434          filename temp;
31435
31436          %create;
31437        %end;
31438
31439         %else
31440         %if %upcase(&EM_ACTION) = TRAIN %then %do;
31441
31442             filename temp catalog 'sashelp.emutil.reporter_train.source';
31443             %include temp;
31444             filename temp;
31445             %train;
31446         %end;
31447
31448         %doendm:
31449      %mend main;
31450
31451      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
31454     +%macro SetProperties;
31456     +     /* reporting options */
31457     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
31458     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
31459     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
31460     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
31462     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
31463     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
31464     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
31465     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
31466     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
31467     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
31468     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
31470     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
31472     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
31473     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
31474     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
31475     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
31477     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31478      *------------------------------------------------------------*;
31479      * End SCORE: Report;
31480      *------------------------------------------------------------*;
31481
 
31482      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31483      * Report: Scoring DATA data;
MPRINT(EM_DIAGRAM):   * Report: Scoring DATA data;
31484      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31485      data EMWS1.Report_TRAIN
31486      / view=EMWS1.Report_TRAIN
31487      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_TRAIN / view=EMWS1.Report_TRAIN ;
31488      set EMWS1.MdlComp_TRAIN
31489      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_TRAIN ;
31490      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.REPORT_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.43 seconds
      cpu time            0.43 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.46 seconds
      cpu time            0.46 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
31491      quit;
 
31492      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31493      * Report: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   * Report: Scoring VALIDATE data;
31494      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31495      data EMWS1.Report_VALIDATE
31496      / view=EMWS1.Report_VALIDATE
31497      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_VALIDATE / view=EMWS1.Report_VALIDATE ;
31498      set EMWS1.MdlComp_VALIDATE
31499      ;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_VALIDATE ;
31500      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file EMWS1.REPORT_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.29 seconds
      cpu time            0.29 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
31501      quit;
 
31503      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
31504      * Report: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Report: Computing metadata for TRAIN data;
31505      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REPORT_TRAIN.VIEW used (Total process time):
      real time           0.36 seconds
      cpu time            0.35 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Report_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Report_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Report_TRAIN out=WORK.M2RSL8G_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RSL8G_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RSL8G_(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2RSL8G_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2RSL8G_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M00H1PAR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0044F0P(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   set WORK.M00H1PAR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.MdlComp_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MdlComp_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Report_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Report";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPORT_TRAIN.VIEW used (Total process time):
      real time           0.32 seconds
      cpu time            0.32 seconds
 
NOTE: View EMWS1.REPORT_VALIDATE.VIEW used (Total process time):
      real time           0.31 seconds
      cpu time            0.31 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 02, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "16:38:28" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 02, 2015
Time:                16:38:28
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1MPYIJO "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Report\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1MPYIJO new;
MPRINT(EM_DIAGRAM):   run;
31848      %let EMEXCEPTIONSTRING=;
31849      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31850      * REPORT: Report;
MPRINT(EM_DIAGRAM):   * REPORT: Report;
31851      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31852      %let EM_ACTION = REPORT;
31853      %let syscc = 0;
31854      %macro main;
31855
31856        filename temp catalog 'sashelp.emutil.reporter_macros.source';
31857        %include temp;
31858        filename temp;
31859
31860        %setProperties;
31861
31862        %if %upcase(&EM_ACTION) = CREATE %then %do;
31863          filename temp catalog 'sashelp.emutil.reporter_create.source';
31864          %include temp;
31865          filename temp;
31866
31867          %create;
31868        %end;
31869
31870         %else
31871         %if %upcase(&EM_ACTION) = TRAIN %then %do;
31872
31873             filename temp catalog 'sashelp.emutil.reporter_train.source';
31874             %include temp;
31875             filename temp;
31876             %train;
31877         %end;
31878
31879         %doendm:
31880      %mend main;
31881
31882      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emutil.reporter_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.REPORTER_MACROS.SOURCE.
31885     +%macro SetProperties;
31887     +     /* reporting options */
31888     +     %em_checkmacro(name=EM_PROPERTY_FORMAT,         value=PDF , global=Y);
31889     +     %em_checkmacro(name=EM_PROPERTY_NODES ,         value=PATH, global=Y);
31890     +     %em_checkmacro(name=EM_PROPERTY_STYLE ,         value=DEFAULT, global=Y);
31891     +     %em_checkmacro(name=EM_PROPERTY_SHOWALL,        value=N, global=Y);
31893     +     %em_checkmacro(name=EM_PROPERTY_SUMMARIZATION,  value=Y, global=Y);
31894     +     %em_checkmacro(name=EM_PROPERTY_VARRANKING,     value=Y, global=Y);
31895     +     %em_checkmacro(name=EM_PROPERTY_CLASSIFICATION, value=Y, global=Y);
31896     +     %em_checkmacro(name=EM_PROPERTY_CROSSTABS,      value=Y, global=Y);
31897     +     %em_checkmacro(name=EM_PROPERTY_LIFTCHART,      value=Y, global=Y);
31898     +     %em_checkmacro(name=EM_PROPERTY_FITSTAT,        value=Y, global=Y);
31899     +     %em_checkmacro(name=EM_PROPERTY_COMPAREMDL,     value=Y, global=Y);
31901     +     %em_checkmacro(name=EM_PROPERTY_BASICOUTPUT,    value=N, global=Y);
31903     +    %em_checkmacro(name=EM_PROPERTY_textfont,   value=Arial, global=Y);
31904     +    %em_checkmacro(name=EM_PROPERTY_headersize, value=8, global=Y);
31905     +    %em_checkmacro(name=EM_PROPERTY_textsize,   value=6, global=Y);
31906     +    %em_checkmacro(name=EM_PROPERTY_titlesize,  value=10, global=Y);
31908     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Report;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31909      *------------------------------------------------------------*;
31910      * End REPORT: Report;
31911      *------------------------------------------------------------*;
31912
 
31913      /* Reset EM Options */
31914      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
31915      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
31916      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
