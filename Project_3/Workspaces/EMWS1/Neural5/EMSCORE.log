MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 04, 2015" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "07:50:37" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 04, 2015
Time:                07:50:37
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1555QEF "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1555QEF new;
MPRINT(EM_DIAGRAM):   run;
NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
22778      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
22779      set EMWS1.Neural5_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_OUTKEY;
22780      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
22781      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 27 observations read from the data set EMWS1.NEURAL5_OUTKEY.
NOTE: The data set WORK.OUTKEY has 5 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22782      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22783      *------------------------------------------------------------*;
22784      * Neural5: Scoring DATA data;
22785      *------------------------------------------------------------*;
22786      data EMWS1.Neural5_TRAIN
22787      / view=EMWS1.Neural5_TRAIN
22788      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural5_TRAIN / view=EMWS1.Neural5_TRAIN ;
22789      set EMWS1.BINNING_TRAIN
22790      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_TRAIN ;
22791      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas.
22792     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22793     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
22794     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
22795     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
22796     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
22797     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
22798     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
22799     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
22800     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
22801     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
22802     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
22803     +LENGTH _WARN_ $4
22804     +      F_BAD  $ 12
22805     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
22806     +      label GRP_IMP_CLAGE2 = 'Dummy: GRP_IMP_CLAGE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE2 = 'Dummy: GRP_IMP_CLAGE=2' ;
22807     +
22808     +      label GRP_IMP_CLAGE3 = 'Dummy: GRP_IMP_CLAGE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE3 = 'Dummy: GRP_IMP_CLAGE=3' ;
22809     +
22810     +      label GRP_IMP_CLAGE4 = 'Dummy: GRP_IMP_CLAGE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE4 = 'Dummy: GRP_IMP_CLAGE=4' ;
22811     +
22812     +      label GRP_IMP_DEBTINC2 = 'Dummy: GRP_IMP_DEBTINC=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC2 = 'Dummy: GRP_IMP_DEBTINC=2' ;
22813     +
22814     +      label GRP_IMP_DEBTINC3 = 'Dummy: GRP_IMP_DEBTINC=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC3 = 'Dummy: GRP_IMP_DEBTINC=3' ;
22815     +
22816     +      label GRP_IMP_DEBTINC4 = 'Dummy: GRP_IMP_DEBTINC=4' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC4 = 'Dummy: GRP_IMP_DEBTINC=4' ;
22817     +
22818     +      label GRP_IMP_NINQ1 = 'Dummy: GRP_IMP_NINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ1 = 'Dummy: GRP_IMP_NINQ=1' ;
22819     +
22820     +      label GRP_IMP_NINQ2 = 'Dummy: GRP_IMP_NINQ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ2 = 'Dummy: GRP_IMP_NINQ=2' ;
22821     +
22822     +      label GRP_IMP_NINQ3 = 'Dummy: GRP_IMP_NINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ3 = 'Dummy: GRP_IMP_NINQ=3' ;
22823     +
22824     +      label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
22825     +
22826     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
22827     +
22828     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
22829     +
22830     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
22831     +
22832     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
22833     +
22834     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
22835     +
22836     +      label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
22837     +
22838     +      label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
22839     +
22840     +      label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
22841     +
22842     +      label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
22843     +
22844     +      label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
22845     +
22846     +      label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
22847     +
22848     +      label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
22849     +
22850     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
22851     +
22852     +*** Generate dummy variables for GRP_IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_CLAGE ;
22853     +drop GRP_IMP_CLAGE2 GRP_IMP_CLAGE3 GRP_IMP_CLAGE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_CLAGE2 GRP_IMP_CLAGE3 GRP_IMP_CLAGE4 ;
22854     +if missing( GRP_IMP_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_CLAGE ) then do;
22855     +   GRP_IMP_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = .;
22856     +   GRP_IMP_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = .;
22857     +   GRP_IMP_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = .;
22858     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22859     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22860     +end;
MPRINT(EM_DIAGRAM):   end;
22861     +else do;
MPRINT(EM_DIAGRAM):   else do;
22862     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22863     +   _dm12 = put( GRP_IMP_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_CLAGE , BEST12. );
22864     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   end;
22865     +   if _dm12 = '3'  then do;
22866     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
22867     +      GRP_IMP_CLAGE3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
22868     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = 0.63245553203367;
22869     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = 0.63245553203367;
22870     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   end;
22871     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22872     +      GRP_IMP_CLAGE3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = -0.63245553203367;
22873     +      GRP_IMP_CLAGE4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = -0.63245553203367;
22874     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
22875     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22876     +      GRP_IMP_CLAGE2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22877     +      GRP_IMP_CLAGE3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
22878     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = 0.63245553203367;
22879     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
22880     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
22881     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else do;
22882     +      GRP_IMP_CLAGE3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = .;
22883     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = .;
22884     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = .;
22885     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22886     +      GRP_IMP_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   end;
22887     +      GRP_IMP_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   end;
22888     +      GRP_IMP_CLAGE4 = .;
22889     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DEBTINC ;
22890     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_DEBTINC2 GRP_IMP_DEBTINC3 GRP_IMP_DEBTINC4 ;
22891     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DEBTINC ) then do;
22892     +end;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = .;
22893     +
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = .;
22894     +*** Generate dummy variables for GRP_IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = .;
22895     +drop GRP_IMP_DEBTINC2 GRP_IMP_DEBTINC3 GRP_IMP_DEBTINC4 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22896     +if missing( GRP_IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22897     +   GRP_IMP_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   end;
22898     +   GRP_IMP_DEBTINC3 = .;
22899     +   GRP_IMP_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   else do;
22900     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22901     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22902     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DEBTINC , BEST12. );
22903     +else do;
22904     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22905     +   _dm12 = put( GRP_IMP_DEBTINC , BEST12. );
22906     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   end;
22907     +   if _dm12 = '3'  then do;
22908     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22909     +      GRP_IMP_DEBTINC3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = -0.63245553203367;
22910     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = -0.63245553203367;
22911     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
22912     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22913     +      GRP_IMP_DEBTINC2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
22914     +      GRP_IMP_DEBTINC3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
22915     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = 0.63245553203367;
22916     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = 0.63245553203367;
22917     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   end;
22918     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22919     +      GRP_IMP_DEBTINC3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
22920     +      GRP_IMP_DEBTINC4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = 0.63245553203367;
22921     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
22922     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
22923     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else do;
22924     +      GRP_IMP_DEBTINC3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = .;
22925     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = .;
22926     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = .;
22927     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22928     +      GRP_IMP_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   end;
22929     +      GRP_IMP_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   end;
22930     +      GRP_IMP_DEBTINC4 = .;
22931     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_NINQ ;
22932     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_NINQ1 GRP_IMP_NINQ2 GRP_IMP_NINQ3 ;
22933     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_NINQ ) then do;
22934     +end;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = .;
22935     +
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = .;
22936     +*** Generate dummy variables for GRP_IMP_NINQ ;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = .;
22937     +drop GRP_IMP_NINQ1 GRP_IMP_NINQ2 GRP_IMP_NINQ3 ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22938     +if missing( GRP_IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22939     +   GRP_IMP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   end;
22940     +   GRP_IMP_NINQ2 = .;
22941     +   GRP_IMP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   else do;
22942     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22943     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22944     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_NINQ , BEST12. );
22945     +else do;
22946     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22947     +   _dm12 = put( GRP_IMP_NINQ , BEST12. );
22948     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   end;
22949     +   if _dm12 = '1'  then do;
22950     +      GRP_IMP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
22951     +      GRP_IMP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
22952     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = -0.63245553203367;
22953     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
22954     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
22955     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22956     +      GRP_IMP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
22957     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = 0.63245553203367;
22958     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = 0.63245553203367;
22959     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
22960     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
22961     +      GRP_IMP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
22962     +      GRP_IMP_NINQ3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = 0.63245553203367;
22963     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
22964     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   end;
22965     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   else do;
22966     +      GRP_IMP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = .;
22967     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = .;
22968     +   end;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = .;
22969     +   else do;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22970     +      GRP_IMP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   end;
22971     +      GRP_IMP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   end;
22972     +      GRP_IMP_NINQ3 = .;
22973     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
22974     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop GRP_INDELINQ3 ;
22975     +   end;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
22976     +end;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
22977     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
22978     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22979     +drop GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   end;
22980     +if missing( GRP_INDELINQ ) then do;
22981     +   GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   else do;
22982     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
22983     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
22984     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
22985     +else do;
22986     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
22987     +   _dm12 = put( GRP_INDELINQ , BEST12. );
22988     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
22989     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = 1;
22990     +      GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   end;
22991     +   end;
22992     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
22993     +      GRP_INDELINQ3 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
22994     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
22995     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
22996     +      GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   *** *************************;
22997     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
22998     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   *** *************************;
22999     +   end;
MPRINT(EM_DIAGRAM):   *** *************************;
23000     +end;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
23001     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23002     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23003     +*** *************************;
23004     +*** *************************;
23005     +*** Writing the Node H1 ;
23006     +*** *************************;
23007     +IF _DM_BAD EQ 0 THEN DO;
23008     +   H11  =     0.84162425217187 * GRP_IMP_CLAGE2  +     0.91394613895235 *
23009     +        GRP_IMP_CLAGE3  +     0.91372436571234 * GRP_IMP_CLAGE4
MPRINT(EM_DIAGRAM):   H11 = 0.84162425217187 * GRP_IMP_CLAGE2 + 0.91394613895235 * GRP_IMP_CLAGE3 + 0.91372436571234 * GRP_IMP_CLAGE4 + 1.21199529798407 * GRP_IMP_DEBTINC2 + 0.10023735854587 * GRP_IMP_DEBTINC3 + 1.0000000827403E-10 * GRP_IMP_DEBTINC4 + 
0.4030166160329 * GRP_IMP_NINQ1 + 0.34466117671511 * GRP_IMP_NINQ2 + 9.9999994396249E-11 * GRP_IMP_NINQ3 + 1.0000000827403E-10 * GRP_INDELINQ3 ;
23010     +          +     1.21199529798407 * GRP_IMP_DEBTINC2  +     0.10023735854587 *
23011     +        GRP_IMP_DEBTINC3  +  1.0000000827403E-10 * GRP_IMP_DEBTINC4
23012     +          +      0.4030166160329 * GRP_IMP_NINQ1  +     0.34466117671511 *
23013     +        GRP_IMP_NINQ2  +  9.9999994396249E-11 * GRP_IMP_NINQ3
23014     +          +  1.0000000827403E-10 * GRP_INDELINQ3 ;
23015     +   H12  =     0.44318412836719 * GRP_IMP_CLAGE2  +     2.04152352764679 *
23016     +        GRP_IMP_CLAGE3  +  1.0000000827403E-10 * GRP_IMP_CLAGE4
MPRINT(EM_DIAGRAM):   H12 = 0.44318412836719 * GRP_IMP_CLAGE2 + 2.04152352764679 * GRP_IMP_CLAGE3 + 1.0000000827403E-10 * GRP_IMP_CLAGE4 + 1.86395164971817 * GRP_IMP_DEBTINC2 + 1.0000000827403E-10 * GRP_IMP_DEBTINC3 + 9.9999994396249E-11 * 
GRP_IMP_DEBTINC4 + 0.32412764649444 * GRP_IMP_NINQ1 + 0.19578732841955 * GRP_IMP_NINQ2 + 0.92053217056657 * GRP_IMP_NINQ3 + 1.0000000133514E-10 * GRP_INDELINQ3 ;
23017     +          +     1.86395164971817 * GRP_IMP_DEBTINC2  +  1.0000000827403E-10 *
23018     +        GRP_IMP_DEBTINC3  +  9.9999994396249E-11 * GRP_IMP_DEBTINC4
23019     +          +     0.32412764649444 * GRP_IMP_NINQ1  +     0.19578732841955 *
23020     +        GRP_IMP_NINQ2  +     0.92053217056657 * GRP_IMP_NINQ3
23021     +          +  1.0000000133514E-10 * GRP_INDELINQ3 ;
23022     +   H13  =     0.28161058010309 * GRP_IMP_CLAGE2  +     0.89606737229768 *
23023     +        GRP_IMP_CLAGE3  +  1.0000000827403E-10 * GRP_IMP_CLAGE4
MPRINT(EM_DIAGRAM):   H13 = 0.28161058010309 * GRP_IMP_CLAGE2 + 0.89606737229768 * GRP_IMP_CLAGE3 + 1.0000000827403E-10 * GRP_IMP_CLAGE4 + 1.44402290031604 * GRP_IMP_DEBTINC2 + 1.0000000133514E-10 * GRP_IMP_DEBTINC3 + 0.40839697317136 * GRP_IMP_DEBTINC4 + 
1.0000000827403E-10 * GRP_IMP_NINQ1 + 0.65521944084878 * GRP_IMP_NINQ2 + 1.0000000133514E-10 * GRP_IMP_NINQ3 + 1.52717150748592 * GRP_INDELINQ3 ;
23024     +          +     1.44402290031604 * GRP_IMP_DEBTINC2  +  1.0000000133514E-10 *
23025     +        GRP_IMP_DEBTINC3  +     0.40839697317136 * GRP_IMP_DEBTINC4
23026     +          +  1.0000000827403E-10 * GRP_IMP_NINQ1  +     0.65521944084878 *
23027     +        GRP_IMP_NINQ2  +  1.0000000133514E-10 * GRP_IMP_NINQ3
23028     +          +     1.52717150748592 * GRP_INDELINQ3 ;
23029     +   H14  =  1.0000000133514E-10 * GRP_IMP_CLAGE2  +     0.42156928311284 *
23030     +        GRP_IMP_CLAGE3  +     0.20105839863856 * GRP_IMP_CLAGE4
MPRINT(EM_DIAGRAM):   H14 = 1.0000000133514E-10 * GRP_IMP_CLAGE2 + 0.42156928311284 * GRP_IMP_CLAGE3 + 0.20105839863856 * GRP_IMP_CLAGE4 + 0.31105435980584 * GRP_IMP_DEBTINC2 + 0.50830792932042 * GRP_IMP_DEBTINC3 + 1.0000000827403E-10 * GRP_IMP_DEBTINC4 + 
0.04419961855017 * GRP_IMP_NINQ1 + 0.02908901113418 * GRP_IMP_NINQ2 + 0.07418371374931 * GRP_IMP_NINQ3 + 0.0380118013461 * GRP_INDELINQ3 ;
23031     +          +     0.31105435980584 * GRP_IMP_DEBTINC2  +     0.50830792932042 *
23032     +        GRP_IMP_DEBTINC3  +  1.0000000827403E-10 * GRP_IMP_DEBTINC4
23033     +          +     0.04419961855017 * GRP_IMP_NINQ1  +     0.02908901113418 *
23034     +        GRP_IMP_NINQ2  +     0.07418371374931 * GRP_IMP_NINQ3
23035     +          +      0.0380118013461 * GRP_INDELINQ3 ;
23036     +   H15  =  1.0000000133514E-10 * GRP_IMP_CLAGE2  +  9.9999994396249E-11 *
23037     +        GRP_IMP_CLAGE3  +     0.61981433688837 * GRP_IMP_CLAGE4
MPRINT(EM_DIAGRAM):   H15 = 1.0000000133514E-10 * GRP_IMP_CLAGE2 + 9.9999994396249E-11 * GRP_IMP_CLAGE3 + 0.61981433688837 * GRP_IMP_CLAGE4 + 1.3235985600726 * GRP_IMP_DEBTINC2 + 1.0000000827403E-10 * GRP_IMP_DEBTINC3 + 0.63969853377089 * GRP_IMP_DEBTINC4 
+ 9.9999994396249E-11 * GRP_IMP_NINQ1 + 0.43670668517942 * GRP_IMP_NINQ2 + 0.12517306001487 * GRP_IMP_NINQ3 + 0.4202953626148 * GRP_INDELINQ3 ;
23038     +          +      1.3235985600726 * GRP_IMP_DEBTINC2  +  1.0000000827403E-10 *
MPRINT(EM_DIAGRAM):   H11 = 1.27322598653348 + H11 ;
23039     +        GRP_IMP_DEBTINC3  +     0.63969853377089 * GRP_IMP_DEBTINC4
MPRINT(EM_DIAGRAM):   H12 = 1.00173288370604 + H12 ;
23040     +          +  9.9999994396249E-11 * GRP_IMP_NINQ1  +     0.43670668517942 *
MPRINT(EM_DIAGRAM):   H13 = -2.19477141796525 + H13 ;
23041     +        GRP_IMP_NINQ2  +     0.12517306001487 * GRP_IMP_NINQ3
MPRINT(EM_DIAGRAM):   H14 = -0.41073547330617 + H14 ;
23042     +          +      0.4202953626148 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H15 = 1.52044566991639 + H15 ;
23043     +   H11  =     1.27322598653348 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
23044     +   H12  =     1.00173288370604 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
23045     +   H13  =    -2.19477141796525 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
23046     +   H14  =    -0.41073547330617 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
23047     +   H15  =     1.52044566991639 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
23048     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   END;
23049     +   H12  = TANH(H12 );
23050     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   ELSE DO;
23051     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H11 = .;
23052     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H12 = .;
23053     +END;
MPRINT(EM_DIAGRAM):   H13 = .;
23054     +ELSE DO;
MPRINT(EM_DIAGRAM):   H14 = .;
MPRINT(EM_DIAGRAM):   H15 = .;
23055     +   H11  = .;
MPRINT(EM_DIAGRAM):   END;
23056     +   H12  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
23057     +   H13  = .;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
23058     +   H14  = .;
MPRINT(EM_DIAGRAM):   *** *************************;
23059     +   H15  = .;
23060     +END;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
23061     +*** *************************;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
23062     +*** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
23063     +*** *************************;
23064     +
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
23065     +*** Generate dummy variables for BAD ;
23066     +drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
23067     +label F_BAD = 'From: BAD' ;
23068     +length F_BAD $ 12;
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
23069     +F_BAD = put( BAD , BEST12. );
23070     +%DMNORMIP( F_BAD )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
MPRINT(EM_DIAGRAM):   end;
23071     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   else do;
23072     +   BAD1 = .;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
23073     +   BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
23074     +end;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
23075     +else do;
MPRINT(EM_DIAGRAM):   end;
23076     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
23077     +      BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
23078     +      BAD0 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
23079     +   end;
MPRINT(EM_DIAGRAM):   end;
23080     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
23081     +      BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD1 = .;
23082     +      BAD0 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = .;
23083     +   end;
MPRINT(EM_DIAGRAM):   end;
23084     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23085     +      BAD1 = .;
23086     +      BAD0 = .;
23087     +   end;
MPRINT(EM_DIAGRAM):   P_BAD1 = -2.64403957786331 * H11 + 2.41620588643142 * H12 + 1.12237375231097 * H13 + -3.79942630995982 * H14 + 2.96546954408798 * H15 ;
23088     +end;
MPRINT(EM_DIAGRAM):   P_BAD1 = -3.74774044260044 + P_BAD1 ;
23089     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
23090     +   P_BAD1  =    -2.64403957786331 * H11  +     2.41620588643142 * H12
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
23091     +          +     1.12237375231097 * H13  +    -3.79942630995982 * H14
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
23092     +          +     2.96546954408798 * H15 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
23093     +   P_BAD1  =    -3.74774044260044 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
23094     +   P_BAD0  = 0;
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
23095     +   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
23096     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
23097     +   P_BAD1  = EXP(P_BAD1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
23098     +   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   END;
23099     +   P_BAD0  = EXP(P_BAD0  - _MAX_);
23100     +   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   ELSE DO;
23101     +   P_BAD1  = P_BAD1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
23102     +   P_BAD0  = P_BAD0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
23103     +END;
MPRINT(EM_DIAGRAM):   END;
23104     +ELSE DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19939577039274;
23105     +   P_BAD1  = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80060422960725;
23106     +   P_BAD0  = .;
MPRINT(EM_DIAGRAM):   END;
23107     +END;
MPRINT(EM_DIAGRAM):   *** *****************************;
23108     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
23109     +   P_BAD1  =     0.19939577039274;
MPRINT(EM_DIAGRAM):   *** ******************************;
23110     +   P_BAD0  =     0.80060422960725;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
23111     +END;
23112     +*** *****************************;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
23113     +*** Writing the Residuals  of the Node BAD ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
23114     +*** ******************************;
23115     +IF MISSING( BAD1 ) THEN R_BAD1  = . ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
23116     +ELSE R_BAD1  = BAD1  - P_BAD1 ;
MPRINT(EM_DIAGRAM):   *** *************************;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
23117     +IF MISSING( BAD0 ) THEN R_BAD0  = . ;
MPRINT(EM_DIAGRAM):   *** *************************;
23118     +ELSE R_BAD0  = BAD0  - P_BAD0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
23119     +*** *************************;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
23120     +*** Writing the I_BAD  AND U_BAD ;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
23121     +*** *************************;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
23122     +_MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
23123     +I_BAD  = "1           " ;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
23124     +U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   END;
23125     +IF( _MAXP_ LT P_BAD0  ) THEN DO;
MPRINT(EM_DIAGRAM):   ********************************;
23126     +   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
23127     +   I_BAD  = "0           " ;
MPRINT(EM_DIAGRAM):   ********************************;
23128     +   U_BAD  =                    0;
23129     +END;
23130     +********************************;
23131     +*** End Scoring Code for Neural;
23132     +********************************;
23133     +drop
23134     +H11
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
23135     +H12
23136     +H13
23137     +H14
23138     +H15
23139     +;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23140      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL5_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23141      quit;
23142      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23143      filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23144      *------------------------------------------------------------*;
23145      * Neural5: Scoring VALIDATE data;
23146      *------------------------------------------------------------*;
23147      data EMWS1.Neural5_VALIDATE
23148      / view=EMWS1.Neural5_VALIDATE
23149      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural5_VALIDATE / view=EMWS1.Neural5_VALIDATE ;
23150      set EMWS1.BINNING_VALIDATE
23151      ;
MPRINT(EM_DIAGRAM):   set EMWS1.BINNING_VALIDATE ;
23152      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\EMFLOWSCORE.sas.
23153     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
23154     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
23155     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
23156     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
23157     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
23158     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
23159     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
23160     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
23161     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
23162     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
23163     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
23164     +LENGTH _WARN_ $4
23165     +      F_BAD  $ 12
23166     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_BAD $ 12 ;
23167     +      label GRP_IMP_CLAGE2 = 'Dummy: GRP_IMP_CLAGE=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE2 = 'Dummy: GRP_IMP_CLAGE=2' ;
23168     +
23169     +      label GRP_IMP_CLAGE3 = 'Dummy: GRP_IMP_CLAGE=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE3 = 'Dummy: GRP_IMP_CLAGE=3' ;
23170     +
23171     +      label GRP_IMP_CLAGE4 = 'Dummy: GRP_IMP_CLAGE=4' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_CLAGE4 = 'Dummy: GRP_IMP_CLAGE=4' ;
23172     +
23173     +      label GRP_IMP_DEBTINC2 = 'Dummy: GRP_IMP_DEBTINC=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC2 = 'Dummy: GRP_IMP_DEBTINC=2' ;
23174     +
23175     +      label GRP_IMP_DEBTINC3 = 'Dummy: GRP_IMP_DEBTINC=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC3 = 'Dummy: GRP_IMP_DEBTINC=3' ;
23176     +
23177     +      label GRP_IMP_DEBTINC4 = 'Dummy: GRP_IMP_DEBTINC=4' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_DEBTINC4 = 'Dummy: GRP_IMP_DEBTINC=4' ;
23178     +
23179     +      label GRP_IMP_NINQ1 = 'Dummy: GRP_IMP_NINQ=1' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ1 = 'Dummy: GRP_IMP_NINQ=1' ;
23180     +
23181     +      label GRP_IMP_NINQ2 = 'Dummy: GRP_IMP_NINQ=2' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ2 = 'Dummy: GRP_IMP_NINQ=2' ;
23182     +
23183     +      label GRP_IMP_NINQ3 = 'Dummy: GRP_IMP_NINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_IMP_NINQ3 = 'Dummy: GRP_IMP_NINQ=3' ;
23184     +
23185     +      label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
MPRINT(EM_DIAGRAM):   label GRP_INDELINQ3 = 'Dummy: GRP_INDELINQ=3' ;
23186     +
23187     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
23188     +
23189     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
23190     +
23191     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
23192     +
23193     +      label H14 = 'Hidden: H1=4' ;
MPRINT(EM_DIAGRAM):   label H14 = 'Hidden: H1=4' ;
23194     +
23195     +      label H15 = 'Hidden: H1=5' ;
MPRINT(EM_DIAGRAM):   label H15 = 'Hidden: H1=5' ;
23196     +
23197     +      label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
23198     +
23199     +      label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
23200     +
23201     +      label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
23202     +
23203     +      label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
23204     +
23205     +      label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
23206     +
23207     +      label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
23208     +
23209     +      label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
23210     +
23211     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
23212     +
23213     +*** Generate dummy variables for GRP_IMP_CLAGE ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_CLAGE ;
23214     +drop GRP_IMP_CLAGE2 GRP_IMP_CLAGE3 GRP_IMP_CLAGE4 ;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_CLAGE2 GRP_IMP_CLAGE3 GRP_IMP_CLAGE4 ;
23215     +if missing( GRP_IMP_CLAGE ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_CLAGE ) then do;
23216     +   GRP_IMP_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = .;
23217     +   GRP_IMP_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = .;
23218     +   GRP_IMP_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = .;
23219     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23220     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23221     +end;
MPRINT(EM_DIAGRAM):   end;
23222     +else do;
MPRINT(EM_DIAGRAM):   else do;
23223     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23224     +   _dm12 = put( GRP_IMP_CLAGE , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_CLAGE , BEST12. );
23225     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23226     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23227     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
23228     +      GRP_IMP_CLAGE3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = -0.63245553203367;
23229     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
23230     +   end;
MPRINT(EM_DIAGRAM):   end;
23231     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
23232     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
23233     +      GRP_IMP_CLAGE3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = 0.63245553203367;
23234     +      GRP_IMP_CLAGE4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = 0.63245553203367;
23235     +   end;
MPRINT(EM_DIAGRAM):   end;
23236     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
23237     +      GRP_IMP_CLAGE2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = -0.63245553203367;
23238     +      GRP_IMP_CLAGE3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = -0.63245553203367;
23239     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
23240     +   end;
MPRINT(EM_DIAGRAM):   end;
23241     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23242     +      GRP_IMP_CLAGE2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = 0.63245553203367;
23243     +      GRP_IMP_CLAGE3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = 0.63245553203367;
23244     +      GRP_IMP_CLAGE4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = -0.63245553203367;
23245     +   end;
MPRINT(EM_DIAGRAM):   end;
23246     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23247     +      GRP_IMP_CLAGE2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE2 = .;
23248     +      GRP_IMP_CLAGE3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE3 = .;
23249     +      GRP_IMP_CLAGE4 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_CLAGE4 = .;
23250     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23251     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23252     +   end;
MPRINT(EM_DIAGRAM):   end;
23253     +end;
MPRINT(EM_DIAGRAM):   end;
23254     +
23255     +*** Generate dummy variables for GRP_IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DEBTINC ;
23256     +drop GRP_IMP_DEBTINC2 GRP_IMP_DEBTINC3 GRP_IMP_DEBTINC4 ;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_DEBTINC2 GRP_IMP_DEBTINC3 GRP_IMP_DEBTINC4 ;
23257     +if missing( GRP_IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DEBTINC ) then do;
23258     +   GRP_IMP_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = .;
23259     +   GRP_IMP_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = .;
23260     +   GRP_IMP_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = .;
23261     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23262     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23263     +end;
MPRINT(EM_DIAGRAM):   end;
23264     +else do;
MPRINT(EM_DIAGRAM):   else do;
23265     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23266     +   _dm12 = put( GRP_IMP_DEBTINC , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DEBTINC , BEST12. );
23267     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23268     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23269     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
23270     +      GRP_IMP_DEBTINC3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = -0.63245553203367;
23271     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
23272     +   end;
MPRINT(EM_DIAGRAM):   end;
23273     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
23274     +      GRP_IMP_DEBTINC2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = -0.63245553203367;
23275     +      GRP_IMP_DEBTINC3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = -0.63245553203367;
23276     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
23277     +   end;
MPRINT(EM_DIAGRAM):   end;
23278     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
23279     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
23280     +      GRP_IMP_DEBTINC3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = 0.63245553203367;
23281     +      GRP_IMP_DEBTINC4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = 0.63245553203367;
23282     +   end;
MPRINT(EM_DIAGRAM):   end;
23283     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23284     +      GRP_IMP_DEBTINC2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = 0.63245553203367;
23285     +      GRP_IMP_DEBTINC3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = 0.63245553203367;
23286     +      GRP_IMP_DEBTINC4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = -0.63245553203367;
23287     +   end;
MPRINT(EM_DIAGRAM):   end;
23288     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23289     +      GRP_IMP_DEBTINC2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC2 = .;
23290     +      GRP_IMP_DEBTINC3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC3 = .;
23291     +      GRP_IMP_DEBTINC4 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEBTINC4 = .;
23292     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23293     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23294     +   end;
MPRINT(EM_DIAGRAM):   end;
23295     +end;
MPRINT(EM_DIAGRAM):   end;
23296     +
23297     +*** Generate dummy variables for GRP_IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_NINQ ;
23298     +drop GRP_IMP_NINQ1 GRP_IMP_NINQ2 GRP_IMP_NINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_IMP_NINQ1 GRP_IMP_NINQ2 GRP_IMP_NINQ3 ;
23299     +if missing( GRP_IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_NINQ ) then do;
23300     +   GRP_IMP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = .;
23301     +   GRP_IMP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = .;
23302     +   GRP_IMP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = .;
23303     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23304     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23305     +end;
MPRINT(EM_DIAGRAM):   end;
23306     +else do;
MPRINT(EM_DIAGRAM):   else do;
23307     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23308     +   _dm12 = put( GRP_IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_NINQ , BEST12. );
23309     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23310     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
23311     +      GRP_IMP_NINQ1 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = -0.63245553203367;
23312     +      GRP_IMP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = -0.63245553203367;
23313     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
23314     +   end;
MPRINT(EM_DIAGRAM):   end;
23315     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
23316     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
23317     +      GRP_IMP_NINQ2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = -0.63245553203367;
23318     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
23319     +   end;
MPRINT(EM_DIAGRAM):   end;
23320     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23321     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
23322     +      GRP_IMP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = 0.63245553203367;
23323     +      GRP_IMP_NINQ3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = 0.63245553203367;
23324     +   end;
MPRINT(EM_DIAGRAM):   end;
23325     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
23326     +      GRP_IMP_NINQ1 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = 0.63245553203367;
23327     +      GRP_IMP_NINQ2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = 0.63245553203367;
23328     +      GRP_IMP_NINQ3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = -0.63245553203367;
23329     +   end;
MPRINT(EM_DIAGRAM):   end;
23330     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23331     +      GRP_IMP_NINQ1 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ1 = .;
23332     +      GRP_IMP_NINQ2 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ2 = .;
23333     +      GRP_IMP_NINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ3 = .;
23334     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23335     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23336     +   end;
MPRINT(EM_DIAGRAM):   end;
23337     +end;
MPRINT(EM_DIAGRAM):   end;
23338     +
23339     +*** Generate dummy variables for GRP_INDELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_INDELINQ ;
23340     +drop GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   drop GRP_INDELINQ3 ;
23341     +if missing( GRP_INDELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_INDELINQ ) then do;
23342     +   GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
23343     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
23344     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23345     +end;
MPRINT(EM_DIAGRAM):   end;
23346     +else do;
MPRINT(EM_DIAGRAM):   else do;
23347     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
23348     +   _dm12 = put( GRP_INDELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_INDELINQ , BEST12. );
23349     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23350     +   if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
23351     +      GRP_INDELINQ3 = -1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = -1;
23352     +   end;
MPRINT(EM_DIAGRAM):   end;
23353     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
23354     +      GRP_INDELINQ3 = 1;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = 1;
23355     +   end;
MPRINT(EM_DIAGRAM):   end;
23356     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23357     +      GRP_INDELINQ3 = .;
MPRINT(EM_DIAGRAM):   GRP_INDELINQ3 = .;
23358     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
23359     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
23360     +   end;
MPRINT(EM_DIAGRAM):   end;
23361     +end;
MPRINT(EM_DIAGRAM):   end;
23362     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23363     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
23364     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23365     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23366     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
23367     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23368     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23369     +   H11  =     0.84162425217187 * GRP_IMP_CLAGE2  +     0.91394613895235 *
23370     +        GRP_IMP_CLAGE3  +     0.91372436571234 * GRP_IMP_CLAGE4
23371     +          +     1.21199529798407 * GRP_IMP_DEBTINC2  +     0.10023735854587 *
23372     +        GRP_IMP_DEBTINC3  +  1.0000000827403E-10 * GRP_IMP_DEBTINC4
23373     +          +      0.4030166160329 * GRP_IMP_NINQ1  +     0.34466117671511 *
23374     +        GRP_IMP_NINQ2  +  9.9999994396249E-11 * GRP_IMP_NINQ3
23375     +          +  1.0000000827403E-10 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H11 = 0.84162425217187 * GRP_IMP_CLAGE2 + 0.91394613895235 * GRP_IMP_CLAGE3 + 0.91372436571234 * GRP_IMP_CLAGE4 + 1.21199529798407 * GRP_IMP_DEBTINC2 + 0.10023735854587 * GRP_IMP_DEBTINC3 + 1.0000000827403E-10 * GRP_IMP_DEBTINC4 + 
0.4030166160329 * GRP_IMP_NINQ1 + 0.34466117671511 * GRP_IMP_NINQ2 + 9.9999994396249E-11 * GRP_IMP_NINQ3 + 1.0000000827403E-10 * GRP_INDELINQ3 ;
23376     +   H12  =     0.44318412836719 * GRP_IMP_CLAGE2  +     2.04152352764679 *
23377     +        GRP_IMP_CLAGE3  +  1.0000000827403E-10 * GRP_IMP_CLAGE4
23378     +          +     1.86395164971817 * GRP_IMP_DEBTINC2  +  1.0000000827403E-10 *
23379     +        GRP_IMP_DEBTINC3  +  9.9999994396249E-11 * GRP_IMP_DEBTINC4
23380     +          +     0.32412764649444 * GRP_IMP_NINQ1  +     0.19578732841955 *
23381     +        GRP_IMP_NINQ2  +     0.92053217056657 * GRP_IMP_NINQ3
23382     +          +  1.0000000133514E-10 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H12 = 0.44318412836719 * GRP_IMP_CLAGE2 + 2.04152352764679 * GRP_IMP_CLAGE3 + 1.0000000827403E-10 * GRP_IMP_CLAGE4 + 1.86395164971817 * GRP_IMP_DEBTINC2 + 1.0000000827403E-10 * GRP_IMP_DEBTINC3 + 9.9999994396249E-11 * 
GRP_IMP_DEBTINC4 + 0.32412764649444 * GRP_IMP_NINQ1 + 0.19578732841955 * GRP_IMP_NINQ2 + 0.92053217056657 * GRP_IMP_NINQ3 + 1.0000000133514E-10 * GRP_INDELINQ3 ;
23383     +   H13  =     0.28161058010309 * GRP_IMP_CLAGE2  +     0.89606737229768 *
23384     +        GRP_IMP_CLAGE3  +  1.0000000827403E-10 * GRP_IMP_CLAGE4
23385     +          +     1.44402290031604 * GRP_IMP_DEBTINC2  +  1.0000000133514E-10 *
23386     +        GRP_IMP_DEBTINC3  +     0.40839697317136 * GRP_IMP_DEBTINC4
23387     +          +  1.0000000827403E-10 * GRP_IMP_NINQ1  +     0.65521944084878 *
23388     +        GRP_IMP_NINQ2  +  1.0000000133514E-10 * GRP_IMP_NINQ3
23389     +          +     1.52717150748592 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H13 = 0.28161058010309 * GRP_IMP_CLAGE2 + 0.89606737229768 * GRP_IMP_CLAGE3 + 1.0000000827403E-10 * GRP_IMP_CLAGE4 + 1.44402290031604 * GRP_IMP_DEBTINC2 + 1.0000000133514E-10 * GRP_IMP_DEBTINC3 + 0.40839697317136 * GRP_IMP_DEBTINC4 + 
1.0000000827403E-10 * GRP_IMP_NINQ1 + 0.65521944084878 * GRP_IMP_NINQ2 + 1.0000000133514E-10 * GRP_IMP_NINQ3 + 1.52717150748592 * GRP_INDELINQ3 ;
23390     +   H14  =  1.0000000133514E-10 * GRP_IMP_CLAGE2  +     0.42156928311284 *
23391     +        GRP_IMP_CLAGE3  +     0.20105839863856 * GRP_IMP_CLAGE4
23392     +          +     0.31105435980584 * GRP_IMP_DEBTINC2  +     0.50830792932042 *
23393     +        GRP_IMP_DEBTINC3  +  1.0000000827403E-10 * GRP_IMP_DEBTINC4
23394     +          +     0.04419961855017 * GRP_IMP_NINQ1  +     0.02908901113418 *
23395     +        GRP_IMP_NINQ2  +     0.07418371374931 * GRP_IMP_NINQ3
23396     +          +      0.0380118013461 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H14 = 1.0000000133514E-10 * GRP_IMP_CLAGE2 + 0.42156928311284 * GRP_IMP_CLAGE3 + 0.20105839863856 * GRP_IMP_CLAGE4 + 0.31105435980584 * GRP_IMP_DEBTINC2 + 0.50830792932042 * GRP_IMP_DEBTINC3 + 1.0000000827403E-10 * GRP_IMP_DEBTINC4 + 
0.04419961855017 * GRP_IMP_NINQ1 + 0.02908901113418 * GRP_IMP_NINQ2 + 0.07418371374931 * GRP_IMP_NINQ3 + 0.0380118013461 * GRP_INDELINQ3 ;
23397     +   H15  =  1.0000000133514E-10 * GRP_IMP_CLAGE2  +  9.9999994396249E-11 *
23398     +        GRP_IMP_CLAGE3  +     0.61981433688837 * GRP_IMP_CLAGE4
23399     +          +      1.3235985600726 * GRP_IMP_DEBTINC2  +  1.0000000827403E-10 *
23400     +        GRP_IMP_DEBTINC3  +     0.63969853377089 * GRP_IMP_DEBTINC4
23401     +          +  9.9999994396249E-11 * GRP_IMP_NINQ1  +     0.43670668517942 *
23402     +        GRP_IMP_NINQ2  +     0.12517306001487 * GRP_IMP_NINQ3
23403     +          +      0.4202953626148 * GRP_INDELINQ3 ;
MPRINT(EM_DIAGRAM):   H15 = 1.0000000133514E-10 * GRP_IMP_CLAGE2 + 9.9999994396249E-11 * GRP_IMP_CLAGE3 + 0.61981433688837 * GRP_IMP_CLAGE4 + 1.3235985600726 * GRP_IMP_DEBTINC2 + 1.0000000827403E-10 * GRP_IMP_DEBTINC3 + 0.63969853377089 * GRP_IMP_DEBTINC4 
+ 9.9999994396249E-11 * GRP_IMP_NINQ1 + 0.43670668517942 * GRP_IMP_NINQ2 + 0.12517306001487 * GRP_IMP_NINQ3 + 0.4202953626148 * GRP_INDELINQ3 ;
23404     +   H11  =     1.27322598653348 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.27322598653348 + H11 ;
23405     +   H12  =     1.00173288370604 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 1.00173288370604 + H12 ;
23406     +   H13  =    -2.19477141796525 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -2.19477141796525 + H13 ;
23407     +   H14  =    -0.41073547330617 + H14 ;
MPRINT(EM_DIAGRAM):   H14 = -0.41073547330617 + H14 ;
23408     +   H15  =     1.52044566991639 + H15 ;
MPRINT(EM_DIAGRAM):   H15 = 1.52044566991639 + H15 ;
23409     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
23410     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
23411     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
23412     +   H14  = TANH(H14 );
MPRINT(EM_DIAGRAM):   H14 = TANH(H14 );
23413     +   H15  = TANH(H15 );
MPRINT(EM_DIAGRAM):   H15 = TANH(H15 );
23414     +END;
MPRINT(EM_DIAGRAM):   END;
23415     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
23416     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
23417     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
23418     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
23419     +   H14  = .;
MPRINT(EM_DIAGRAM):   H14 = .;
23420     +   H15  = .;
MPRINT(EM_DIAGRAM):   H15 = .;
23421     +END;
MPRINT(EM_DIAGRAM):   END;
23422     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23423     +*** Writing the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Node BAD ;
23424     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23425     +
23426     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
23427     +drop BAD1 BAD0 ;
MPRINT(EM_DIAGRAM):   drop BAD1 BAD0 ;
23428     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
23429     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
23430     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
23431     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
23432     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
23433     +   BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
23434     +   BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
23435     +end;
MPRINT(EM_DIAGRAM):   end;
23436     +else do;
MPRINT(EM_DIAGRAM):   else do;
23437     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
23438     +      BAD1 = 0;
MPRINT(EM_DIAGRAM):   BAD1 = 0;
23439     +      BAD0 = 1;
MPRINT(EM_DIAGRAM):   BAD0 = 1;
23440     +   end;
MPRINT(EM_DIAGRAM):   end;
23441     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
23442     +      BAD1 = 1;
MPRINT(EM_DIAGRAM):   BAD1 = 1;
23443     +      BAD0 = 0;
MPRINT(EM_DIAGRAM):   BAD0 = 0;
23444     +   end;
MPRINT(EM_DIAGRAM):   end;
23445     +   else do;
MPRINT(EM_DIAGRAM):   else do;
23446     +      BAD1 = .;
MPRINT(EM_DIAGRAM):   BAD1 = .;
23447     +      BAD0 = .;
MPRINT(EM_DIAGRAM):   BAD0 = .;
23448     +   end;
MPRINT(EM_DIAGRAM):   end;
23449     +end;
MPRINT(EM_DIAGRAM):   end;
23450     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
23451     +   P_BAD1  =    -2.64403957786331 * H11  +     2.41620588643142 * H12
23452     +          +     1.12237375231097 * H13  +    -3.79942630995982 * H14
23453     +          +     2.96546954408798 * H15 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -2.64403957786331 * H11 + 2.41620588643142 * H12 + 1.12237375231097 * H13 + -3.79942630995982 * H14 + 2.96546954408798 * H15 ;
23454     +   P_BAD1  =    -3.74774044260044 + P_BAD1 ;
MPRINT(EM_DIAGRAM):   P_BAD1 = -3.74774044260044 + P_BAD1 ;
23455     +   P_BAD0  = 0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
23456     +   _MAX_ = MAX (P_BAD1 , P_BAD0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_BAD1 , P_BAD0 );
23457     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
23458     +   P_BAD1  = EXP(P_BAD1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD1 = EXP(P_BAD1 - _MAX_);
23459     +   _SUM_ = _SUM_ + P_BAD1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD1 ;
23460     +   P_BAD0  = EXP(P_BAD0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_BAD0 = EXP(P_BAD0 - _MAX_);
23461     +   _SUM_ = _SUM_ + P_BAD0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_BAD0 ;
23462     +   P_BAD1  = P_BAD1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD1 = P_BAD1 / _SUM_;
23463     +   P_BAD0  = P_BAD0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_BAD0 = P_BAD0 / _SUM_;
23464     +END;
MPRINT(EM_DIAGRAM):   END;
23465     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
23466     +   P_BAD1  = .;
MPRINT(EM_DIAGRAM):   P_BAD1 = .;
23467     +   P_BAD0  = .;
MPRINT(EM_DIAGRAM):   P_BAD0 = .;
23468     +END;
MPRINT(EM_DIAGRAM):   END;
23469     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
23470     +   P_BAD1  =     0.19939577039274;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.19939577039274;
23471     +   P_BAD0  =     0.80060422960725;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.80060422960725;
23472     +END;
MPRINT(EM_DIAGRAM):   END;
23473     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
23474     +*** Writing the Residuals  of the Node BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node BAD ;
23475     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
23476     +IF MISSING( BAD1 ) THEN R_BAD1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD1 ) THEN R_BAD1 = . ;
23477     +ELSE R_BAD1  = BAD1  - P_BAD1 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD1 = BAD1 - P_BAD1 ;
23478     +IF MISSING( BAD0 ) THEN R_BAD0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( BAD0 ) THEN R_BAD0 = . ;
23479     +ELSE R_BAD0  = BAD0  - P_BAD0 ;
MPRINT(EM_DIAGRAM):   ELSE R_BAD0 = BAD0 - P_BAD0 ;
23480     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23481     +*** Writing the I_BAD  AND U_BAD ;
MPRINT(EM_DIAGRAM):   *** Writing the I_BAD AND U_BAD ;
23482     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
23483     +_MAXP_ = P_BAD1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD1 ;
23484     +I_BAD  = "1           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "1           " ;
23485     +U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
23486     +IF( _MAXP_ LT P_BAD0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_BAD0 ) THEN DO;
23487     +   _MAXP_ = P_BAD0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_BAD0 ;
23488     +   I_BAD  = "0           " ;
MPRINT(EM_DIAGRAM):   I_BAD = "0           " ;
23489     +   U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
23490     +END;
MPRINT(EM_DIAGRAM):   END;
23491     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
23492     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
23493     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
23494     +drop
23495     +H11
23496     +H12
23497     +H13
23498     +H14
23499     +H15
23500     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 H14 H15 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
23501      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL5_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
      

MPRINT(EM_DIAGRAM):   quit;
23502      quit;
23503      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
23504      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23505      * Neural5: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural5: Computing metadata for TRAIN data;
23506      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL5_TRAIN.VIEW used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\sakerb01\Desktop\SAS EM 12.3 Tutorials _ Projects\Project_3\Workspaces\EMWS1\Neural5\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural5_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural5_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural5_TRAIN out=WORK.M2H8_SSM noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2H8_SSM;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2H8_SSM(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2H8_SSM;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2H8_SSM;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0V7HRAT NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M22WO6EI(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   set WORK.M0V7HRAT;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural5";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("R_BAD1") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("R_BAD0") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("F_BAD") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("I_BAD") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("U_BAD") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural5";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Neural5";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural5: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
23841      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
23842      set EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO;
23843      where DATA='Neural5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural5' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
23844      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL5_EMINFO.
      WHERE (DATA='Neural5') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23845      data EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural5_EMINFO;
23846      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
23847      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
23848      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
23852      run;
23853      data EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural5_EMINFO;
23854      set EMWS1.Neural5_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural5_EMINFO WORK.MODELTEMP_INFO;
23855      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL5_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

23856      proc sort data = EMWS1.Neural5_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural5_EMINFO NOTHREADS;
23857      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23858      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL5_EMINFO.
NOTE: The data set EMWS1.NEURAL5_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23859      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
23860      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23861      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23862      proc sort data = EMWS1.Neural5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Neural5_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
23863      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23864      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.NEURAL5_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23865      data EMWS1.Neural5_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural5_EMINFO;
23866      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
23867      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
23868      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.NEURAL5_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23869      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
23870      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
23871      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
23872      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

NOTE: View EMWS1.NEURAL5_TRAIN.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.25 seconds
      
NOTE: View EMWS1.NEURAL5_VALIDATE.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.24 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
